{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=12794",
  "eid" : "04d19320-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778517330,
  "textBody" : "The Gopher protocol is a TCP/IP application layer protocol designed for distributing, searching, and retrieving documents over the Internet. The Gopher protocol was strongly oriented towards a menu-document design and presented an alternative to the World Wide Web in its early stages, but ultimately Hypertext Transfer Protocol (HTTP) became the dominant protocol. The Gopher ecosystem is often regarded as the effective predecessor of the World Wide Web.\n\nThe protocol was invented by a team led by Mark P. McCahill at the University of Minnesota.  It offers some features not natively supported by the Web and imposes a much stronger hierarchy on information stored on it. Its text menu interface is well-suited to computing environments that rely heavily on remote text-oriented computer terminals, which were still common at the time of its creation in 1991, and the simplicity of its protocol facilitated a wide variety of client implementations. More recent Gopher revisions and graphical clients added support for multimedia. Gopher was preferred by many network administrators for using fewer network resources than Web services.\n\nGopher's hierarchical structure provided a platform for the first large-scale electronic library connections. Gopher has been described by some enthusiasts as \"faster and more efficient and so much more organised\" than today's Web services. The Gopher protocol is still in use by enthusiasts, and although it has been almost entirely supplanted by the Web, a small population of actively maintained servers remains.\n\nOrigins\n\nGopher system was released in mid-1991 by Mark P. McCahill, Farhad Anklesaria, Paul Lindner, Daniel Torrey, and Bob Alberti of the University of Minnesota in the United States. Its central goals were, as stated in RFC 1436:\n\n* A file-like hierarchical arrangement that would be familiar to users.\n* A simple syntax.\n* A system that can be created quickly and inexpensively.\n* Extending the file system metaphor, such as searches.\n\nGopher combines document hierarchies with collections of services, including WAIS, the Archie and Veronica search engines, and gateways to other information systems such as File Transfer Protocol (FTP) and Usenet.\n\nThe general interest in Campus-Wide Information Systems (CWISs) in higher education at the time, and the ease with which a Gopher server could be set up to create an instant CWIS with links to other sites' online directories and resources were the factors contributing to Gopher's rapid adoption. By 1992, the standard method of locating someone's e-mail address was to find their organization's CCSO nameserver entry in Gopher, and query the nameserver.\n\nThe name was coined by Anklesaria as a play on several meanings of the word \"gopher\". McCahill credits Anklesaria with naming Gopher The University of Minnesota mascot is the gopher, a gofer is an assistant who \"goes for\" things, and a gopher burrows through the ground to reach a desired location.\n\nDecline\n\nThe World Wide Web was in its infancy in 1991, and Gopher services quickly became established. By the late 1990s, Gopher had largely ceased expanding. Several factors contributed to Gopher's stagnation:\n\n* In February 1993, the University of Minnesota announced that it would charge licensing fees for the use of its implementation of the Gopher server. As a consequence of this, some users were concerned that a licensing fee would also be charged for independent implementations. Users were scared away from Gopher technology, to the advantage of the Web, of which CERN disclaimed ownership. In September 2000, the University of Minnesota re-licensed its Gopher software under the GNU General Public License.\n* Gopher client functionality was quickly duplicated by early Web browsers, such as Mosaic, which subsumed the protocol as part of their functions.\n* Gopher has a more rigid structure compared to the free-form HTML of the Web. With Gopher, every document has a defined format and type, and the typical user navigates through a single server-defined menu system to get to a particular document. This can be quite different from the way a typical user might traverse documents on the Web.\n\nGopher remains in active use by its enthusiasts, and there have been attempts to revive the use of Gopher on modern platforms and mobile devices. One such attempt is The Overbite Project, which hosts various browser extensions and modern clients.\n\n, there were approximately 160 gopher servers indexed by Veronica-2, reflecting a slow growth from 2007 when there were fewer than 100, although many are infrequently updated. Within these servers Veronica indexed approximately 2.5 million unique selectors. A handful of new servers are set up every year by hobbyists — over 50 have been set up and added to Floodgap's list since 1999.http://gopher.floodgap.com/1/new  A snapshot of Gopherspace as it was in 2007 was circulated on BitTorrent and is still available. Due to the simplicity of the Gopher protocol, setting up new servers or adding Gopher support to browsers is often done in a tongue-in-cheek manner, principally on April Fools' Day.[gopher://gopher.floodgap.com/1/new]    In November 2014 Veronica indexed 144 gopher servers, reflecting a small drop from 2012, but within these servers Veronica indexed approximately 3 million unique selectors. In March 2016 Veronica indexed 135 gopher servers, within which it indexed approximately 4 million unique selectors. In March 2017 Veronica indexed 133 gopher servers, within which it indexed approximately 4.9 million unique selectors.\n\nTechnical details\n\nThe conceptualization of knowledge in \"Gopher space\" or a \"cloud\" as specific information in a particular file, and the prominence of the FTP, influenced the technology and the resulting functionality of Gopher.\n\nGopher characteristics \n\nGopher is designed to function and to appear much like a mountable read-only global network file system (and software, such as gopherfs, is available that can actually mount a Gopher server as a FUSE resource).  At a minimum, whatever a person can do with data files on a CD-ROM, one can do on Gopher.\n\nA Gopher system consists of a series of hierarchical hyperlinkable menus. The choice of menu items and titles is controlled by the administrator of the server.\n\nSimilar to a file on a Web server, a file on a Gopher server can be linked to as a menu item from any other Gopher server. Many servers take advantage of this inter-server linking to provide a directory of other servers that the user can access.\n\nProtocol\n\nThe Gopher protocol was first described in RFC 1436. IANA has assigned TCP port 70 to the Gopher protocol.\n\nThe protocol is simple to negotiate, making it possible to browse without using a client. A standard gopher session may therefore appear as follows:\n\n/Reference\n1CIA World Factbook     /Archives/mirrors/textfiles.com/politics/CIA    gopher.quux.org 70\n0Jargon 4.2.0   /Reference/Jargon 4.2.0 gopher.quux.org 70      +\n1Online Libraries       /Reference/Online Libraries     gopher.quux.org 70     +\n1RFCs: Internet Standards       /Computers/Standards and Specs/RFC      gopher.quux.org 70\n1U.S. Gazetteer /Reference/U.S. Gazetteer       gopher.quux.org 70      +\niThis file contains information on United States        fake    (NULL)  0\nicities, counties, and geographical areas.  It has      fake    (NULL)  0\nilatitude/longitude, population, land and water area,   fake    (NULL)  0\niand ZIP codes. fake    (NULL)  0\ni       fake    (NULL)  0\niTo search for a city, enter the city's name.  To search        fake    (NULL) 0\nifor a county, use the name plus County -- for instance,        fake    (NULL) 0\niDallas County. fake    (NULL)  0\n\nHere, the client has established a TCP connection with the server on port 70, the standard gopher port. The client then sends a string followed by a carriage return followed by a line feed (a \"CR + LF\" sequence). This is the selector, which identifies the document to be retrieved. If the item selector were an empty line, the default directory would be selected. The server then replies with the requested item and closes the connection. According to the protocol, before the connection is closed, the server should send a full-stop (i.e., a period character) on a line by itself. However, as is the case here, not all servers conform to this part of the protocol and the server may close the connection without returning the final full-stop.\n\nIn this example, the item sent back is a gopher menu, a directory consisting of a sequence of lines each of which describes an item that can be retrieved. Most clients will display these as hypertext links, and so allow the user to navigate through gopherspace by following the links.\n\nAll lines in a gopher menu are terminated by \"CR + LF\", and consist of five fields: the item type as the very first character (see below), the display string (i.e., the description text to display), a selector (i.e., a file-system pathname), host name (i.e., the domain name of the server on which the item resides), and port (i.e., the port number used by that server). The item type and display string are joined without a space; the other fields are separated by the tab character.\n\nBecause of the simplicity of the Gopher protocol, tools such as netcat make it possible to download Gopher content easily from the command line:\n echo jacks/jack.exe | nc gopher.example.org 70 > jack.exe\nThe protocol is also supported by cURL as of 7.21.2-DEV.\n\nSource code of a menu\n\nGopher menu items are defined by lines of tab-separated values in a text file. This file is sometimes called a gophermap. As the source code to a gopher menu, a gophermap is roughly analogous to an HTML file for a web page. Each tab-separated line (called a selector line) gives the client software a description of the menu item: what it is, what it's called, and where it leads. The client displays the menu items in the order that they appear in the gophermap.\n\nThe first character in a selector line indicates the item type, which tells the client what kind of file or protocol the menu item points to. This helps the client decide what to do with it. Gopher's item types are a more basic precursor to the media type system used by the Web and email attachments.\n\nThe item type is followed by the user display string (a description or label that represents the item in the menu); the selector (a path or other string for the resource on the server); the hostname (the domain name or IP address of the server), and the network port.\n\nFor example: The following selector line generates a link to the \"/home\" directory at the subdomain gopher.floodgap.com, on port 70. The item type of  indicates that the resource is a Gopher menu. The string \"Floodgap Home\" is what the user  sees in the menu.\n\n 1Floodgap Home\t/home\tgopher.floodgap.com\t70\n\nIn addition to selector lines, a gophermap may contain comment lines. Comment lines are not for code comments; rather, they are lines of text sent to the client to display alongside the menu items, such as for a menu description or welcome message. A comment line contains no tab characters.\n\nItem types\n\nIn a Gopher menu's source code, a one-character code indicates what kind of content the client should expect. This code may either be a digit or a letter of the alphabet; letters are case-sensitive.\n\nThe technical specification for Gopher, RFC 1436, defines 14 item types. A one-character code indicates what kind of content the client should expect. Item type  is an error code for exception handling. Gopher client authors improvised item types  (HTML),  (informational message), and  (sound file) after the publication of RFC 1436.\n\nURL links\n\nHistorically, to create a link to a Web server, \"GET /\" was used as a pseudo-selector to emulate an HTTP GET request. John Goerzen created an addition to the Gopher protocol, commonly referred to as \"URL links\", that allows links to any protocol that supports URLs. For example, to create a link to http://gopher.quux.org/, the item type is , the display string is the title of the link, the item selector is \"URL:http://gopher.quux.org/\", and the domain and port are that of the originating Gopher server (so that clients that do not support URL links will query the server and receive an HTML redirection page).\n\nRelated technology\n\nThe master Gopherspace search engine is Veronica. Veronica offers a keyword search of all the public Internet Gopher server menu titles. A Veronica search produces a menu of Gopher items, each of which is a direct pointer to a Gopher data source. Individual Gopher servers may also use localized search engines specific to their content such as Jughead and Jugtail.\n\nGopherVR is a 3D virtual reality variant of the original Gopher system.\n\nClient software\n\nWeb browsers\n\nBrowsers that do not natively support Gopher can still access servers using one of the available Gopher to HTTP gateways.\n\nGopher support was disabled in Internet Explorer versions 5.x and 6 for Windows in August 2002 by a patch meant to fix a security vulnerability in the browser's Gopher protocol handler to reduce the attack surface which was included in IE6 SP1; however, it can be re-enabled by editing the Windows registry. In Internet Explorer 7, Gopher support was removed on the WinINET level.\n\nGopher browser plug-ins\n\nFor Mozilla Firefox and SeaMonkey, OverbiteFF extends Gopher browsing and supports the current versions of the browsers (Firefox 38 until Firefox 56, and equivalent versions of SeaMonkey). (There is also a version of OverbiteFF available that supports Firefox 3.6 and 4 to 37, and equivalent versions of SeaMonkey.) For the new Firefox Quantum, OverbiteWX was released. It includes support for accessing Gopher servers not on port 70 using a whitelist and for CSO/ph queries, and allows versions of Firefox and SeaMonkey that do not support Gopher natively to access Gopher servers. Plugins are also available for Konqueror, in the past a proxy-based extension for Google Chrome was available but is no longer maintained and does not work with the current releases.\n\nGopher clients for mobile devices\n\nSome have suggested that the bandwidth-sparing simple interface of Gopher would be a good match for mobile phones and personal digital assistants (PDAs), but so far, mobile adaptations of HTML and XML and other simplified content have proven more popular. The PyGopherd server provides a built-in WML front-end to Gopher sites served with it.\n\nThe early 2010s have seen a renewed interest in native Gopher clients for popular smartphones: Overbite, an open source client for Android 1.5+ was released in alpha stage in 2010. PocketGopher was also released in 2010, along with its source code, for several Java ME compatible devices. iGopher was released in 2011 as a proprietary client for iPhone and iPad devices.\n\nOther Gopher clients\n\nGopher popularity was at its height at a time when there were still many equally competing computer architectures and operating systems. As a result, there are several Gopher clients available for Acorn RISC OS, AmigaOS, Atari MiNT, CMS, DOS, classic Mac OS, MVS, NeXT, OS/2 Warp, most UNIX-like operating systems, VMS, Windows 3.x, and Windows 9x. GopherVR was a client designed for 3D visualization, and there is even a Gopher client in MOO. The majority of these clients are hard-coded to work on TCP port 70.\n\nGopher to HTTP gateways\n\nUsers of Web browsers that have incomplete or no support for Gopher can access content on Gopher servers via a server gateway or proxy server that converts Gopher menus into HTML; known proxies are the Floodgap Public Gopher proxy and Gopher Proxy. Similarly, certain server packages such as GN and PyGopherd have built-in Gopher to HTTP interfaces. Squid Proxy software gateways any gopher:// URL to HTTP content, enabling any browser or web agent to access gopher content easily.\n\nServer software\n\nBecause the protocol is trivial to implement in a basic fashion, there are many server packages still available, and some are still maintained.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Gopher (protocol)" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=12794" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The Gopher protocol is a TCP/IP application layer protocol designed for distributing, searching, and retrieving documents over the Internet. The Gopher protocol was strongly oriented towards a menu-document design and presented an alternative to the World Wide Web in its early stages, but ultimately Hypertext Transfer Protocol (HTTP) became the dominant protocol. The Gopher ecosystem is often regarded as the effective predecessor of the World Wide Web.\n\nThe protocol was invented by a team led by Mark P. McCahill at the University of Minnesota.  It offers some features not natively supported by the Web and imposes a much stronger hierarchy on information stored on it. Its text menu interface is well-suited to computing environments that rely heavily on remote text-oriented computer terminals, which were still common at the time of its creation in 1991, and the simplicity of its protocol facilitated a wide variety of client implementations. More recent Gopher revisions and graphical clients added support for multimedia. Gopher was preferred by many network administrators for using fewer network resources than Web services.\n\nGopher's hierarchical structure provided a platform for the first large-scale electronic library connections. Gopher has been described by some enthusiasts as \"faster and more efficient and so much more organised\" than today's Web services. The Gopher protocol is still in use by enthusiasts, and although it has been almost entirely supplanted by the Web, a small population of actively maintained servers remains.\n\nOrigins\n\nGopher system was released in mid-1991 by Mark P. McCahill, Farhad Anklesaria, Paul Lindner, Daniel Torrey, and Bob Alberti of the University of Minnesota in the United States. Its central goals were, as stated in RFC 1436:\n\n* A file-like hierarchical arrangement that would be familiar to users.\n* A simple syntax.\n* A system that can be created quickly and inexpensively.\n* Extending the file system metaphor, such as searches.\n\nGopher combines document hierarchies with collections of services, including WAIS, the Archie and Veronica search engines, and gateways to other information systems such as File Transfer Protocol (FTP) and Usenet.\n\nThe general interest in Campus-Wide Information Systems (CWISs) in higher education at the time, and the ease with which a Gopher server could be set up to create an instant CWIS with links to other sites' online directories and resources were the factors contributing to Gopher's rapid adoption. By 1992, the standard method of locating someone's e-mail address was to find their organization's CCSO nameserver entry in Gopher, and query the nameserver.\n\nThe name was coined by Anklesaria as a play on several meanings of the word \"gopher\". McCahill credits Anklesaria with naming Gopher The University of Minnesota mascot is the gopher, a gofer is an assistant who \"goes for\" things, and a gopher burrows through the ground to reach a desired location.\n\nDecline\n\nThe World Wide Web was in its infancy in 1991, and Gopher services quickly became established. By the late 1990s, Gopher had largely ceased expanding. Several factors contributed to Gopher's stagnation:\n\n* In February 1993, the University of Minnesota announced that it would charge licensing fees for the use of its implementation of the Gopher server. As a consequence of this, some users were concerned that a licensing fee would also be charged for independent implementations. Users were scared away from Gopher technology, to the advantage of the Web, of which CERN disclaimed ownership. In September 2000, the University of Minnesota re-licensed its Gopher software under the GNU General Public License.\n* Gopher client functionality was quickly duplicated by early Web browsers, such as Mosaic, which subsumed the protocol as part of their functions.\n* Gopher has a more rigid structure compared to the free-form HTML of the Web. With Gopher, every document has a defined format and type, and the typical user navigates through a single server-defined menu system to get to a particular document. This can be quite different from the way a typical user might traverse documents on the Web.\n\nGopher remains in active use by its enthusiasts, and there have been attempts to revive the use of Gopher on modern platforms and mobile devices. One such attempt is The Overbite Project, which hosts various browser extensions and modern clients.\n\n, there were approximately 160 gopher servers indexed by Veronica-2, reflecting a slow growth from 2007 when there were fewer than 100, although many are infrequently updated. Within these servers Veronica indexed approximately 2.5 million unique selectors. A handful of new servers are set up every year by hobbyists — over 50 have been set up and added to Floodgap's list since 1999.http://gopher.floodgap.com/1/new  A snapshot of Gopherspace as it was in 2007 was circulated on BitTorrent and is still available. Due to the simplicity of the Gopher protocol, setting up new servers or adding Gopher support to browsers is often done in a tongue-in-cheek manner, principally on April Fools' Day.[gopher://gopher.floodgap.com/1/new]    In November 2014 Veronica indexed 144 gopher servers, reflecting a small drop from 2012, but within these servers Veronica indexed approximately 3 million unique selectors. In March 2016 Veronica indexed 135 gopher servers, within which it indexed approximately 4 million unique selectors. In March 2017 Veronica indexed 133 gopher servers, within which it indexed approximately 4.9 million unique selectors.\n\nTechnical details\n\nThe conceptualization of knowledge in \"Gopher space\" or a \"cloud\" as specific information in a particular file, and the prominence of the FTP, influenced the technology and the resulting functionality of Gopher.\n\nGopher characteristics \n\nGopher is designed to function and to appear much like a mountable read-only global network file system (and software, such as gopherfs, is available that can actually mount a Gopher server as a FUSE resource).  At a minimum, whatever a person can do with data files on a CD-ROM, one can do on Gopher.\n\nA Gopher system consists of a series of hierarchical hyperlinkable menus. The choice of menu items and titles is controlled by the administrator of the server.\n\nSimilar to a file on a Web server, a file on a Gopher server can be linked to as a menu item from any other Gopher server. Many servers take advantage of this inter-server linking to provide a directory of other servers that the user can access.\n\nProtocol\n\nThe Gopher protocol was first described in RFC 1436. IANA has assigned TCP port 70 to the Gopher protocol.\n\nThe protocol is simple to negotiate, making it possible to browse without using a client. A standard gopher session may therefore appear as follows:\n\n/Reference\n1CIA World Factbook     /Archives/mirrors/textfiles.com/politics/CIA    gopher.quux.org 70\n0Jargon 4.2.0   /Reference/Jargon 4.2.0 gopher.quux.org 70      +\n1Online Libraries       /Reference/Online Libraries     gopher.quux.org 70     +\n1RFCs: Internet Standards       /Computers/Standards and Specs/RFC      gopher.quux.org 70\n1U.S. Gazetteer /Reference/U.S. Gazetteer       gopher.quux.org 70      +\niThis file contains information on United States        fake    (NULL)  0\nicities, counties, and geographical areas.  It has      fake    (NULL)  0\nilatitude/longitude, population, land and water area,   fake    (NULL)  0\niand ZIP codes. fake    (NULL)  0\ni       fake    (NULL)  0\niTo search for a city, enter the city's name.  To search        fake    (NULL) 0\nifor a county, use the name plus County -- for instance,        fake    (NULL) 0\niDallas County. fake    (NULL)  0\n\nHere, the client has established a TCP connection with the server on port 70, the standard gopher port. The client then sends a string followed by a carriage return followed by a line feed (a \"CR + LF\" sequence). This is the selector, which identifies the document to be retrieved. If the item selector were an empty line, the default directory would be selected. The server then replies with the requested item and closes the connection. According to the protocol, before the connection is closed, the server should send a full-stop (i.e., a period character) on a line by itself. However, as is the case here, not all servers conform to this part of the protocol and the server may close the connection without returning the final full-stop.\n\nIn this example, the item sent back is a gopher menu, a directory consisting of a sequence of lines each of which describes an item that can be retrieved. Most clients will display these as hypertext links, and so allow the user to navigate through gopherspace by following the links.\n\nAll lines in a gopher menu are terminated by \"CR + LF\", and consist of five fields: the item type as the very first character (see below), the display string (i.e., the description text to display), a selector (i.e., a file-system pathname), host name (i.e., the domain name of the server on which the item resides), and port (i.e., the port number used by that server). The item type and display string are joined without a space; the other fields are separated by the tab character.\n\nBecause of the simplicity of the Gopher protocol, tools such as netcat make it possible to download Gopher content easily from the command line:\n echo jacks/jack.exe | nc gopher.example.org 70 > jack.exe\nThe protocol is also supported by cURL as of 7.21.2-DEV.\n\nSource code of a menu\n\nGopher menu items are defined by lines of tab-separated values in a text file. This file is sometimes called a gophermap. As the source code to a gopher menu, a gophermap is roughly analogous to an HTML file for a web page. Each tab-separated line (called a selector line) gives the client software a description of the menu item: what it is, what it's called, and where it leads. The client displays the menu items in the order that they appear in the gophermap.\n\nThe first character in a selector line indicates the item type, which tells the client what kind of file or protocol the menu item points to. This helps the client decide what to do with it. Gopher's item types are a more basic precursor to the media type system used by the Web and email attachments.\n\nThe item type is followed by the user display string (a description or label that represents the item in the menu); the selector (a path or other string for the resource on the server); the hostname (the domain name or IP address of the server), and the network port.\n\nFor example: The following selector line generates a link to the \"/home\" directory at the subdomain gopher.floodgap.com, on port 70. The item type of  indicates that the resource is a Gopher menu. The string \"Floodgap Home\" is what the user  sees in the menu.\n\n 1Floodgap Home\t/home\tgopher.floodgap.com\t70\n\nIn addition to selector lines, a gophermap may contain comment lines. Comment lines are not for code comments; rather, they are lines of text sent to the client to display alongside the menu items, such as for a menu description or welcome message. A comment line contains no tab characters.\n\nItem types\n\nIn a Gopher menu's source code, a one-character code indicates what kind of content the client should expect. This code may either be a digit or a letter of the alphabet; letters are case-sensitive.\n\nThe technical specification for Gopher, RFC 1436, defines 14 item types. A one-character code indicates what kind of content the client should expect. Item type  is an error code for exception handling. Gopher client authors improvised item types  (HTML),  (informational message), and  (sound file) after the publication of RFC 1436.\n\nURL links\n\nHistorically, to create a link to a Web server, \"GET /\" was used as a pseudo-selector to emulate an HTTP GET request. John Goerzen created an addition to the Gopher protocol, commonly referred to as \"URL links\", that allows links to any protocol that supports URLs. For example, to create a link to http://gopher.quux.org/, the item type is , the display string is the title of the link, the item selector is \"URL:http://gopher.quux.org/\", and the domain and port are that of the originating Gopher server (so that clients that do not support URL links will query the server and receive an HTML redirection page).\n\nRelated technology\n\nThe master Gopherspace search engine is Veronica. Veronica offers a keyword search of all the public Internet Gopher server menu titles. A Veronica search produces a menu of Gopher items, each of which is a direct pointer to a Gopher data source. Individual Gopher servers may also use localized search engines specific to their content such as Jughead and Jugtail.\n\nGopherVR is a 3D virtual reality variant of the original Gopher system.\n\nClient software\n\nWeb browsers\n\nBrowsers that do not natively support Gopher can still access servers using one of the available Gopher to HTTP gateways.\n\nGopher support was disabled in Internet Explorer versions 5.x and 6 for Windows in August 2002 by a patch meant to fix a security vulnerability in the browser's Gopher protocol handler to reduce the attack surface which was included in IE6 SP1; however, it can be re-enabled by editing the Windows registry. In Internet Explorer 7, Gopher support was removed on the WinINET level.\n\nGopher browser plug-ins\n\nFor Mozilla Firefox and SeaMonkey, OverbiteFF extends Gopher browsing and supports the current versions of the browsers (Firefox 38 until Firefox 56, and equivalent versions of SeaMonkey). (There is also a version of OverbiteFF available that supports Firefox 3.6 and 4 to 37, and equivalent versions of SeaMonkey.) For the new Firefox Quantum, OverbiteWX was released. It includes support for accessing Gopher servers not on port 70 using a whitelist and for CSO/ph queries, and allows versions of Firefox and SeaMonkey that do not support Gopher natively to access Gopher servers. Plugins are also available for Konqueror, in the past a proxy-based extension for Google Chrome was available but is no longer maintained and does not work with the current releases.\n\nGopher clients for mobile devices\n\nSome have suggested that the bandwidth-sparing simple interface of Gopher would be a good match for mobile phones and personal digital assistants (PDAs), but so far, mobile adaptations of HTML and XML and other simplified content have proven more popular. The PyGopherd server provides a built-in WML front-end to Gopher sites served with it.\n\nThe early 2010s have seen a renewed interest in native Gopher clients for popular smartphones: Overbite, an open source client for Android 1.5+ was released in alpha stage in 2010. PocketGopher was also released in 2010, along with its source code, for several Java ME compatible devices. iGopher was released in 2011 as a proprietary client for iPhone and iPad devices.\n\nOther Gopher clients\n\nGopher popularity was at its height at a time when there were still many equally competing computer architectures and operating systems. As a result, there are several Gopher clients available for Acorn RISC OS, AmigaOS, Atari MiNT, CMS, DOS, classic Mac OS, MVS, NeXT, OS/2 Warp, most UNIX-like operating systems, VMS, Windows 3.x, and Windows 9x. GopherVR was a client designed for 3D visualization, and there is even a Gopher client in MOO. The majority of these clients are hard-coded to work on TCP port 70.\n\nGopher to HTTP gateways\n\nUsers of Web browsers that have incomplete or no support for Gopher can access content on Gopher servers via a server gateway or proxy server that converts Gopher menus into HTML; known proxies are the Floodgap Public Gopher proxy and Gopher Proxy. Similarly, certain server packages such as GN and PyGopherd have built-in Gopher to HTTP interfaces. Squid Proxy software gateways any gopher:// URL to HTTP content, enabling any browser or web agent to access gopher content easily.\n\nServer software\n\nBecause the protocol is trivial to implement in a basic fashion, there are many server packages still available, and some are still maintained. Gopher (protocol). http://en.wikipedia.org/?curid=12794."
  }
}
