{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=15145",
  "eid" : "1a33aa50-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778553205,
  "textBody" : "ISO 9660 is a file system for optical disc media.\n\nBeing published by the International Organization for Standardization (ISO) the file system is considered an international technical standard.\n\nSince the specification is available for anybody to purchase, implementations have been written for many operating systems.\n\nHistory\n\nISO 9660 traces its roots to the High Sierra Format file system. High Sierra arranged file information in a dense, sequential layout to minimize nonsequential access by using a hierarchical (eight levels of directories deep) tree file system arrangement, similar to UNIX and FAT. To facilitate cross platform compatibility, it defined a minimal set of common file attributes (directory or ordinary file and time of recording) and name attributes (name, extension, and version), and used a separate system use area where future optional extensions for each file may be specified.\n\nHigh Sierra was adopted in December 1986 (with changes) as an international standard by Ecma International as ECMA-119 and submitted for fast tracking to the ISO, where it was eventually accepted as ISO 9660:1988.\n\nIn 2013, ISO published Amendment 1 to the ISO 9660 standard, introducing new data structures and relaxed file name rules intended to \"bring harmonization between ISO 9660 and widely used 'Joliet Specification'.\"ISO 9660, Amendment 1 (ISO 9660:1988/Amd.1:2013(E))\n\nSpecifications \n\nOverall structure\n\nThe following is the rough overall structure of the ISO 9660 file system:\n\nThe System Area, the first 32,768 data bytes of the disk (16 sectors of 2,048 bytes each), is unused by ISO 9660 and therefore available for other uses. For example, a CD-ROM may contain an alternative file system descriptor in this area, as it is often used by hybrid CDs to offer classic Mac OS-specific and macOS-specific content.\n\nAll multi-byte values are stored twice, in little-endian and big-endian format, either one-after-another in what the specification calls \"both-byte orders\", or in duplicated data structures such as the path table. As the structures have been designed with unaligned members, this \"both endian\" encoding does however not help implementors as the data structures need to be read byte-wise to convert them to properly aligned data.\n\nVolume descriptor set \n\nThe data area begins with a set of one or more volume descriptors, terminated with a volume descriptor set terminator. Collectively the volume descriptor set acts as a header for the data area, describing its content (similar to the BIOS parameter block used by FAT, HPFS and NTFS formatted disks).\n\nThe volume descriptor set terminator is simply a particular type of volume descriptor with the purpose of marking the end of this set of structures.\n\nVolume descriptor\n\nEach volume descriptor is 2048 bytes in size, fitting perfectly into a single Mode 1 or Mode 2 Form 1 sector. They have the following structure:\n\nThe data field of a volume descriptor may be subdivided into several fields, with the exact content depending on the type.\n\nStandard volume descriptor types are the following:\n\nAn ISO 9660 compliant disk contains at least one Primary Volume Descriptor describing the  file system and a Volume Descriptor Set Terminator for indicating the end of the descriptor sequence.\n\nThe Primary Volume Descriptor provides information about the volume, characteristics and metadata, including a root directory record that indicates in which sector the root directory is located. Other fields contain the description or name of the volume, and information about who created it and with which application. The size of the logical blocks which the file system uses to segment the volume is also stored in a field inside the primary volume descriptor, as well as the amount of space occupied by the volume (measured in number of logical blocks).\n\nIn addition to the Primary Volume Descriptor(s), Supplementary Volume Descriptors or Enhanced Volume Descriptors may be present.\n\nSupplementary Volume Descriptors describe the same volume as the Primary Volume Descriptor does, and are normally used for providing additional code page support when the standard code tables are insufficient. The standard specifies that ISO 2022 is used for managing code sets that are wider than 8 bytes, and that ISO 2375 escape sequences are used to identify each particular code page used. Consequently, ISO 9660 supports international single-byte and multi-byte character sets, provided they fit into the framework of the referenced standards. However, ISO 9660 does not specify any code pages that are guaranteed to be supported: all use of code tables other than those defined in the standard itself are subject to agreement between the originator and the recipient of the volume.\n\nEnhanced Volume Descriptors were introduced in ISO 9660, Amendment 1.  They relax some of the requirements of the other volume descriptors and the directory records referenced by them: for example, the directory depth can exceed eight, file identifiers need not contain '.' or file version number, the length of a file and directory identifier is maximized to 207.\n\nRedundant copies of each volume descriptor can also be included in case the first copy of the descriptor becomes corrupt.\n\nDirectories and files\n\nDirectory entries are stored following the location of the root directory entry, where evaluation of filenames is begun. Both directories and files are stored as extents, which are sequential series of sectors.\n\nFiles and directories are differentiated only by a file attribute that indicates its nature (similar to Unix). The attributes of a file are stored in the directory entry that describes the file, and optionally in the extended attribute record.\n\nTo locate a file, the directory names in the file's path can be checked sequentially, going to the location of each directory to obtain the location of the subsequent subdirectory. However, a file can also be located through the path table provided by the file system. This path table stores information about each directory, its parent and its location on disk. Since the path table is stored in a contiguous region, it can be searched much faster than jumping to the particular locations of each directory in the file's path, thus reducing seek time.\n\nThe standard specifies three nested levels of interchange (paraphrased from section 10):\n* Level 1: File names are limited to eight characters with a three-character extension. Directory names are limited to eight characters.  Files may contain one single file section.\n* Level 2: Files may contain one single file section.\n* Level 3: No additional restrictions than those stipulated in the main body of the standard. That is,  directory identifiers may not exceed 31 characters in length, and file name + '.' + file name extension may not exceed 30 characters in length (sections 7.5 and 7.6). Files are also allowed to consist of multiple non-contiguous sections (with some restrictions as to order).\n\nAdditional restrictions in the body of the standard: The depth of the directory hierarchy must not exceed 8 (root directory being at level 1), and the path length of any file must not exceed 255. (section 6.8.2.1).\n\nThe standard also specifies the following name restrictions (sections 7.5 and 7.6):\n\n* All levels restrict file names in the mandatory file hierarchy to upper case letters, digits, underscores (\"_\"), and a dot. (see also section 7.4.4 and Annex A), \n* If no characters are specified for the File Name then the File Name Extension shall consist of at least one character.  \n* If no characters are specified for the File Name Extension then the File Name shall consist of at least one character.\n* File names shall not have more than one dot. \n* Directory names shall not use dots at all.\n\nSome CD authoring applications allow the user to use almost any character. While, strictly speaking, this does not conform to the ISO 9660 standard, most operating systems which can read ISO 9660 file systems have no problem with out-of-spec names. However, the names could appear wrong to the user.\n\nPath tables\n\nPath tables summarize the directory structure of the relevant directory hierarchy, providing only the directory identifier, the location of the extent in which the directory is recorded, the length of any extended attributes associated with the directory, and the index of its parent directory path table entry.\n\nLimitations\n\nDirectory depth limit\n\nThe restrictions on filename length (8 characters plus 3 character extension for interchange level 1) and directory depth (8 levels, including the root directoryISO 9660, section 6.8.2.1) are a more serious limitation of the ISO 9660 file system.\n\nThe Rock Ridge extension works around the eight-directory depth limit by folding paths. In practice, however, few drivers and OSes care about the directory depth, so this rule is often ignored.\n\nIn addition to the restrictions mentioned above, a CD-ROM producer may choose one of the lower Levels of Interchange specified in chapter 10 of the standard, and further restrict file name length from 30 characters to only 8+3 in file identifiers, and 8 in directory identifiers in order to promote interchangeability with implementations that do not implement the full standard. (This is sometimes mistakenly interpreted as a restriction in the ISO 9660 standard itself.)\n\nThe 2/4 GiB file size limit\n\nAll numbers in ISO 9660 file systems except the single byte value used for the GMT offset are unsigned numbers. As the length of a file's extent on disk is stored in a 32 bit value,ISO 9660 section 9.1.4 it allows for a maximum length of just over 4.2 GB (more precisely, one byte less than 4 GiB). (Note: Some older operating systems may handle such values incorrectly (i.e., signed instead of unsigned), which would make it impossible to access files larger than 2 GB in size. The latter holds true also for operating systems without large file support.)\n\nBased on this, it is often assumed that a file on an ISO 9660 formatted disc cannot be larger than 232-1 in size, as the file's size is stored in an unsigned 32 bit value, for which 232-1 is the maximum.\n\nIt is, however, possible to circumvent this limitation by using the multi-extent (fragmentation) feature of ISO 9660 Level 3 to create ISO 9660 filesystems and single files up to 8 TB. With this, files larger than 4 GB can be split up into multiple extents (sequential series of sectors), each not exceeding the 4 GB limit.\nFor example, the free software such as InfraRecorder, ImgBurn and mkisofs as well as Roxio Toast are able to create ISO 9660 filesystems that use multi-extent files to store files larger than 4 GB on appropriate media such as recordable DVDs.\n\nEmpirical tests with a 4.2 GB fragmented file on a DVD media have shown that Microsoft Windows XP supports this, while Mac OS X (as of 10.4.8) does not handle this case properly. In the case of Mac OS X, the driver appears not to support file fragmentation at all (i.e. it only supports ISO 9660 Level 2 but not Level 3). Linux supports multiple extents.[http://lists.freebsd.org/pipermail/freebsd-bugs/2006-April/017786.html kern/95222: File sections on ISO9660  level 3 CDs ignored]  FreeBSD only shows and reads the last extent of a multi-extent file.\n\nLimit on number of directories\n\nAnother limitation, less well known, is the number of directories. The ISO image has a structure called \"path table\". For each directory in the image, the path table provides the number of its parent directory entry. The problem is that the parent directory number is a 16-bit number, limiting its range from 1 to 65,535.ISO9660 sections 6.9 and 9.4.4 The content of each directory is written also in a different place, making the path table redundant, and suitable only for fast searching.\n\nSome operating systems (e.g., Windows) use the path table, while others (e.g., Linux) do not. If an ISO image or disk consists of more than 65,535 directories, it will be readable in Linux, while in early Windows versions all files from the additional directories will be visible, but show up as empty (zero length). Current Windows versions appear to handle this correctly.\n\nSome software tools can have problems managing the path table if the directory limit is exceeded. A popular application using ISO format, mkisofs, aborts if there is a path table overflow. Nero Burning ROM (for Windows) and Pinnacle Instant CD/DVD do not check whether the problem occurs, and will produce an invalid ISO file or disk without warning. The tool isovfy cannot easily report this problem.\n\nExtensions and improvements\n\nThere are several extensions to ISO 9660 that relax some of its limitations. \n* Rock Ridge supports the preservation of POSIX (Unix-style) permissions and longer names.\n* Joliet supports Unicode names stored in UCS-2, thus allowing almost any character to be used, even from non-Latin scripts.\n* El Torito enables CDs to be bootable on PCs.\n* Apple ISO 9660 Extensions adds support for classic Mac OS-specific and macOS-specific file characteristics such as resource forks, file backup date and more.\n\nFor operating systems which do not support any extensions, a name translation file TRANS.TBL must be used. It should be located in every directory, including the root directory. This is now obsolete, since few such operating systems are in use today.\n\nThe ISO 13490 standard is an extension to the ISO 9660 format that adds support for multiple sessions on a disc. Since ISO 9660 is by design a read-only, pre-mastered file system, all the data has to be written in one go or \"session\" to the medium. Once written, there is no provision for altering the stored content. ISO 13490 was created to allow adding more files to a writeable disc such as CD-R in multiple sessions.\n\nThe ISO 13346/ECMA-167[http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-167.pdf ECMA-167 - Volume and File Structure for Write-Once and Rewritable Media using Non-Sequential Recording for Information Interchange] standard was designed in conjunction to the ISO 13490 standard to address most of the shortcomings of ISO 9660,[http://www.standards.com/StandardsDownloads/birth.html Birth Announcement: ISO/IEC 13346 and ISO/IEC 13490] and a subset of it evolved into the UDF format, which was  adopted for DVDs.\n\nJIS X 0606:1998, also known as ISO 9660:1999, is a Japanese Industrial Standard draft created by the Japanese National Body (JTC1 N4222) in order to make some improvements and remove some limitations from the original ISO 9660 standard.[http://www.pismotechnic.com/cfs/iso9660-1999.html JIS X 0606:1998 / ISO 9660:1999 Draft Specification] This draft was submitted in 1998, but it has not been ratified as an ISO standard yet. Some of its changes includes the removal of some restrictions imposed by the original standard by extending the maximum file name length to 207 characters, removing the eight-level maximum directory nesting limit, and removing the special meaning of the dot character in filenames. Some operating systems allow these relaxations as well when reading optical discs. Several disc authoring tools (such as Nero Burning ROM, mkisofs and ImgBurn) support a so-called \"ISO 9660:1999\" mode (sometimes called \"ISO 9660 v2\" or \"ISO 9660 Level 4\" mode) that removes restrictions following the guidelines in the ISO 9660:1999 draft.\n\nDisc images\n\nISO 9660 file system images (ISO images) are a common way to electronically transfer the contents of CD-ROMs. They often have the filename extension .iso (.iso9660 is less common, but also in use) and are commonly referred to as \"ISOs\".\n\nOperating system support\n\nMost operating systems support reading of ISO 9660 formatted discs, and most new versions support the extensions such as Rock Ridge and Joliet. Operating systems that do not support the extensions usually show the basic (non-extended) features of a plain ISO 9660 disc.\n\nOperating systems that support ISO 9660 and its extensions include the following:\n* DOS: access with extensions, such as MSCDEX.EXE (Microsoft CDROM Extension), NWCDEX.EXE or CORELCDX.EXE\n* Microsoft Windows 95, Windows 98, Windows ME: can read ISO 9660 Level 1, 2, 3, and Joliet\n* Microsoft Windows NT 4.0, Windows 2000, Windows XP, and newer Windows versions, can read ISO 9660 Level 1, 2, 3, Joliet, and ISO 9660:1999. Windows 7 may also mistake UDF format for CDFS. for more information see UDF.\n* Linux and BSD: ISO 9660 Level 1, 2, 3, Joliet, Rock Ridge, and ISO 9660:1999\n* Apple GS/OS: ISO Level 1 and 2 support via the HS.FST File System Translator.\n* Classic Mac OS 7 to 9: ISO Level 1, 2. Optional free software supports Rock Ridge and Joliet (including ISO Level 3): [http://www.alex-castro.com/jokeridge/ Joke Ridge] and [http://www.tempel.org/joliet/ Joliet Volume Access].\n* macOS (all versions): ISO Level 1, 2, Joliet and Rock Ridge Extensions. Level 3 is not currently supported, although users have been able to mount these disks\n* AmigaOS supports the \"AS\" extensions (which preserve the Amiga protection bits and file comments)\n* QNX\n* ULTRIX\n* OS/2 and eComStation\n* BeOS, Zeta and Haiku\n* OpenVMS supports only ISO 9660 Interchange levels 1-3, with no extensions\n* RISC OS support for optical media written on a PC is patchy. Most CD-Rs/RWs work perfectly, however DVD+-Rs/RWs/RAMs are entirely hit and miss running RISC OS 4.02, RISC OS 4.39 and RISC OS 6.20",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "ISO 9660" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=15145" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "ISO 9660 is a file system for optical disc media.\n\nBeing published by the International Organization for Standardization (ISO) the file system is considered an international technical standard.\n\nSince the specification is available for anybody to purchase, implementations have been written for many operating systems.\n\nHistory\n\nISO 9660 traces its roots to the High Sierra Format file system. High Sierra arranged file information in a dense, sequential layout to minimize nonsequential access by using a hierarchical (eight levels of directories deep) tree file system arrangement, similar to UNIX and FAT. To facilitate cross platform compatibility, it defined a minimal set of common file attributes (directory or ordinary file and time of recording) and name attributes (name, extension, and version), and used a separate system use area where future optional extensions for each file may be specified.\n\nHigh Sierra was adopted in December 1986 (with changes) as an international standard by Ecma International as ECMA-119 and submitted for fast tracking to the ISO, where it was eventually accepted as ISO 9660:1988.\n\nIn 2013, ISO published Amendment 1 to the ISO 9660 standard, introducing new data structures and relaxed file name rules intended to \"bring harmonization between ISO 9660 and widely used 'Joliet Specification'.\"ISO 9660, Amendment 1 (ISO 9660:1988/Amd.1:2013(E))\n\nSpecifications \n\nOverall structure\n\nThe following is the rough overall structure of the ISO 9660 file system:\n\nThe System Area, the first 32,768 data bytes of the disk (16 sectors of 2,048 bytes each), is unused by ISO 9660 and therefore available for other uses. For example, a CD-ROM may contain an alternative file system descriptor in this area, as it is often used by hybrid CDs to offer classic Mac OS-specific and macOS-specific content.\n\nAll multi-byte values are stored twice, in little-endian and big-endian format, either one-after-another in what the specification calls \"both-byte orders\", or in duplicated data structures such as the path table. As the structures have been designed with unaligned members, this \"both endian\" encoding does however not help implementors as the data structures need to be read byte-wise to convert them to properly aligned data.\n\nVolume descriptor set \n\nThe data area begins with a set of one or more volume descriptors, terminated with a volume descriptor set terminator. Collectively the volume descriptor set acts as a header for the data area, describing its content (similar to the BIOS parameter block used by FAT, HPFS and NTFS formatted disks).\n\nThe volume descriptor set terminator is simply a particular type of volume descriptor with the purpose of marking the end of this set of structures.\n\nVolume descriptor\n\nEach volume descriptor is 2048 bytes in size, fitting perfectly into a single Mode 1 or Mode 2 Form 1 sector. They have the following structure:\n\nThe data field of a volume descriptor may be subdivided into several fields, with the exact content depending on the type.\n\nStandard volume descriptor types are the following:\n\nAn ISO 9660 compliant disk contains at least one Primary Volume Descriptor describing the  file system and a Volume Descriptor Set Terminator for indicating the end of the descriptor sequence.\n\nThe Primary Volume Descriptor provides information about the volume, characteristics and metadata, including a root directory record that indicates in which sector the root directory is located. Other fields contain the description or name of the volume, and information about who created it and with which application. The size of the logical blocks which the file system uses to segment the volume is also stored in a field inside the primary volume descriptor, as well as the amount of space occupied by the volume (measured in number of logical blocks).\n\nIn addition to the Primary Volume Descriptor(s), Supplementary Volume Descriptors or Enhanced Volume Descriptors may be present.\n\nSupplementary Volume Descriptors describe the same volume as the Primary Volume Descriptor does, and are normally used for providing additional code page support when the standard code tables are insufficient. The standard specifies that ISO 2022 is used for managing code sets that are wider than 8 bytes, and that ISO 2375 escape sequences are used to identify each particular code page used. Consequently, ISO 9660 supports international single-byte and multi-byte character sets, provided they fit into the framework of the referenced standards. However, ISO 9660 does not specify any code pages that are guaranteed to be supported: all use of code tables other than those defined in the standard itself are subject to agreement between the originator and the recipient of the volume.\n\nEnhanced Volume Descriptors were introduced in ISO 9660, Amendment 1.  They relax some of the requirements of the other volume descriptors and the directory records referenced by them: for example, the directory depth can exceed eight, file identifiers need not contain '.' or file version number, the length of a file and directory identifier is maximized to 207.\n\nRedundant copies of each volume descriptor can also be included in case the first copy of the descriptor becomes corrupt.\n\nDirectories and files\n\nDirectory entries are stored following the location of the root directory entry, where evaluation of filenames is begun. Both directories and files are stored as extents, which are sequential series of sectors.\n\nFiles and directories are differentiated only by a file attribute that indicates its nature (similar to Unix). The attributes of a file are stored in the directory entry that describes the file, and optionally in the extended attribute record.\n\nTo locate a file, the directory names in the file's path can be checked sequentially, going to the location of each directory to obtain the location of the subsequent subdirectory. However, a file can also be located through the path table provided by the file system. This path table stores information about each directory, its parent and its location on disk. Since the path table is stored in a contiguous region, it can be searched much faster than jumping to the particular locations of each directory in the file's path, thus reducing seek time.\n\nThe standard specifies three nested levels of interchange (paraphrased from section 10):\n* Level 1: File names are limited to eight characters with a three-character extension. Directory names are limited to eight characters.  Files may contain one single file section.\n* Level 2: Files may contain one single file section.\n* Level 3: No additional restrictions than those stipulated in the main body of the standard. That is,  directory identifiers may not exceed 31 characters in length, and file name + '.' + file name extension may not exceed 30 characters in length (sections 7.5 and 7.6). Files are also allowed to consist of multiple non-contiguous sections (with some restrictions as to order).\n\nAdditional restrictions in the body of the standard: The depth of the directory hierarchy must not exceed 8 (root directory being at level 1), and the path length of any file must not exceed 255. (section 6.8.2.1).\n\nThe standard also specifies the following name restrictions (sections 7.5 and 7.6):\n\n* All levels restrict file names in the mandatory file hierarchy to upper case letters, digits, underscores (\"_\"), and a dot. (see also section 7.4.4 and Annex A), \n* If no characters are specified for the File Name then the File Name Extension shall consist of at least one character.  \n* If no characters are specified for the File Name Extension then the File Name shall consist of at least one character.\n* File names shall not have more than one dot. \n* Directory names shall not use dots at all.\n\nSome CD authoring applications allow the user to use almost any character. While, strictly speaking, this does not conform to the ISO 9660 standard, most operating systems which can read ISO 9660 file systems have no problem with out-of-spec names. However, the names could appear wrong to the user.\n\nPath tables\n\nPath tables summarize the directory structure of the relevant directory hierarchy, providing only the directory identifier, the location of the extent in which the directory is recorded, the length of any extended attributes associated with the directory, and the index of its parent directory path table entry.\n\nLimitations\n\nDirectory depth limit\n\nThe restrictions on filename length (8 characters plus 3 character extension for interchange level 1) and directory depth (8 levels, including the root directoryISO 9660, section 6.8.2.1) are a more serious limitation of the ISO 9660 file system.\n\nThe Rock Ridge extension works around the eight-directory depth limit by folding paths. In practice, however, few drivers and OSes care about the directory depth, so this rule is often ignored.\n\nIn addition to the restrictions mentioned above, a CD-ROM producer may choose one of the lower Levels of Interchange specified in chapter 10 of the standard, and further restrict file name length from 30 characters to only 8+3 in file identifiers, and 8 in directory identifiers in order to promote interchangeability with implementations that do not implement the full standard. (This is sometimes mistakenly interpreted as a restriction in the ISO 9660 standard itself.)\n\nThe 2/4 GiB file size limit\n\nAll numbers in ISO 9660 file systems except the single byte value used for the GMT offset are unsigned numbers. As the length of a file's extent on disk is stored in a 32 bit value,ISO 9660 section 9.1.4 it allows for a maximum length of just over 4.2 GB (more precisely, one byte less than 4 GiB). (Note: Some older operating systems may handle such values incorrectly (i.e., signed instead of unsigned), which would make it impossible to access files larger than 2 GB in size. The latter holds true also for operating systems without large file support.)\n\nBased on this, it is often assumed that a file on an ISO 9660 formatted disc cannot be larger than 232-1 in size, as the file's size is stored in an unsigned 32 bit value, for which 232-1 is the maximum.\n\nIt is, however, possible to circumvent this limitation by using the multi-extent (fragmentation) feature of ISO 9660 Level 3 to create ISO 9660 filesystems and single files up to 8 TB. With this, files larger than 4 GB can be split up into multiple extents (sequential series of sectors), each not exceeding the 4 GB limit.\nFor example, the free software such as InfraRecorder, ImgBurn and mkisofs as well as Roxio Toast are able to create ISO 9660 filesystems that use multi-extent files to store files larger than 4 GB on appropriate media such as recordable DVDs.\n\nEmpirical tests with a 4.2 GB fragmented file on a DVD media have shown that Microsoft Windows XP supports this, while Mac OS X (as of 10.4.8) does not handle this case properly. In the case of Mac OS X, the driver appears not to support file fragmentation at all (i.e. it only supports ISO 9660 Level 2 but not Level 3). Linux supports multiple extents.[http://lists.freebsd.org/pipermail/freebsd-bugs/2006-April/017786.html kern/95222: File sections on ISO9660  level 3 CDs ignored]  FreeBSD only shows and reads the last extent of a multi-extent file.\n\nLimit on number of directories\n\nAnother limitation, less well known, is the number of directories. The ISO image has a structure called \"path table\". For each directory in the image, the path table provides the number of its parent directory entry. The problem is that the parent directory number is a 16-bit number, limiting its range from 1 to 65,535.ISO9660 sections 6.9 and 9.4.4 The content of each directory is written also in a different place, making the path table redundant, and suitable only for fast searching.\n\nSome operating systems (e.g., Windows) use the path table, while others (e.g., Linux) do not. If an ISO image or disk consists of more than 65,535 directories, it will be readable in Linux, while in early Windows versions all files from the additional directories will be visible, but show up as empty (zero length). Current Windows versions appear to handle this correctly.\n\nSome software tools can have problems managing the path table if the directory limit is exceeded. A popular application using ISO format, mkisofs, aborts if there is a path table overflow. Nero Burning ROM (for Windows) and Pinnacle Instant CD/DVD do not check whether the problem occurs, and will produce an invalid ISO file or disk without warning. The tool isovfy cannot easily report this problem.\n\nExtensions and improvements\n\nThere are several extensions to ISO 9660 that relax some of its limitations. \n* Rock Ridge supports the preservation of POSIX (Unix-style) permissions and longer names.\n* Joliet supports Unicode names stored in UCS-2, thus allowing almost any character to be used, even from non-Latin scripts.\n* El Torito enables CDs to be bootable on PCs.\n* Apple ISO 9660 Extensions adds support for classic Mac OS-specific and macOS-specific file characteristics such as resource forks, file backup date and more.\n\nFor operating systems which do not support any extensions, a name translation file TRANS.TBL must be used. It should be located in every directory, including the root directory. This is now obsolete, since few such operating systems are in use today.\n\nThe ISO 13490 standard is an extension to the ISO 9660 format that adds support for multiple sessions on a disc. Since ISO 9660 is by design a read-only, pre-mastered file system, all the data has to be written in one go or \"session\" to the medium. Once written, there is no provision for altering the stored content. ISO 13490 was created to allow adding more files to a writeable disc such as CD-R in multiple sessions.\n\nThe ISO 13346/ECMA-167[http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-167.pdf ECMA-167 - Volume and File Structure for Write-Once and Rewritable Media using Non-Sequential Recording for Information Interchange] standard was designed in conjunction to the ISO 13490 standard to address most of the shortcomings of ISO 9660,[http://www.standards.com/StandardsDownloads/birth.html Birth Announcement: ISO/IEC 13346 and ISO/IEC 13490] and a subset of it evolved into the UDF format, which was  adopted for DVDs.\n\nJIS X 0606:1998, also known as ISO 9660:1999, is a Japanese Industrial Standard draft created by the Japanese National Body (JTC1 N4222) in order to make some improvements and remove some limitations from the original ISO 9660 standard.[http://www.pismotechnic.com/cfs/iso9660-1999.html JIS X 0606:1998 / ISO 9660:1999 Draft Specification] This draft was submitted in 1998, but it has not been ratified as an ISO standard yet. Some of its changes includes the removal of some restrictions imposed by the original standard by extending the maximum file name length to 207 characters, removing the eight-level maximum directory nesting limit, and removing the special meaning of the dot character in filenames. Some operating systems allow these relaxations as well when reading optical discs. Several disc authoring tools (such as Nero Burning ROM, mkisofs and ImgBurn) support a so-called \"ISO 9660:1999\" mode (sometimes called \"ISO 9660 v2\" or \"ISO 9660 Level 4\" mode) that removes restrictions following the guidelines in the ISO 9660:1999 draft.\n\nDisc images\n\nISO 9660 file system images (ISO images) are a common way to electronically transfer the contents of CD-ROMs. They often have the filename extension .iso (.iso9660 is less common, but also in use) and are commonly referred to as \"ISOs\".\n\nOperating system support\n\nMost operating systems support reading of ISO 9660 formatted discs, and most new versions support the extensions such as Rock Ridge and Joliet. Operating systems that do not support the extensions usually show the basic (non-extended) features of a plain ISO 9660 disc.\n\nOperating systems that support ISO 9660 and its extensions include the following:\n* DOS: access with extensions, such as MSCDEX.EXE (Microsoft CDROM Extension), NWCDEX.EXE or CORELCDX.EXE\n* Microsoft Windows 95, Windows 98, Windows ME: can read ISO 9660 Level 1, 2, 3, and Joliet\n* Microsoft Windows NT 4.0, Windows 2000, Windows XP, and newer Windows versions, can read ISO 9660 Level 1, 2, 3, Joliet, and ISO 9660:1999. Windows 7 may also mistake UDF format for CDFS. for more information see UDF.\n* Linux and BSD: ISO 9660 Level 1, 2, 3, Joliet, Rock Ridge, and ISO 9660:1999\n* Apple GS/OS: ISO Level 1 and 2 support via the HS.FST File System Translator.\n* Classic Mac OS 7 to 9: ISO Level 1, 2. Optional free software supports Rock Ridge and Joliet (including ISO Level 3): [http://www.alex-castro.com/jokeridge/ Joke Ridge] and [http://www.tempel.org/joliet/ Joliet Volume Access].\n* macOS (all versions): ISO Level 1, 2, Joliet and Rock Ridge Extensions. Level 3 is not currently supported, although users have been able to mount these disks\n* AmigaOS supports the \"AS\" extensions (which preserve the Amiga protection bits and file comments)\n* QNX\n* ULTRIX\n* OS/2 and eComStation\n* BeOS, Zeta and Haiku\n* OpenVMS supports only ISO 9660 Interchange levels 1-3, with no extensions\n* RISC OS support for optical media written on a PC is patchy. Most CD-Rs/RWs work perfectly, however DVD+-Rs/RWs/RAMs are entirely hit and miss running RISC OS 4.02, RISC OS 4.39 and RISC OS 6.20. ISO 9660. http://en.wikipedia.org/?curid=15145."
  }
}
