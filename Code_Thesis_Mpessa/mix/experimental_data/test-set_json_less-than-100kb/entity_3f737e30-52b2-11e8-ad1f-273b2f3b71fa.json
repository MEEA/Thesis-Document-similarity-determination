{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=20039",
  "eid" : "3f737e30-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778615699,
  "textBody" : "In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945. A detailed description and analysis of bottom-up mergesort appeared in a report by Goldstine and von Neumann as early as 1948.\n\nAlgorithm\n\nConceptually, a merge sort works as follows:\n#Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).\n#Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining.  This will be the sorted list.\n\nTop-down implementation \n\nExample C-like code using indices for top down merge sort algorithm that recursively splits the list (called runs in this example) into sublists until sublist size is 1, then merges those sublists to produce a sorted list. The copy back step is avoided with alternating the direction of the merge with each level of recursion.\n\n// Array A[] has the items to sort; array B[] is a work array.\nTopDownMergeSort(A[], B[], n)\n{\n    CopyArray(A, 0, n, B);           // duplicate array A[] into B[]\n    TopDownSplitMerge(B, 0, n, A);   // sort data from B[] into A[]\n}\n\n// Sort the given run of array A[] using array B[] as a source.\n// iBegin is inclusive; iEnd is exclusive (A[iEnd] is not in the set).\nTopDownSplitMerge(B[], iBegin, iEnd, A[])\n{\n    if(iEnd - iBegin iEnd || A[i] \n\nBottom-up implementation\n\nExample C-like code using indices for bottom up merge sort algorithm which treats the list as an array of n sublists (called runs in this example) of size 1, and iteratively merges sub-lists back and forth between two buffers:\n\n// array A[] has the items to sort; array B[] is a work array\nvoid BottomUpMergeSort(A[], B[], n)\n{\n    // Each 1-element run in A is already \"sorted\".\n    // Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted.\n    for (width 1; width = n) )\n            BottomUpMerge(A, i, min(i+width, n), min(i+2*width, n), B);\n        }\n        // Now work array B is full of runs of length 2*width.\n        // Copy array B to array A for next iteration.\n        // A more efficient implementation would swap the roles of A and B.\n        CopyArray(B, A, n);\n        // Now array A is full of runs of length 2*width.\n    }\n}\n\n//  Left run is A[iLeft :iRight-1].\n// Right run is A[iRight:iEnd-1  ].\nvoid BottomUpMerge(A[], iLeft, iRight, iEnd, B[])\n{\n    i iLeft, j \n iRight;\n    // While there are elements in the left or right runs...\n    for (k = iLeft; k iEnd || A[i] \n\nTop-down implementation using lists \n\nPseudocode for top down merge sort algorithm which recursively divides the input list into smaller sublists until the sublists are trivially sorted, and then merges the sublists while returning up the call chain.\n\n function merge_sort(list m)\n     // Base case. A list of zero or one elements is sorted, by definition.\n     if length of m ≤ 1 then\n         return m\n \n     // Recursive case. First, divide the list into equal-sized sublists\n     // consisting of the first half and second half of the list.\n     // This assumes lists start at index 0.\n     var left := empty list\n     var right := empty list\n     for each x with index i in m do\n         if i  i or 0. node is a reference or pointer to a node. The merge() function would be similar to the one shown in the top down merge lists example, it merges two already sorted lists, and handles empty lists. In this case, merge() would use node for its input parameters and return value.\n\n function merge_sort(node head)\n     // return if empty list\n     if (head \n nil)\n         return nil\n     var node array[32]; initially all nil\n     var node result\n     var node next\n     var int  i\n     result = head\n     // merge nodes into array\n     while (result != nil)\n          next = result.next;\n          result.next = nil\n          for(i 0; (i Powers, David M. W. and McMahon Graham B. (1983), \"A compendium of interesting prolog programs\", DCS Technical Report 8313, Department of Computer Science, University of New South Wales. In the bottom up merge sort, the starting point assumes each run is one item long. In practice, random input data will have many short runs that just happen to be sorted. In the typical case, the natural merge sort may not need as many passes because there are fewer runs to merge. In the best case, the input is already sorted (i.e., is one run), so the natural merge sort need only make one pass through the data. In many practical cases, long natural runs are present, and for that reason natural merge sort is exploited as the key component of Timsort. Example:\n\n Start       : 3--4--2--1--7--5--8--9--0--6\n Select runs : 3--4  2  1--7  5--8--9  0--6\n Merge       : 2--3--4  1--5--7--8--9  0--6\n Merge       : 1--2--3--4--5--7--8--9  0--6\n Merge       : 0--1--2--3--4--5--6--7--8--9\n\nTournament replacement selection sorts are used to gather the initial runs for external sorting algorithms.\n\nAnalysis\n\nIn sorting n objects, merge sort has an average and worst-case performance of O(n log n). If the running time of merge sort for a list of length n is T(n), then the recurrence T(n) = 2T(n/2) + n follows from the definition of the algorithm (apply the algorithm to two lists of half the size of the original list, and add the n steps taken to merge the resulting two lists). The closed form follows from the master theorem for divide-and-conquer recurrences.\n\nIn the worst case, the number of comparisons merge sort makes is equal to or slightly smaller than (n ⌈lg n⌉ - 2⌈lg n⌉ + 1), which is between (n lg n - n + 1) and (n lg n + n + O(lg n)).The worst case number given here does not agree with that given in Knuth's Art of Computer Programming, Vol 3. The discrepancy is due to Knuth analyzing a variant implementation of merge sort that is slightly sub-optimal\n\nFor large n and a randomly ordered input list,  merge sort's expected (average) number of comparisons approaches α·n fewer than the worst case where \\alpha -1 + \\sum_{k\n0}^\\infty \\frac1{2^k+1} \\approx 0.2645.\n\nIn the worst case, merge sort does about 39% fewer comparisons than quicksort does in the average case.  In terms of moves, merge sort's worst case complexity is O(n log n)—the same complexity as quicksort's best case, and merge sort's best case takes about half as many iterations as the worst case.\n\nMerge sort is more efficient than quicksort for some types of lists if the data to be sorted can only be efficiently accessed sequentially, and is thus popular in languages such as Lisp, where sequentially accessed data structures are very common. Unlike some (efficient) implementations of quicksort, merge sort is a stable sort.\n\nMerge sort's most common implementation does not sort in place; therefore, the memory size of the input must be allocated for the sorted output to be stored in (see below for versions that need only n/2 extra spaces).\n\nVariants\n\nVariants of merge sort are primarily concerned with reducing the space complexity and the cost of copying.\n\nA simple alternative for reducing the space overhead to n/2 is to maintain left and right as a combined structure, copy only the left part of m into temporary space, and to direct the merge routine to place the merged output into m. With this version it is better to allocate the temporary space outside the merge routine, so that only one allocation is needed. The excessive copying mentioned previously is also mitigated, since the last pair of lines before the return result statement (function  merge in the pseudo code above) become superfluous.\n\nOne drawback of merge sort, when implemented on arrays, is its  working memory requirement. Several in-place variants have been suggested:\n* Katajainen et al. present an algorithm that requires a constant amount of working memory: enough storage space to hold one element of the input array, and additional space to hold  pointers into the input array. They achieve an  time bound with small constants, but their algorithm is not stable.\n* Several attempts have been made at producing an in-place merge algorithm that can be combined with a standard (top-down or bottom-up) merge sort to produce an in-place merge sort. In this case, the notion of \"in-place\" can be relaxed to mean \"taking logarithmic stack space\", because standard merge sort requires that amount of space for its own stack usage. It was shown by Geffert et al. that in-place, stable merging is possible in  time using a constant amount of scratch space, but their algorithm is complicated and has high constant factors: merging arrays of length  and  can take  moves. This high constant factor and complicated in-place algorithm was made simpler and easier to understand. Bing-Chao Huang and Michael A. Langston presented a straightforward linear time algorithm practical in-place merge to merge a sorted list using fixed amount of additional space. They both have used the work of Kronrod and others. It merges in linear time and constant extra space. The algorithm takes little more average time than standard merge sort algorithms, free to exploit O(n) temporary extra memory cells, by less than a factor of two. Though the algorithm is much faster in practical way but it is unstable also for some list. But using similar concept they have been able to solve this problem. Other in-place algorithms include SymMerge, which takes  time in total and is stable. Plugging such an algorithm into merge sort increases its complexity to the non-linearithmic, but still quasilinear, .\n* A modern stable linear and implace merging is block merge sort\n\nAn alternative to reduce the copying into multiple lists is to associate a new field of information with each key (the elements in m are called keys). This field will be used to link the keys and any associated information together in a sorted list (a key and its related information is called a record). Then the merging of the sorted lists proceeds by changing the link values; no records need to be moved at all. A field which contains only a link will generally be smaller than an entire record so less space will also be used. This is a standard sorting technique, not restricted to merge sort.\n\nUse with tape drives\n\nAn external merge sort is practical to run using disk or tape drives when the data to be sorted is too large to fit into memory. External sorting explains how merge sort is implemented with disk drives. A typical tape drive sort uses four tape drives. All I/O is sequential (except for rewinds at the end of each pass). A minimal implementation can get by with just 2 record buffers and a few program variables.\n\nNaming the four tape drives as A, B, C, D, with the original data on A, and using only 2 record buffers, the algorithm is similar to Bottom-up implementation, using pairs of tape drives instead of arrays in memory. The basic algorithm can be described as follows:\n\n# Merge pairs of records from A; writing two-record sublists alternately to C and D.\n# Merge two-record sublists from C and D into four-record sublists; writing these alternately to A and B.\n# Merge four-record sublists from A and B into eight-record sublists; writing these alternately to C and D\n# Repeat until you have one list containing all the data, sorted—in log2(n) passes.\n\nInstead of starting with very short runs, usually a hybrid algorithm is used, where the initial pass will read many records into memory, do an internal sort to create a long run, and then distribute those long runs onto the output set. The step avoids many early passes. For example, an internal sort of 1024 records will save 9 passes. The internal sort is often large because it has such a benefit. In fact, there are techniques that can make the initial runs longer than the available internal memory.Selection sort. Knuth's snowplow. Natural merge.\n\nA more sophisticated merge sort that optimizes tape (and disk) drive usage is the polyphase merge sort.\n\nOptimizing merge sort\n\nOn modern computers, locality of reference can be of paramount importance in software optimization, because multilevel memory hierarchies are used. Cache-aware versions of the merge sort algorithm, whose operations have been specifically chosen to minimize the movement of pages in and out of a machine's memory cache, have been proposed. For example, the  algorithm stops partitioning subarrays when subarrays of size S are reached, where S is the number of data items fitting into a CPU's cache. Each of these subarrays is sorted with an in-place sorting algorithm such as insertion sort, to discourage memory swaps, and normal merge sort is then completed in the standard recursive fashion. This algorithm has demonstrated better performance  on machines that benefit from cache optimization. \n\n suggested an alternative version of merge sort that uses constant additional space. This algorithm was later refined. \n\nAlso, many applications of external sorting use a form of merge sorting where the input get split up to a higher number of sublists, ideally to a number for which merging them still makes the currently processed set of pages fit into main memory.\n\nParallel merge sort\n\nMerge sort parallelizes well due to use of the divide-and-conquer method.  Several parallel variants are discussed in the third edition of Cormen, Leiserson, Rivest, and Stein's Introduction to Algorithms. The first of these can be very easily expressed in a pseudocode with fork and join keywords:\n\n // Sort elements lo through hi (exclusive) of array A.\n algorithm mergesort(A, lo, hi) is\n     if lo+1 \\Theta \\left((n \\log n) \\cdot \\frac{(\\log n)^2}{n}\\right) = \\Theta((\\log n)^3)\n\ntime if enough processors are available.  Such a sort can perform well in practice when combined with a fast stable sequential sort, such as insertion sort, and a fast sequential merge as a base case for merging small arrays.Victor J. Duvanenko \"Parallel Merge Sort\" Dr. Dobb's Journal & blog[https://github.com/DragonSpit/ParallelAlgorithms] and GitHub repo C++ implementation [https://github.com/DragonSpit/ParallelAlgorithms]\n\nMerge sort was one of the first sorting algorithms where optimal speed up was achieved, with Richard Cole using a clever subsampling algorithm to ensure  merge. Other sophisticated parallel sorting algorithms can achieve the same or better time bounds with a lower constant. For example, in 1991 David Powers described a parallelized quicksort (and a related radix sort) that can operate in O(log n) time on a CRCW parallel random-access machine (PRAM) with n processors by performing partitioning implicitly.Powers, David M. W. [http://citeseer.ist.psu.edu/327487.html Parallelized Quicksort and Radixsort with Optimal Speedup], Proceedings of International Conference on Parallel Computing Technologies. Novosibirsk. 1991. PowersDavid M. W. Powers, [http://david.wardpowers.info/Research/AI/papers/199501-ACAW-PUPC.pdf Parallel Unification: Practical Complexity], Australasian Computer Architecture Workshop, Flinders University, January 1995 further shows that a pipelined version of Batcher's Bitonic Mergesort at O((log n)2) time on a butterfly sorting network is in practice actually faster than his O(log n) sorts on a PRAM, and he provides detailed discussion of the hidden overheads in comparison, radix and parallel sorting.\n\nComparison with other sort algorithms\n\nAlthough heapsort has the same time bounds as merge sort, it requires only  Θ(1) auxiliary space instead of merge sort's Θ(n). On typical modern architectures, efficient quicksort implementations generally outperform mergesort for sorting RAM-based arrays. On the other hand, merge sort is a stable sort and is more efficient at handling slow-to-access sequential media. Merge sort is often the best choice for sorting a linked list: in this situation it is relatively easy to implement a merge sort in such a way that it requires only Θ(1) extra space, and the slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible.\n\nAs of Perl 5.8, merge sort is its default sorting algorithm (it was quicksort in previous versions of Perl). In Java, the [https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#sort-java.lang.Object:A- Arrays.sort()] methods use merge sort or a tuned quicksort depending on the datatypes and for implementation efficiency switch to insertion sort when fewer than seven array elements are being sorted.[https://openjdk.dev.java.net/source/browse/openjdk/jdk/trunk/jdk/src/share/classes/java/util/Arrays.java?view=markup OpenJDK Subversion] The Linux kernel uses merge sort for its linked lists.[https://github.com/torvalds/linux/blob/master/lib/list_sort.c linux kernel /lib/list_sort.c] Python uses Timsort, another tuned hybrid of merge sort and insertion sort, that has become the standard sort algorithm in Java SE 7 (for arrays of non-primitive types), on the Android platform, and in GNU Octave.\n\nNotes",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Merge sort" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=20039" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945. A detailed description and analysis of bottom-up mergesort appeared in a report by Goldstine and von Neumann as early as 1948.\n\nAlgorithm\n\nConceptually, a merge sort works as follows:\n#Divide the unsorted list into n sublists, each containing 1 element (a list of 1 element is considered sorted).\n#Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining.  This will be the sorted list.\n\nTop-down implementation \n\nExample C-like code using indices for top down merge sort algorithm that recursively splits the list (called runs in this example) into sublists until sublist size is 1, then merges those sublists to produce a sorted list. The copy back step is avoided with alternating the direction of the merge with each level of recursion.\n\n// Array A[] has the items to sort; array B[] is a work array.\nTopDownMergeSort(A[], B[], n)\n{\n    CopyArray(A, 0, n, B);           // duplicate array A[] into B[]\n    TopDownSplitMerge(B, 0, n, A);   // sort data from B[] into A[]\n}\n\n// Sort the given run of array A[] using array B[] as a source.\n// iBegin is inclusive; iEnd is exclusive (A[iEnd] is not in the set).\nTopDownSplitMerge(B[], iBegin, iEnd, A[])\n{\n    if(iEnd - iBegin iEnd || A[i] \n\nBottom-up implementation\n\nExample C-like code using indices for bottom up merge sort algorithm which treats the list as an array of n sublists (called runs in this example) of size 1, and iteratively merges sub-lists back and forth between two buffers:\n\n// array A[] has the items to sort; array B[] is a work array\nvoid BottomUpMergeSort(A[], B[], n)\n{\n    // Each 1-element run in A is already \"sorted\".\n    // Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted.\n    for (width 1; width = n) )\n            BottomUpMerge(A, i, min(i+width, n), min(i+2*width, n), B);\n        }\n        // Now work array B is full of runs of length 2*width.\n        // Copy array B to array A for next iteration.\n        // A more efficient implementation would swap the roles of A and B.\n        CopyArray(B, A, n);\n        // Now array A is full of runs of length 2*width.\n    }\n}\n\n//  Left run is A[iLeft :iRight-1].\n// Right run is A[iRight:iEnd-1  ].\nvoid BottomUpMerge(A[], iLeft, iRight, iEnd, B[])\n{\n    i iLeft, j \n iRight;\n    // While there are elements in the left or right runs...\n    for (k = iLeft; k iEnd || A[i] \n\nTop-down implementation using lists \n\nPseudocode for top down merge sort algorithm which recursively divides the input list into smaller sublists until the sublists are trivially sorted, and then merges the sublists while returning up the call chain.\n\n function merge_sort(list m)\n     // Base case. A list of zero or one elements is sorted, by definition.\n     if length of m ≤ 1 then\n         return m\n \n     // Recursive case. First, divide the list into equal-sized sublists\n     // consisting of the first half and second half of the list.\n     // This assumes lists start at index 0.\n     var left := empty list\n     var right := empty list\n     for each x with index i in m do\n         if i  i or 0. node is a reference or pointer to a node. The merge() function would be similar to the one shown in the top down merge lists example, it merges two already sorted lists, and handles empty lists. In this case, merge() would use node for its input parameters and return value.\n\n function merge_sort(node head)\n     // return if empty list\n     if (head \n nil)\n         return nil\n     var node array[32]; initially all nil\n     var node result\n     var node next\n     var int  i\n     result = head\n     // merge nodes into array\n     while (result != nil)\n          next = result.next;\n          result.next = nil\n          for(i 0; (i Powers, David M. W. and McMahon Graham B. (1983), \"A compendium of interesting prolog programs\", DCS Technical Report 8313, Department of Computer Science, University of New South Wales. In the bottom up merge sort, the starting point assumes each run is one item long. In practice, random input data will have many short runs that just happen to be sorted. In the typical case, the natural merge sort may not need as many passes because there are fewer runs to merge. In the best case, the input is already sorted (i.e., is one run), so the natural merge sort need only make one pass through the data. In many practical cases, long natural runs are present, and for that reason natural merge sort is exploited as the key component of Timsort. Example:\n\n Start       : 3--4--2--1--7--5--8--9--0--6\n Select runs : 3--4  2  1--7  5--8--9  0--6\n Merge       : 2--3--4  1--5--7--8--9  0--6\n Merge       : 1--2--3--4--5--7--8--9  0--6\n Merge       : 0--1--2--3--4--5--6--7--8--9\n\nTournament replacement selection sorts are used to gather the initial runs for external sorting algorithms.\n\nAnalysis\n\nIn sorting n objects, merge sort has an average and worst-case performance of O(n log n). If the running time of merge sort for a list of length n is T(n), then the recurrence T(n) = 2T(n/2) + n follows from the definition of the algorithm (apply the algorithm to two lists of half the size of the original list, and add the n steps taken to merge the resulting two lists). The closed form follows from the master theorem for divide-and-conquer recurrences.\n\nIn the worst case, the number of comparisons merge sort makes is equal to or slightly smaller than (n ⌈lg n⌉ - 2⌈lg n⌉ + 1), which is between (n lg n - n + 1) and (n lg n + n + O(lg n)).The worst case number given here does not agree with that given in Knuth's Art of Computer Programming, Vol 3. The discrepancy is due to Knuth analyzing a variant implementation of merge sort that is slightly sub-optimal\n\nFor large n and a randomly ordered input list,  merge sort's expected (average) number of comparisons approaches α·n fewer than the worst case where \\alpha -1 + \\sum_{k\n0}^\\infty \\frac1{2^k+1} \\approx 0.2645.\n\nIn the worst case, merge sort does about 39% fewer comparisons than quicksort does in the average case.  In terms of moves, merge sort's worst case complexity is O(n log n)—the same complexity as quicksort's best case, and merge sort's best case takes about half as many iterations as the worst case.\n\nMerge sort is more efficient than quicksort for some types of lists if the data to be sorted can only be efficiently accessed sequentially, and is thus popular in languages such as Lisp, where sequentially accessed data structures are very common. Unlike some (efficient) implementations of quicksort, merge sort is a stable sort.\n\nMerge sort's most common implementation does not sort in place; therefore, the memory size of the input must be allocated for the sorted output to be stored in (see below for versions that need only n/2 extra spaces).\n\nVariants\n\nVariants of merge sort are primarily concerned with reducing the space complexity and the cost of copying.\n\nA simple alternative for reducing the space overhead to n/2 is to maintain left and right as a combined structure, copy only the left part of m into temporary space, and to direct the merge routine to place the merged output into m. With this version it is better to allocate the temporary space outside the merge routine, so that only one allocation is needed. The excessive copying mentioned previously is also mitigated, since the last pair of lines before the return result statement (function  merge in the pseudo code above) become superfluous.\n\nOne drawback of merge sort, when implemented on arrays, is its  working memory requirement. Several in-place variants have been suggested:\n* Katajainen et al. present an algorithm that requires a constant amount of working memory: enough storage space to hold one element of the input array, and additional space to hold  pointers into the input array. They achieve an  time bound with small constants, but their algorithm is not stable.\n* Several attempts have been made at producing an in-place merge algorithm that can be combined with a standard (top-down or bottom-up) merge sort to produce an in-place merge sort. In this case, the notion of \"in-place\" can be relaxed to mean \"taking logarithmic stack space\", because standard merge sort requires that amount of space for its own stack usage. It was shown by Geffert et al. that in-place, stable merging is possible in  time using a constant amount of scratch space, but their algorithm is complicated and has high constant factors: merging arrays of length  and  can take  moves. This high constant factor and complicated in-place algorithm was made simpler and easier to understand. Bing-Chao Huang and Michael A. Langston presented a straightforward linear time algorithm practical in-place merge to merge a sorted list using fixed amount of additional space. They both have used the work of Kronrod and others. It merges in linear time and constant extra space. The algorithm takes little more average time than standard merge sort algorithms, free to exploit O(n) temporary extra memory cells, by less than a factor of two. Though the algorithm is much faster in practical way but it is unstable also for some list. But using similar concept they have been able to solve this problem. Other in-place algorithms include SymMerge, which takes  time in total and is stable. Plugging such an algorithm into merge sort increases its complexity to the non-linearithmic, but still quasilinear, .\n* A modern stable linear and implace merging is block merge sort\n\nAn alternative to reduce the copying into multiple lists is to associate a new field of information with each key (the elements in m are called keys). This field will be used to link the keys and any associated information together in a sorted list (a key and its related information is called a record). Then the merging of the sorted lists proceeds by changing the link values; no records need to be moved at all. A field which contains only a link will generally be smaller than an entire record so less space will also be used. This is a standard sorting technique, not restricted to merge sort.\n\nUse with tape drives\n\nAn external merge sort is practical to run using disk or tape drives when the data to be sorted is too large to fit into memory. External sorting explains how merge sort is implemented with disk drives. A typical tape drive sort uses four tape drives. All I/O is sequential (except for rewinds at the end of each pass). A minimal implementation can get by with just 2 record buffers and a few program variables.\n\nNaming the four tape drives as A, B, C, D, with the original data on A, and using only 2 record buffers, the algorithm is similar to Bottom-up implementation, using pairs of tape drives instead of arrays in memory. The basic algorithm can be described as follows:\n\n# Merge pairs of records from A; writing two-record sublists alternately to C and D.\n# Merge two-record sublists from C and D into four-record sublists; writing these alternately to A and B.\n# Merge four-record sublists from A and B into eight-record sublists; writing these alternately to C and D\n# Repeat until you have one list containing all the data, sorted—in log2(n) passes.\n\nInstead of starting with very short runs, usually a hybrid algorithm is used, where the initial pass will read many records into memory, do an internal sort to create a long run, and then distribute those long runs onto the output set. The step avoids many early passes. For example, an internal sort of 1024 records will save 9 passes. The internal sort is often large because it has such a benefit. In fact, there are techniques that can make the initial runs longer than the available internal memory.Selection sort. Knuth's snowplow. Natural merge.\n\nA more sophisticated merge sort that optimizes tape (and disk) drive usage is the polyphase merge sort.\n\nOptimizing merge sort\n\nOn modern computers, locality of reference can be of paramount importance in software optimization, because multilevel memory hierarchies are used. Cache-aware versions of the merge sort algorithm, whose operations have been specifically chosen to minimize the movement of pages in and out of a machine's memory cache, have been proposed. For example, the  algorithm stops partitioning subarrays when subarrays of size S are reached, where S is the number of data items fitting into a CPU's cache. Each of these subarrays is sorted with an in-place sorting algorithm such as insertion sort, to discourage memory swaps, and normal merge sort is then completed in the standard recursive fashion. This algorithm has demonstrated better performance  on machines that benefit from cache optimization. \n\n suggested an alternative version of merge sort that uses constant additional space. This algorithm was later refined. \n\nAlso, many applications of external sorting use a form of merge sorting where the input get split up to a higher number of sublists, ideally to a number for which merging them still makes the currently processed set of pages fit into main memory.\n\nParallel merge sort\n\nMerge sort parallelizes well due to use of the divide-and-conquer method.  Several parallel variants are discussed in the third edition of Cormen, Leiserson, Rivest, and Stein's Introduction to Algorithms. The first of these can be very easily expressed in a pseudocode with fork and join keywords:\n\n // Sort elements lo through hi (exclusive) of array A.\n algorithm mergesort(A, lo, hi) is\n     if lo+1 \\Theta \\left((n \\log n) \\cdot \\frac{(\\log n)^2}{n}\\right) = \\Theta((\\log n)^3)\n\ntime if enough processors are available.  Such a sort can perform well in practice when combined with a fast stable sequential sort, such as insertion sort, and a fast sequential merge as a base case for merging small arrays.Victor J. Duvanenko \"Parallel Merge Sort\" Dr. Dobb's Journal & blog[https://github.com/DragonSpit/ParallelAlgorithms] and GitHub repo C++ implementation [https://github.com/DragonSpit/ParallelAlgorithms]\n\nMerge sort was one of the first sorting algorithms where optimal speed up was achieved, with Richard Cole using a clever subsampling algorithm to ensure  merge. Other sophisticated parallel sorting algorithms can achieve the same or better time bounds with a lower constant. For example, in 1991 David Powers described a parallelized quicksort (and a related radix sort) that can operate in O(log n) time on a CRCW parallel random-access machine (PRAM) with n processors by performing partitioning implicitly.Powers, David M. W. [http://citeseer.ist.psu.edu/327487.html Parallelized Quicksort and Radixsort with Optimal Speedup], Proceedings of International Conference on Parallel Computing Technologies. Novosibirsk. 1991. PowersDavid M. W. Powers, [http://david.wardpowers.info/Research/AI/papers/199501-ACAW-PUPC.pdf Parallel Unification: Practical Complexity], Australasian Computer Architecture Workshop, Flinders University, January 1995 further shows that a pipelined version of Batcher's Bitonic Mergesort at O((log n)2) time on a butterfly sorting network is in practice actually faster than his O(log n) sorts on a PRAM, and he provides detailed discussion of the hidden overheads in comparison, radix and parallel sorting.\n\nComparison with other sort algorithms\n\nAlthough heapsort has the same time bounds as merge sort, it requires only  Θ(1) auxiliary space instead of merge sort's Θ(n). On typical modern architectures, efficient quicksort implementations generally outperform mergesort for sorting RAM-based arrays. On the other hand, merge sort is a stable sort and is more efficient at handling slow-to-access sequential media. Merge sort is often the best choice for sorting a linked list: in this situation it is relatively easy to implement a merge sort in such a way that it requires only Θ(1) extra space, and the slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible.\n\nAs of Perl 5.8, merge sort is its default sorting algorithm (it was quicksort in previous versions of Perl). In Java, the [https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#sort-java.lang.Object:A- Arrays.sort()] methods use merge sort or a tuned quicksort depending on the datatypes and for implementation efficiency switch to insertion sort when fewer than seven array elements are being sorted.[https://openjdk.dev.java.net/source/browse/openjdk/jdk/trunk/jdk/src/share/classes/java/util/Arrays.java?view=markup OpenJDK Subversion] The Linux kernel uses merge sort for its linked lists.[https://github.com/torvalds/linux/blob/master/lib/list_sort.c linux kernel /lib/list_sort.c] Python uses Timsort, another tuned hybrid of merge sort and insertion sort, that has become the standard sort algorithm in Java SE 7 (for arrays of non-primitive types), on the Android platform, and in GNU Octave.\n\nNotes. Merge sort. http://en.wikipedia.org/?curid=20039."
  }
}
