{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=16389",
  "eid" : "25bd4f20-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778572562,
  "textBody" : "A Java virtual machine (JVM) is an abstract computing machine that enables a computer to run a Java program. There are three notions of the JVM: specification, implementation, and instance. The specification is a document that formally describes what is required of a JVM implementation. Having a single specification ensures all implementations are interoperable. A JVM implementation is a computer program that meets the requirements of the JVM specification. An instance of a JVM is an implementation running in a process that executes a computer program compiled into Java bytecode. \n\nJava Runtime Environment (JRE) is a software package that contains what is required to run a Java program. It includes a Java Virtual Machine implementation together with an implementation of the Java Class Library. The Oracle Corporation, which owns the Java trademark, distributes a Java Runtime environment with their Java Virtual Machine called HotSpot.\n\nJava Development Kit (JDK) is a superset of a JRE and contains tools for Java programmers, e.g. a javac compiler. The Java Development Kit is provided free of charge either by Oracle Corporation directly, or by the OpenJDK open source project, which is governed by Oracle.\n\nJVM specification\n\nThe Java virtual machine is an abstract (virtual) computer defined by a specification. This specification omits implementation details that are not essential to ensure interoperability: the memory layout of run-time data areas, the garbage-collection algorithm used, and any internal optimization of the Java virtual machine instructions (their translation into machine code). The main reason for this omission is to not unnecessarily constrain implementers. Any Java application can be run only inside some concrete implementation of the abstract specification of the Java virtual machine.Bill Venners, [http://www.artima.com/insidejvm/ed2/index.html Inside the Java Virtual Machine] Chapter 5\n\nStarting with Java Platform, Standard Edition (J2SE) 5.0, changes to the JVM specification have been developed under the Java Community Process as JSR 924. , changes to specification to support changes proposed to the class file format (JSR 202) are being done as a maintenance release of JSR 924. The specification for the JVM was published as the blue book,[http://java.sun.com/docs/books/vmspec/ The Java Virtual Machine Specification] (the [http://java.sun.com/docs/books/vmspec/html/VMSpecTOC.doc.html first] and [http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html second] editions are also available online). The preface states:\n\nOne of Oracle's JVMs is named HotSpot, the other, inherited from BEA Systems is JRockit. Clean-room Java implementations include Kaffe and IBM J9. Oracle owns the Java trademark and may allow its use to certify implementation suites as fully compatible with Oracle's specification.\n\nClass loader\n\nOne of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.\n\nThe class loader performs three basic activities in this strict order:\n\n#Loading: finds and imports the binary data for a type\n#Linking: performs verification, preparation, and (optionally) resolution\n#*Verification: ensures the correctness of the imported type\n#*Preparation: allocates memory for class variables and initializing the memory to default values\n#*Resolution: transforms symbolic references from the type into direct references. \n#Initialization: invokes Java code that initializes class variables to their proper starting values.\n\nIn general, there are two types of class loader: bootstrap class loader and user defined class loader.\n\nEvery Java virtual machine implementation must have a bootstrap class loader, capable of loading trusted classes. The Java virtual machine specification doesn't specify how a class loader should locate classes.\n\nVirtual machine architecture \n\nThe JVM operates on primitive values (integers and floating-point numbers) and references. The JVM is fundamentally a 32-bit machine. long and double types, which are 64-bits, are supported natively, but consume two units of storage in a frame's local variables or operand stack, since each unit is 32 bits. boolean, byte, short, and char types are all sign-extended (except char which is zero-extended) and operated on as 32-bit integers, the same as int types. The smaller types only have a few type-specific instructions for loading, storing, and type conversion. boolean is not known at all to the JVM; booleans are operated on as 8-bit byte values, with 0 representing false and 1 representing true.\n\nThe JVM has a garbage-collected heap for storing objects and arrays. Code, constants, and other class data are stored in the \"method area\". The method area is logically part of the heap, but implementations may treat the method area separately from the heap, and for example might not garbage collect it. Each JVM thread also has its own call stack (called a \"Java Virtual Machine stack\" for clarity), which stores frames. A new frame is created each time a method is called, and the frame is destroyed when that method exits.\n\nEach frame provides an \"operand stack\" and an array of \"local variables\". The operand stack is used for operands to computations and for receiving the return value of a called method, while local variables serve the same purpose as registers and are also used to pass method arguments. Thus, the JVM is both a stack machine and a register machine.\n\nBytecode instructions \n\nThe JVM has instructions for the following groups of tasks:\n\nThe aim is binary compatibility. Each particular host operating system needs its own implementation of the JVM and runtime. These JVMs interpret the bytecode semantically the same way, but the actual implementation may be different. More complex than just emulating bytecode is compatibly and efficiently implementing the Java core API that must be mapped to each host operating system.\n\nThese instructions operate on a set of common  rather the native data types of any specific instruction set architecture.\n\nJVM languages\n\nA JVM language is any language with functionality that can be expressed in terms of a valid class file which can be hosted by the Java Virtual Machine. A class file contains Java Virtual Machine instructions (Java byte code) and a symbol table, as well as other ancillary information. The class file format is the hardware- and operating system-independent binary format used to represent compiled classes and interfaces.\n\nThere are several JVM languages, both old languages ported to JVM and completely new languages. JRuby and Jython are perhaps the most well-known ports of existing languages, i.e. Ruby and Python respectively. Of the new languages that have been created from scratch to compile to Java bytecode, Clojure, Apache Groovy, Scala and Kotlin may be the most popular ones. A notable feature with the JVM languages is that they are compatible with each other, so that, for example, Scala libraries can be used with Java programs and vice versa.\n\nJava 7 JVM implements JSR 292: Supporting Dynamically Typed Languages on the Java Platform, a new feature which supports dynamically typed languages in the JVM. This feature is developed within the Da Vinci Machine project whose mission is to extend the JVM so that it supports languages other than Java.\n\nBytecode verifier \n\nA basic philosophy of Java is that it is inherently safe from the standpoint that no user program can crash the host machine or otherwise interfere inappropriately with other operations on the host machine, and that it is possible to protect certain methods and data structures belonging to trusted code from access or corruption by untrusted code executing within the same JVM. Furthermore, common programmer errors that often led to data corruption or unpredictable behavior such as accessing off the end of an array or using an uninitialized pointer are not allowed to occur. Several features of Java combine to provide this safety, including the class model, the garbage-collected heap, and the verifier.\n\nThe JVM verifies all bytecode before it is executed. This verification consists primarily of three types of checks:\n\n* Branches are always to valid locations\n* Data is always initialized and references are always type-safe\n* Access to private or package private data and methods is rigidly controlled\n\nThe first two of these checks take place primarily during the verification step that occurs when a class is loaded and made eligible for use. The third is primarily performed dynamically, when data items or methods of a class are first accessed by another class.\n\nThe verifier permits only some bytecode sequences in valid programs, e.g. a jump (branch) instruction can only target an instruction within the same method. Furthermore, the verifier ensures that any given instruction operates on a fixed stack location, allowing the JIT compiler to transform stack accesses into fixed register accesses. Because of this, that the JVM is a stack architecture does not imply a speed penalty for emulation on register-based architectures when using a JIT compiler. In the face of the code-verified JVM architecture, it makes no difference to a JIT compiler whether it gets named imaginary registers or imaginary stack positions that must be allocated to the target architecture's registers. In fact, code verification makes the JVM different from a classic stack architecture, of which efficient emulation with a JIT compiler is more complicated and typically carried out by a slower interpreter.\n\nThe original specification for the bytecode verifier used natural language that was incomplete or incorrect in some respects. A number of attempts have been made to specify the JVM as a formal system. By doing this, the security of current JVM implementations can more thoroughly be analyzed, and potential security exploits prevented. It will also be possible to optimize the JVM by skipping unnecessary safety checks, if the application being run is proven to be safe.Stephen N. Freund and John C. Mitchell. 1999. A formal framework for the Java bytecode language and verifier. In Proceedings of the 14th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications (OOPSLA '99), A. Michael Berman (Ed.) Association for Computing Machinery, New York, pp.147–166. \n\nSecure execution of remote code \n\nA virtual machine architecture allows very fine-grained control over the actions that code within the machine is permitted to take. It assumes the code is \"semantically\" correct, that is, it successfully passed the (formal) bytecode verifier process, materialized by a tool, possibly off-board the virtual machine. This is designed to allow safe execution of untrusted code from remote sources, a model used by Java applets, and other secure code downloads. Once bytecode-verified, the downloaded code runs in a restricted \"sandbox\", which is designed to protect the user from misbehaving or malicious code. As an addition to the bytecode verification process, publishers can purchase a certificate with which to digitally sign applets as safe, giving them permission to ask the user to break out of the sandbox and access the local file system, clipboard, execute external pieces of software, or network.\n\nFormal proof of bytecode verifiers have been done by the Javacard industry (Formal Development of an Embedded Verifier for Java Card Byte Codehttp://www-sop.inria.fr/everest/Lilian.Burdy/CBR02dsn.pdf)\n\nBytecode interpreter and just-in-time compiler \n\nFor each hardware architecture a different Java bytecode interpreter is needed. When a computer has a Java bytecode interpreter, it can run any Java bytecode program, and the same program can be run on any computer that has such an interpreter.\n\nWhen Java bytecode is executed by an interpreter, the execution will always be slower than the execution of the same program compiled into native machine language. This problem is mitigated by just-in-time (JIT) compilers for executing Java bytecode. A JIT compiler may translate Java bytecode into native machine language while executing the program. The translated parts of the program can then be executed much more quickly than they could be interpreted.  This technique gets applied to those parts of a program frequently executed. This way a JIT compiler can significantly speed up the overall execution time.\n\nThere is no necessary connection between the Java programming language and Java bytecode. A program written in Java can be compiled directly into the machine language of a real computer and programs written in other languages than Java can be compiled into Java bytecode.\n\nJava bytecode is intended to be platform-independent and secure.David J. Eck, [http://math.hws.edu/javanotes/c1/s3.html Introduction to Programming Using Java], Seventh Edition, Version 7.0, August 2014 at Section 1.3 \"The Java Virtual Machine\" Some JVM implementations do not include an interpreter, but consist only of a just-in-time compiler.[http://docs.oracle.com/cd/E15289_01/doc.40/e15058/underst_jit.htm Oracle JRockit Introduction] Release R28 at 2. \"Understanding Just-In-Time Compilation and Optimization\"\n\nJVM in the web browser\n\nSince the very early stages of the design process, Java (and JVM) has been marketed as a web technology for creating Rich Internet Applications.\n\nJava applets \n\nOn the client side, web browsers may be extended with a NPAPI Java plugin which executes so called Java applets embedded into HTML pages. The applet is allowed to draw into a rectangular region on the page assigned to it and use a restricted set of APIs that allow for example access to user's microphone or 3D acceleration. Java applets were superior to JavaScript both in performance and features until approximately 2011, when JavaScript engines in browsers were made significantly faster and the HTML 5 suite of web technologies started enhancing JavaScript with new APIs. Java applets are not able to modify the page outside its rectangular region which is not true about JavaScript. Adobe Flash Player, the main competing technology, works in the same way in this respect. Java applets are not restricted to Java and in general can be created in any JVM language.\n\nAs of April 2014, Google Chrome does not allow the use of any NPAPI plugins. Mozilla Firefox will also ban NPAPI plugins by the end of 2016. This means that Java applets can no longer be used in either browser. Oracle ultimately announced in January 2016 that it will discontinue the Java web browser plugin effective Java 9.\n\n according to W3Techs, Java applet use had fallen to 0.1% of all web sites. Flash had fallen to 10.8% and Silverlight to 0.1% of web sites.\n\nJavaScript JVMs and interpreters\n\nAs of May 2016, JavaPoly allows users to import unmodified Java libraries, and invoke them directly from JavaScript.  JavaPoly allows websites to use run unmodified Java libraries, even if the user does not have Java installed on their computer.\n\nCompilation to JavaScript\n\nWith the continuing improvements in JavaScript execution speed, combined with the increased use of mobile devices whose web browsers do not implement support for plugins, there are efforts to target those users through compilation to JavaScript. It is possible to either compile the source code or JVM bytecode to JavaScript.\n\nCompiling the JVM bytecode, which is universal across JVM languages, allows building upon the language's existing compiler to bytecode. The main JVM bytecode to JavaScript compilers are TeaVM, the compiler contained in Dragome Web SDK, Bck2Brwsr, and j2js-compiler.Wolfgang Kuehn (decatur). [https://github.com/decatur/j2js-compiler j2js-compiler] GitHub\n\nLeading compilers from JVM languages to JavaScript include the Java-to-JavaScript compiler contained in Google Web Toolkit, Clojurescript (Clojure), GrooScript (Apache Groovy), Scala.js (Scala) and others.\n\nJava Runtime Environment\n\nThe Java Runtime Environment (JRE) released by Oracle is a software distribution containing a stand-alone Java VM (HotSpot), a browser plugin (discontinued since Java 9), the Java standard library (Java Class Library) and a configuration tool. It is the most common Java environment installed on Windows computers. It is freely available for download at the website java.com.\n\nPerformance\n\nThe JVM specification gives a lot of leeway to implementors regarding the implementation details. Since Java 1.3, JRE from Oracle contains a JVM called HotSpot. It has been designed to be a high-performance JVM.\n\nTo speed-up code execution, HotSpot relies on just-in-time compilation. To speed-up object allocation and garbage collection, HotSpot uses generational heap.\n\nGenerational heap \n\nThe Java virtual machine heap is the area of memory used by the JVM for dynamic memory allocation.\n\nIn HotSpot the heap is divided into generations:\n* The young generation stores short-lived objects that are created and immediately garbage collected.\n* Objects that persist longer are moved to the old generation (also called the tenured generation). This memory is subdivided into (two) Survivors spaces where the objects that survived the first and next garbage collections are stored.\n\nThe permanent generation (or permgen) was used for class definitions and associated metadata prior to Java 8. Permanent generation was not part of the heap. The permanent generation was removed from Java 8.\n\nOriginally there was no permanent generation, and objects and classes were stored together in the same area. But as class unloading occurs much more rarely than objects are collected, moving class structures to a specific area allowed significant performance improvements.\n\nSecurity\n\nOracle's JRE is installed on a large number of computers. Since any web page the user visits may run Java applets, Java provides an easily accessible attack surface to malicious web sites that the user visits. Kaspersky Labs reports that the Java web browser plugin is the method of choice for computer criminals. Java exploits are included in many exploit packs that hackers deploy onto hacked web sites.\n\nIn the past, end users were often using an out-of-date version of JRE which was vulnerable to many known attacks. This led to the widely shared belief between users that Java is inherently insecure. Since Java 1.7, Oracle's JRE for Windows includes automatic update functionality.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Java virtual machine" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=16389" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "A Java virtual machine (JVM) is an abstract computing machine that enables a computer to run a Java program. There are three notions of the JVM: specification, implementation, and instance. The specification is a document that formally describes what is required of a JVM implementation. Having a single specification ensures all implementations are interoperable. A JVM implementation is a computer program that meets the requirements of the JVM specification. An instance of a JVM is an implementation running in a process that executes a computer program compiled into Java bytecode. \n\nJava Runtime Environment (JRE) is a software package that contains what is required to run a Java program. It includes a Java Virtual Machine implementation together with an implementation of the Java Class Library. The Oracle Corporation, which owns the Java trademark, distributes a Java Runtime environment with their Java Virtual Machine called HotSpot.\n\nJava Development Kit (JDK) is a superset of a JRE and contains tools for Java programmers, e.g. a javac compiler. The Java Development Kit is provided free of charge either by Oracle Corporation directly, or by the OpenJDK open source project, which is governed by Oracle.\n\nJVM specification\n\nThe Java virtual machine is an abstract (virtual) computer defined by a specification. This specification omits implementation details that are not essential to ensure interoperability: the memory layout of run-time data areas, the garbage-collection algorithm used, and any internal optimization of the Java virtual machine instructions (their translation into machine code). The main reason for this omission is to not unnecessarily constrain implementers. Any Java application can be run only inside some concrete implementation of the abstract specification of the Java virtual machine.Bill Venners, [http://www.artima.com/insidejvm/ed2/index.html Inside the Java Virtual Machine] Chapter 5\n\nStarting with Java Platform, Standard Edition (J2SE) 5.0, changes to the JVM specification have been developed under the Java Community Process as JSR 924. , changes to specification to support changes proposed to the class file format (JSR 202) are being done as a maintenance release of JSR 924. The specification for the JVM was published as the blue book,[http://java.sun.com/docs/books/vmspec/ The Java Virtual Machine Specification] (the [http://java.sun.com/docs/books/vmspec/html/VMSpecTOC.doc.html first] and [http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html second] editions are also available online). The preface states:\n\nOne of Oracle's JVMs is named HotSpot, the other, inherited from BEA Systems is JRockit. Clean-room Java implementations include Kaffe and IBM J9. Oracle owns the Java trademark and may allow its use to certify implementation suites as fully compatible with Oracle's specification.\n\nClass loader\n\nOne of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.\n\nThe class loader performs three basic activities in this strict order:\n\n#Loading: finds and imports the binary data for a type\n#Linking: performs verification, preparation, and (optionally) resolution\n#*Verification: ensures the correctness of the imported type\n#*Preparation: allocates memory for class variables and initializing the memory to default values\n#*Resolution: transforms symbolic references from the type into direct references. \n#Initialization: invokes Java code that initializes class variables to their proper starting values.\n\nIn general, there are two types of class loader: bootstrap class loader and user defined class loader.\n\nEvery Java virtual machine implementation must have a bootstrap class loader, capable of loading trusted classes. The Java virtual machine specification doesn't specify how a class loader should locate classes.\n\nVirtual machine architecture \n\nThe JVM operates on primitive values (integers and floating-point numbers) and references. The JVM is fundamentally a 32-bit machine. long and double types, which are 64-bits, are supported natively, but consume two units of storage in a frame's local variables or operand stack, since each unit is 32 bits. boolean, byte, short, and char types are all sign-extended (except char which is zero-extended) and operated on as 32-bit integers, the same as int types. The smaller types only have a few type-specific instructions for loading, storing, and type conversion. boolean is not known at all to the JVM; booleans are operated on as 8-bit byte values, with 0 representing false and 1 representing true.\n\nThe JVM has a garbage-collected heap for storing objects and arrays. Code, constants, and other class data are stored in the \"method area\". The method area is logically part of the heap, but implementations may treat the method area separately from the heap, and for example might not garbage collect it. Each JVM thread also has its own call stack (called a \"Java Virtual Machine stack\" for clarity), which stores frames. A new frame is created each time a method is called, and the frame is destroyed when that method exits.\n\nEach frame provides an \"operand stack\" and an array of \"local variables\". The operand stack is used for operands to computations and for receiving the return value of a called method, while local variables serve the same purpose as registers and are also used to pass method arguments. Thus, the JVM is both a stack machine and a register machine.\n\nBytecode instructions \n\nThe JVM has instructions for the following groups of tasks:\n\nThe aim is binary compatibility. Each particular host operating system needs its own implementation of the JVM and runtime. These JVMs interpret the bytecode semantically the same way, but the actual implementation may be different. More complex than just emulating bytecode is compatibly and efficiently implementing the Java core API that must be mapped to each host operating system.\n\nThese instructions operate on a set of common  rather the native data types of any specific instruction set architecture.\n\nJVM languages\n\nA JVM language is any language with functionality that can be expressed in terms of a valid class file which can be hosted by the Java Virtual Machine. A class file contains Java Virtual Machine instructions (Java byte code) and a symbol table, as well as other ancillary information. The class file format is the hardware- and operating system-independent binary format used to represent compiled classes and interfaces.\n\nThere are several JVM languages, both old languages ported to JVM and completely new languages. JRuby and Jython are perhaps the most well-known ports of existing languages, i.e. Ruby and Python respectively. Of the new languages that have been created from scratch to compile to Java bytecode, Clojure, Apache Groovy, Scala and Kotlin may be the most popular ones. A notable feature with the JVM languages is that they are compatible with each other, so that, for example, Scala libraries can be used with Java programs and vice versa.\n\nJava 7 JVM implements JSR 292: Supporting Dynamically Typed Languages on the Java Platform, a new feature which supports dynamically typed languages in the JVM. This feature is developed within the Da Vinci Machine project whose mission is to extend the JVM so that it supports languages other than Java.\n\nBytecode verifier \n\nA basic philosophy of Java is that it is inherently safe from the standpoint that no user program can crash the host machine or otherwise interfere inappropriately with other operations on the host machine, and that it is possible to protect certain methods and data structures belonging to trusted code from access or corruption by untrusted code executing within the same JVM. Furthermore, common programmer errors that often led to data corruption or unpredictable behavior such as accessing off the end of an array or using an uninitialized pointer are not allowed to occur. Several features of Java combine to provide this safety, including the class model, the garbage-collected heap, and the verifier.\n\nThe JVM verifies all bytecode before it is executed. This verification consists primarily of three types of checks:\n\n* Branches are always to valid locations\n* Data is always initialized and references are always type-safe\n* Access to private or package private data and methods is rigidly controlled\n\nThe first two of these checks take place primarily during the verification step that occurs when a class is loaded and made eligible for use. The third is primarily performed dynamically, when data items or methods of a class are first accessed by another class.\n\nThe verifier permits only some bytecode sequences in valid programs, e.g. a jump (branch) instruction can only target an instruction within the same method. Furthermore, the verifier ensures that any given instruction operates on a fixed stack location, allowing the JIT compiler to transform stack accesses into fixed register accesses. Because of this, that the JVM is a stack architecture does not imply a speed penalty for emulation on register-based architectures when using a JIT compiler. In the face of the code-verified JVM architecture, it makes no difference to a JIT compiler whether it gets named imaginary registers or imaginary stack positions that must be allocated to the target architecture's registers. In fact, code verification makes the JVM different from a classic stack architecture, of which efficient emulation with a JIT compiler is more complicated and typically carried out by a slower interpreter.\n\nThe original specification for the bytecode verifier used natural language that was incomplete or incorrect in some respects. A number of attempts have been made to specify the JVM as a formal system. By doing this, the security of current JVM implementations can more thoroughly be analyzed, and potential security exploits prevented. It will also be possible to optimize the JVM by skipping unnecessary safety checks, if the application being run is proven to be safe.Stephen N. Freund and John C. Mitchell. 1999. A formal framework for the Java bytecode language and verifier. In Proceedings of the 14th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications (OOPSLA '99), A. Michael Berman (Ed.) Association for Computing Machinery, New York, pp.147–166. \n\nSecure execution of remote code \n\nA virtual machine architecture allows very fine-grained control over the actions that code within the machine is permitted to take. It assumes the code is \"semantically\" correct, that is, it successfully passed the (formal) bytecode verifier process, materialized by a tool, possibly off-board the virtual machine. This is designed to allow safe execution of untrusted code from remote sources, a model used by Java applets, and other secure code downloads. Once bytecode-verified, the downloaded code runs in a restricted \"sandbox\", which is designed to protect the user from misbehaving or malicious code. As an addition to the bytecode verification process, publishers can purchase a certificate with which to digitally sign applets as safe, giving them permission to ask the user to break out of the sandbox and access the local file system, clipboard, execute external pieces of software, or network.\n\nFormal proof of bytecode verifiers have been done by the Javacard industry (Formal Development of an Embedded Verifier for Java Card Byte Codehttp://www-sop.inria.fr/everest/Lilian.Burdy/CBR02dsn.pdf)\n\nBytecode interpreter and just-in-time compiler \n\nFor each hardware architecture a different Java bytecode interpreter is needed. When a computer has a Java bytecode interpreter, it can run any Java bytecode program, and the same program can be run on any computer that has such an interpreter.\n\nWhen Java bytecode is executed by an interpreter, the execution will always be slower than the execution of the same program compiled into native machine language. This problem is mitigated by just-in-time (JIT) compilers for executing Java bytecode. A JIT compiler may translate Java bytecode into native machine language while executing the program. The translated parts of the program can then be executed much more quickly than they could be interpreted.  This technique gets applied to those parts of a program frequently executed. This way a JIT compiler can significantly speed up the overall execution time.\n\nThere is no necessary connection between the Java programming language and Java bytecode. A program written in Java can be compiled directly into the machine language of a real computer and programs written in other languages than Java can be compiled into Java bytecode.\n\nJava bytecode is intended to be platform-independent and secure.David J. Eck, [http://math.hws.edu/javanotes/c1/s3.html Introduction to Programming Using Java], Seventh Edition, Version 7.0, August 2014 at Section 1.3 \"The Java Virtual Machine\" Some JVM implementations do not include an interpreter, but consist only of a just-in-time compiler.[http://docs.oracle.com/cd/E15289_01/doc.40/e15058/underst_jit.htm Oracle JRockit Introduction] Release R28 at 2. \"Understanding Just-In-Time Compilation and Optimization\"\n\nJVM in the web browser\n\nSince the very early stages of the design process, Java (and JVM) has been marketed as a web technology for creating Rich Internet Applications.\n\nJava applets \n\nOn the client side, web browsers may be extended with a NPAPI Java plugin which executes so called Java applets embedded into HTML pages. The applet is allowed to draw into a rectangular region on the page assigned to it and use a restricted set of APIs that allow for example access to user's microphone or 3D acceleration. Java applets were superior to JavaScript both in performance and features until approximately 2011, when JavaScript engines in browsers were made significantly faster and the HTML 5 suite of web technologies started enhancing JavaScript with new APIs. Java applets are not able to modify the page outside its rectangular region which is not true about JavaScript. Adobe Flash Player, the main competing technology, works in the same way in this respect. Java applets are not restricted to Java and in general can be created in any JVM language.\n\nAs of April 2014, Google Chrome does not allow the use of any NPAPI plugins. Mozilla Firefox will also ban NPAPI plugins by the end of 2016. This means that Java applets can no longer be used in either browser. Oracle ultimately announced in January 2016 that it will discontinue the Java web browser plugin effective Java 9.\n\n according to W3Techs, Java applet use had fallen to 0.1% of all web sites. Flash had fallen to 10.8% and Silverlight to 0.1% of web sites.\n\nJavaScript JVMs and interpreters\n\nAs of May 2016, JavaPoly allows users to import unmodified Java libraries, and invoke them directly from JavaScript.  JavaPoly allows websites to use run unmodified Java libraries, even if the user does not have Java installed on their computer.\n\nCompilation to JavaScript\n\nWith the continuing improvements in JavaScript execution speed, combined with the increased use of mobile devices whose web browsers do not implement support for plugins, there are efforts to target those users through compilation to JavaScript. It is possible to either compile the source code or JVM bytecode to JavaScript.\n\nCompiling the JVM bytecode, which is universal across JVM languages, allows building upon the language's existing compiler to bytecode. The main JVM bytecode to JavaScript compilers are TeaVM, the compiler contained in Dragome Web SDK, Bck2Brwsr, and j2js-compiler.Wolfgang Kuehn (decatur). [https://github.com/decatur/j2js-compiler j2js-compiler] GitHub\n\nLeading compilers from JVM languages to JavaScript include the Java-to-JavaScript compiler contained in Google Web Toolkit, Clojurescript (Clojure), GrooScript (Apache Groovy), Scala.js (Scala) and others.\n\nJava Runtime Environment\n\nThe Java Runtime Environment (JRE) released by Oracle is a software distribution containing a stand-alone Java VM (HotSpot), a browser plugin (discontinued since Java 9), the Java standard library (Java Class Library) and a configuration tool. It is the most common Java environment installed on Windows computers. It is freely available for download at the website java.com.\n\nPerformance\n\nThe JVM specification gives a lot of leeway to implementors regarding the implementation details. Since Java 1.3, JRE from Oracle contains a JVM called HotSpot. It has been designed to be a high-performance JVM.\n\nTo speed-up code execution, HotSpot relies on just-in-time compilation. To speed-up object allocation and garbage collection, HotSpot uses generational heap.\n\nGenerational heap \n\nThe Java virtual machine heap is the area of memory used by the JVM for dynamic memory allocation.\n\nIn HotSpot the heap is divided into generations:\n* The young generation stores short-lived objects that are created and immediately garbage collected.\n* Objects that persist longer are moved to the old generation (also called the tenured generation). This memory is subdivided into (two) Survivors spaces where the objects that survived the first and next garbage collections are stored.\n\nThe permanent generation (or permgen) was used for class definitions and associated metadata prior to Java 8. Permanent generation was not part of the heap. The permanent generation was removed from Java 8.\n\nOriginally there was no permanent generation, and objects and classes were stored together in the same area. But as class unloading occurs much more rarely than objects are collected, moving class structures to a specific area allowed significant performance improvements.\n\nSecurity\n\nOracle's JRE is installed on a large number of computers. Since any web page the user visits may run Java applets, Java provides an easily accessible attack surface to malicious web sites that the user visits. Kaspersky Labs reports that the Java web browser plugin is the method of choice for computer criminals. Java exploits are included in many exploit packs that hackers deploy onto hacked web sites.\n\nIn the past, end users were often using an out-of-date version of JRE which was vulnerable to many known attacks. This led to the widely shared belief between users that Java is inherently insecure. Since Java 1.7, Oracle's JRE for Windows includes automatic update functionality. Java virtual machine. http://en.wikipedia.org/?curid=16389."
  }
}
