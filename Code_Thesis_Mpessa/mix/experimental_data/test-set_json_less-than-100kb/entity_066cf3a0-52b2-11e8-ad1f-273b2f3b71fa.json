{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=13073",
  "eid" : "066cf3a0-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778520026,
  "textBody" : "The GNU Lesser General Public License (LGPL) is a free software license published by the Free Software Foundation (FSF). The license allows developers and companies to use and integrate software released under the LGPL into their own (even proprietary) software without being required by the terms of a strong copyleft license to release the source code of their own components. The license only requires software under the LGPL be modifiable by end users via source code availability. For proprietary software, code under the LGPL is usually used in the form of a shared library, so that there is a clear separation between the proprietary and LGPL components. The LGPL is primarily used for software libraries, although it is also used by some stand-alone applications.\n\nThe LGPL was developed as a compromise between the strong copyleft of the GNU General Public License (GPL) and more permissive licenses such as the BSD licenses and the MIT License. The word \"Lesser\" in the title shows that the LGPL does not guarantee the end user's complete freedom in the use of software; it only guarantees the freedom of modification for components licensed under the LGPL, but not for any proprietary components.\n\nHistory\n\nThe license was originally called the GNU Library General Public License and was first published in 1991, and adopted the version number 2 for parity with GPL version 2. The LGPL was revised in minor ways in the 2.1 point release, published in 1999, when it was renamed the GNU Lesser General Public License to reflect the FSF's position that not all libraries should use it. Version 3 of the LGPL was published in 2007 as a list of additional permissions applied to GPL version 3.\n\nDifferences from the GPL\n\nThe main difference between the GPL and the LGPL is that the latter allows the work to be linked with (in the case of a library, \"used by\") a non-(L)GPLed program, regardless of whether it is free software or proprietary software.Stallman, Richard. [http://www.fsf.org/licensing/licenses/why-not-lgpl.html Why you shouldn't use the Lesser GPL for your next library]. Free Software Foundation official website. The non-(L)GPLed program can then be distributed under any terms if it is not a derivative work. If it is a derivative work, then the program's terms must allow for \"modification for the customer's own use and reverse engineering for debugging such modifications.\" Whether a work that uses an LGPL program is a derivative work or not is a legal issue. A standalone executable that dynamically links to a library through a .so, .dll, or similar medium is generally accepted as not being a derivative work as defined by the LGPL. It would fall under the definition of a \"work that uses the Library\". Paragraph 5 of the LGPL version 2.1 states:\n\nA program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nEssentially, if it is a \"work that uses the library\", then it must be possible for the software to be linked with a newer version of the LGPL-covered program. The most commonly used method for doing so is to use \"a suitable shared library mechanism for linking\". Alternatively, a statically linked library is allowed if either source code or linkable object files are provided.[https://www.gnu.org/copyleft/lesser.html#section4 Gnu Lesser General Public License, Section 4], pt. d) 0)\n\nCompatibility\n\nOne feature of the LGPL is the permission to relicense under the GPL any piece of software which is received under the LGPL (see section 3 of the LGPL version 2.1, and section 2 option b of the LGPL version 3). This feature allows for direct reuse of LGPLed code in GPLed libraries and applications.\n\nVersion 3 of the LGPL is not inherently compatible with version 2 of the GPL.  However, works using the latter that have given permission to use a later version of the GPL are compatible:[https://www.gnu.org/licenses/license-list.html#LGPL GNU Lesser General Public License (LGPL) version 3]. Free Software Foundation official website. a work released under the GPLv2 \"or any later version\" may be combined with code from a LGPL version 3 library, with the combined work as a whole falling under the terms of the GPLv3.[https://www.gnu.org/licenses/gpl-faq.html#gpl-compat-matrix Frequently Asked Questions about the GNU Licenses - GNU Project - Free Software Foundation]. Free Software Foundation official website.\n\nLGPL for libraries\n\nThe former name \"GNU Library General Public License\" gave some the impression that the FSF recommended software libraries use the LGPL and that programs use the GPL. In February 1999, GNU Project leader Richard Stallman wrote the essay Why you shouldn't use the Lesser GPL for your next library explaining that the LGPL had not been deprecated, but that one should not necessarily use the LGPL for all libraries:\n\nWhich license is best for a given library is a matter of strategy... Using the ordinary GPL for a library gives free software developers an advantage over proprietary developers: a library that they can use, while proprietary developers cannot use it... When a free library's features are readily available for proprietary software through other alternative libraries... the library cannot give free software any particular advantage, so it is better to use the Lesser GPL for that library.\n\nStallman and the FSF sometimes advocate licenses even less restrictive than the LGPL as a matter of strategy. A prominent example was Stallman's endorsement of the use of a BSD-style license by the Vorbis project for use in its libraries.Stallman, Richard. [https://lwn.net/2001/0301/a/rms-ov-license.php3 Re: [open-source] [Fwd: [icecast-dev] Xiph.org announces Vorbis Beta 4 and the Xiph.org]\n\nProgramming language specifications\n\nThe license uses terminology which is mainly intended for applications written in the C programming language or its family. Franz Inc. published its own preamble to the license to clarify terminology in the Lisp context. LGPL with this preamble is sometimes referred as LLGPL.[http://opensource.franz.com/preamble.html Preamble to the Gnu Lesser General Public License]\n\nIn addition, Ada has a special feature, generics, which may prompt the use of GNAT Modified General Public License: it allows code to link against or instantiate GMGPL-covered units without the code itself becoming covered by the GPL.\n\nC++ templates and header-only libraries have the same problem as Ada generics. Version 3 of the LGPL addresses such cases in section 3.[https://listengine.tuxfamily.org/lists.tuxfamily.org/eigen/2008/02/msg00003.html LGPLv3 for a C++ Pure Template Library ?]\n\nClass inheritance\n\nSome concern has risen about the suitability of object-oriented classes in LGPL'd being inherited by non-(L)GPL code. Clarification is given on the official GNU website:\n\nThe LGPL does not  contain special provisions for inheritance, because none are needed. Inheritance creates derivative works in the same way as traditional linking, and the LGPL permits this type of derivative work in the same way as it permits ordinary function calls.Turner, David. [https://www.gnu.org/licenses/lgpl-java.html The LGPL and Java]. GNU official website.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "GNU Lesser General Public License" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=13073" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The GNU Lesser General Public License (LGPL) is a free software license published by the Free Software Foundation (FSF). The license allows developers and companies to use and integrate software released under the LGPL into their own (even proprietary) software without being required by the terms of a strong copyleft license to release the source code of their own components. The license only requires software under the LGPL be modifiable by end users via source code availability. For proprietary software, code under the LGPL is usually used in the form of a shared library, so that there is a clear separation between the proprietary and LGPL components. The LGPL is primarily used for software libraries, although it is also used by some stand-alone applications.\n\nThe LGPL was developed as a compromise between the strong copyleft of the GNU General Public License (GPL) and more permissive licenses such as the BSD licenses and the MIT License. The word \"Lesser\" in the title shows that the LGPL does not guarantee the end user's complete freedom in the use of software; it only guarantees the freedom of modification for components licensed under the LGPL, but not for any proprietary components.\n\nHistory\n\nThe license was originally called the GNU Library General Public License and was first published in 1991, and adopted the version number 2 for parity with GPL version 2. The LGPL was revised in minor ways in the 2.1 point release, published in 1999, when it was renamed the GNU Lesser General Public License to reflect the FSF's position that not all libraries should use it. Version 3 of the LGPL was published in 2007 as a list of additional permissions applied to GPL version 3.\n\nDifferences from the GPL\n\nThe main difference between the GPL and the LGPL is that the latter allows the work to be linked with (in the case of a library, \"used by\") a non-(L)GPLed program, regardless of whether it is free software or proprietary software.Stallman, Richard. [http://www.fsf.org/licensing/licenses/why-not-lgpl.html Why you shouldn't use the Lesser GPL for your next library]. Free Software Foundation official website. The non-(L)GPLed program can then be distributed under any terms if it is not a derivative work. If it is a derivative work, then the program's terms must allow for \"modification for the customer's own use and reverse engineering for debugging such modifications.\" Whether a work that uses an LGPL program is a derivative work or not is a legal issue. A standalone executable that dynamically links to a library through a .so, .dll, or similar medium is generally accepted as not being a derivative work as defined by the LGPL. It would fall under the definition of a \"work that uses the Library\". Paragraph 5 of the LGPL version 2.1 states:\n\nA program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\nEssentially, if it is a \"work that uses the library\", then it must be possible for the software to be linked with a newer version of the LGPL-covered program. The most commonly used method for doing so is to use \"a suitable shared library mechanism for linking\". Alternatively, a statically linked library is allowed if either source code or linkable object files are provided.[https://www.gnu.org/copyleft/lesser.html#section4 Gnu Lesser General Public License, Section 4], pt. d) 0)\n\nCompatibility\n\nOne feature of the LGPL is the permission to relicense under the GPL any piece of software which is received under the LGPL (see section 3 of the LGPL version 2.1, and section 2 option b of the LGPL version 3). This feature allows for direct reuse of LGPLed code in GPLed libraries and applications.\n\nVersion 3 of the LGPL is not inherently compatible with version 2 of the GPL.  However, works using the latter that have given permission to use a later version of the GPL are compatible:[https://www.gnu.org/licenses/license-list.html#LGPL GNU Lesser General Public License (LGPL) version 3]. Free Software Foundation official website. a work released under the GPLv2 \"or any later version\" may be combined with code from a LGPL version 3 library, with the combined work as a whole falling under the terms of the GPLv3.[https://www.gnu.org/licenses/gpl-faq.html#gpl-compat-matrix Frequently Asked Questions about the GNU Licenses - GNU Project - Free Software Foundation]. Free Software Foundation official website.\n\nLGPL for libraries\n\nThe former name \"GNU Library General Public License\" gave some the impression that the FSF recommended software libraries use the LGPL and that programs use the GPL. In February 1999, GNU Project leader Richard Stallman wrote the essay Why you shouldn't use the Lesser GPL for your next library explaining that the LGPL had not been deprecated, but that one should not necessarily use the LGPL for all libraries:\n\nWhich license is best for a given library is a matter of strategy... Using the ordinary GPL for a library gives free software developers an advantage over proprietary developers: a library that they can use, while proprietary developers cannot use it... When a free library's features are readily available for proprietary software through other alternative libraries... the library cannot give free software any particular advantage, so it is better to use the Lesser GPL for that library.\n\nStallman and the FSF sometimes advocate licenses even less restrictive than the LGPL as a matter of strategy. A prominent example was Stallman's endorsement of the use of a BSD-style license by the Vorbis project for use in its libraries.Stallman, Richard. [https://lwn.net/2001/0301/a/rms-ov-license.php3 Re: [open-source] [Fwd: [icecast-dev] Xiph.org announces Vorbis Beta 4 and the Xiph.org]\n\nProgramming language specifications\n\nThe license uses terminology which is mainly intended for applications written in the C programming language or its family. Franz Inc. published its own preamble to the license to clarify terminology in the Lisp context. LGPL with this preamble is sometimes referred as LLGPL.[http://opensource.franz.com/preamble.html Preamble to the Gnu Lesser General Public License]\n\nIn addition, Ada has a special feature, generics, which may prompt the use of GNAT Modified General Public License: it allows code to link against or instantiate GMGPL-covered units without the code itself becoming covered by the GPL.\n\nC++ templates and header-only libraries have the same problem as Ada generics. Version 3 of the LGPL addresses such cases in section 3.[https://listengine.tuxfamily.org/lists.tuxfamily.org/eigen/2008/02/msg00003.html LGPLv3 for a C++ Pure Template Library ?]\n\nClass inheritance\n\nSome concern has risen about the suitability of object-oriented classes in LGPL'd being inherited by non-(L)GPL code. Clarification is given on the official GNU website:\n\nThe LGPL does not  contain special provisions for inheritance, because none are needed. Inheritance creates derivative works in the same way as traditional linking, and the LGPL permits this type of derivative work in the same way as it permits ordinary function calls.Turner, David. [https://www.gnu.org/licenses/lgpl-java.html The LGPL and Java]. GNU official website. GNU Lesser General Public License. http://en.wikipedia.org/?curid=13073."
  }
}
