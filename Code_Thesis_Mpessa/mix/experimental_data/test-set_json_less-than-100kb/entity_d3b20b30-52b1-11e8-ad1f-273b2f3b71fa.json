{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=5295",
  "eid" : "d3b20b30-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778434915,
  "textBody" : "In computing character encoding is used to represent a repertoire of characters by some kind of encoding system.Definition from [http://techterms.com/definition/characterencoding The Tech Terms Dictionary] Depending on the abstraction level and context, corresponding code points and the resulting code space may be regarded as bit patterns, octets, natural numbers, electrical pulses, etc. A character encoding is used in computation, data storage, and transmission of textual data. \"Character set\", \"character map\", \"codeset\" and \"code page\" are related, but not identical, terms.\n\nEarly character codes associated with the optical or electrical telegraph could only represent a subset of the characters used in written languages, sometimes restricted to upper case letters, numerals and some punctuation only. The low cost of digital representation of data in modern computer systems allows more elaborate character codes (such as Unicode) which represent most of the characters used in many written languages. Character encoding using internationally accepted standards permits worldwide interchange of text in electronic form.\n\nHistory\n\nEarly binary repertoires include Bacon's cipher, Braille, International maritime signal flags, and the 4-digit encoding of Chinese characters for a Chinese telegraph code (Hans Schjellerup, 1869). Common examples of character encoding systems include Morse code, the Baudot code, the American Standard Code for Information Interchange (ASCII) and Unicode.\n\nMorse code was introduced in the 1840s and is used to encode each letter of the Latin alphabet, each Arabic numeral, and some other characters via a series of long and short presses of a telegraph key. Representations of characters encoded using Morse code varied in length.\n\nThe Baudot code, a five-bit encoding, was created by Ã‰mile Baudot in 1870, patented in 1874, modified by Donald Murray in 1901, and standardized by CCITT as International Telegraph Alphabet No. 2 (ITA2) in 1930.\n\nFieldata, a six- or seven-bit code, was introduced by the U.S. Army Signal Corps in the late 1950s.\n\nIBM's Binary Coded Decimal (BCD) was a six-bit encoding scheme used by IBM in as early as 1959 in its 1401 and 1620 computers, and in its 7000 Series (for example, 704, 7040, 709 and 7090 computers), as well as in associated peripherals. BCD extended existing simple four-bit numeric encoding to include alphabetic and special characters, mapping it easily to punch-card encoding which was already in widespread use. It was the precursor to EBCDIC.\n\nASCII was introduced in 1963 and is a seven-bit encoding scheme used to encode letters, numerals, symbols, and device control codes as fixed-length codes using integers.\n\nIBM's Extended Binary Coded Decimal Interchange Code (usually abbreviated as EBCDIC) is an eight-bit encoding scheme developed in 1963.\n\nThe limitations of such sets soon became apparent, and a number of ad hoc methods were developed to extend them. The need to support more writing systems for different languages, including the CJK family of East Asian scripts, required support for a far larger number of characters and demanded a systematic approach to character encoding rather than the previous ad hoc approaches.\n\nIn trying to develop universally interchangeable character encodings, researchers in the 1980s faced the dilemma that on the one hand, it seemed necessary to add more bits to accommodate additional characters, but on the other hand, for the users of the relatively small character set of the Latin alphabet (who still constituted the majority of computer users), those additional bits were a colossal waste of then-scarce and expensive computing resources (as they would always be zeroed out for such users).\n\nThe compromise solution that was eventually found and developed into Unicode was to break the assumption (dating back to telegraph codes) that each character should always directly correspond to a particular sequence of bits. Instead, characters would first be mapped to a universal intermediate representation in the form of abstract numbers called code points. Code points would then be represented in a variety of ways and with various default numbers of bits per character (code units) depending on context. To encode code points higher than the length of the code unit, such as above 256 for 8-bit units, the solution was to implement variable-width encodings where an escape sequence would signal that subsequent bits should be parsed as a higher code point.\n\nTerminology\n\nTerminology related to code unit:\n* A character is a minimal unit of text that has semantic value.\n* A character set is a collection of characters that might be used by multiple languages. \nExample: The Latin character set is used by English and most European languages, though the Greek character set is used only by the Greek language.\n* A coded character set is a character set in which each character corresponds to a unique number.\n* A code point of a coded character set is any allowed value in the character set.\n* A code unit is a bit sequence used to encode each character of a repertoire within a given encoding form.\n\n; Character repertoire (the abstract set of characters):\n\nThe character repertoire is an abstract set of more than one million characters found in a wide variety of scripts including Latin, Cyrillic, Chinese, Korean, Japanese, Hebrew, and Aramaic.\n\nOther symbols such as musical notation are also included in the character repertoire. Both the Unicode and GB18030 standards have a character repertoire. As new characters are added to one standard, the other standard also adds those characters, to maintain parity.\n\nThe code unit size is equivalent to the bit measurement for the particular encoding:\n* A code unit in US-ASCII consists of 7 bits;\n* A code unit in UTF-8, EBCDIC and GB18030 consists of 8 bits;\n* A code unit in UTF-16 consists of 16 bits;\n* A code unit in UTF-32 consists of 32 bits.\n\nExample of a code unit: Consider a string of the letters \"abc\" followed by  (represented with 1 char32_t, 2 char16_t or 4 char8_t). That string contains:\n* four characters;\n* four code points\n* either:\n*: four code units in UTF-32 (00000061, 00000062, 00000063, 00010400)\n*: five code units in UTF-16 (0061, 0062, 0063, d801, dc00), or\n*: seven code units in UTF-8  (61, 62, 63, f0, 90, 90, 80).\n\nTo express a character in Unicode, the hexadecimal value is prefixed with the string 'U+'. The range of valid code points for the Unicode standard is U+0000 to U+10FFFF, inclusive, divided in 17 planes, identified by the numbers 0 to 16. Characters in the range U+0000 to U+FFFF are in the plane 0, called the Basic Multilingual Plane (BMP). This plane contains most commonly-used characters. Characters in the range U+10000 to U+10FFFF in the other planes are called supplementary characters.\n\nThe following table shows examples of code point values:\n\nA code point is represented by a sequence of code units. The mapping is defined by the encoding. Thus, the number of code units required to represent a code point depends on the encoding:\n* UTF-8: code points map to a sequence of one, two, three or four code units.\n* UTF-16: code units are twice as long as 8-bit code units. Therefore, any code point with a scalar value less than U+10000 are encoded with a single code unit. Code points with a value U+10000 or higher require two code units each. These pairs of code units have a unique term in UTF-16: \"Unicode surrogate pairs\".\n* UTF-32: the 32-bit code unit is large enough that every code point is represented as a single code unit.\n* GB18030: multiple code units per code point are common, because of the small code units. Code points are mapped to one, two, or four code units.http://docs.oracle.com/javase/tutorial/i18n/text/terminology.html\n\nUnicode encoding model\n\nUnicode and its parallel standard, the ISO/IEC 10646 Universal Character Set, together constitute a modern, unified character encoding. Rather than mapping characters directly to octets (bytes), they separately define what characters are available, corresponding natural numbers (code points), how those numbers are encoded as a series of fixed-size natural numbers (code units), and finally how those units are encoded as a stream of octets. The purpose of this decomposition is to establish a universal set of characters that can be encoded in a variety of ways. To describe this model correctly requires more precise terms than \"character set\" and \"character encoding.\" The terms used in the modern model follow:\n\nA character repertoire is the full set of abstract characters that a system supports. The repertoire may be closed, i.e. no additions are allowed without creating a new standard (as is the case with ASCII and most of the ISO-8859 series), or it may be open, allowing additions (as is the case with Unicode and to a limited extent the Windows code pages). The characters in a given repertoire reflect decisions that have been made about how to divide writing systems into basic information units. The basic variants of the Latin, Greek and Cyrillic alphabets can be broken down into letters, digits, punctuation, and a few special characters such as the space, which can all be arranged in simple linear sequences that are displayed in the same order they are read. But even with these alphabets, diacritics pose a complication: they can be regarded either as part of a single character containing a letter and diacritic (known as a precomposed character), or as separate characters. The former allows a far simpler text handling system but the latter allows any letter/diacritic combination to be used in text. Ligatures pose similar problems. Other writing systems, such as Arabic and Hebrew, are represented with more complex character repertoires due to the need to accommodate things like bidirectional text and glyphs that are joined together in different ways for different situations.\n\nA coded character set (CCS) is a function that maps characters to code points (each code point represents one character). For example, in a given repertoire, the capital letter \"A\" in the Latin alphabet might be represented by the code point 65, the character \"B\" to 66, and so on. Multiple coded character sets may share the same repertoire; for example ISO/IEC 8859-1 and IBM code pages 037 and 500 all cover the same repertoire but map them to different code points.\n\nA character encoding form (CEF) is the mapping of code points to code units to facilitate storage in a system that represents numbers as bit sequences of fixed length (i.e. practically any computer system). For example, a system that stores numeric information in 16-bit units can only directly represent code points 0 to 65,535 in each unit, but larger code points (say, 65,536 to 1.4Â million) could be represented by using multiple 16-bit units. This correspondence is defined by a CEF.\n\nNext, a character encoding scheme (CES) is the mapping of code units to a sequence of octets to facilitate storage on an octet-based file system or transmission over an octet-based network. Simple character encoding schemes include UTF-8, UTF-16BE, UTF-32BE, UTF-16LE or UTF-32LE; compound character encoding schemes, such as UTF-16, UTF-32 and ISO/IEC 2022, switch between several simple schemes by using byte order marks or escape sequences; compressing schemes try to minimise the number of bytes used per code unit (such as SCSU, BOCU, and Punycode).\n\nAlthough UTF-32BE is a simpler CES, most systems working with Unicode use either UTF-8, which is backward compatible with fixed-width ASCII and maps Unicode code points to variable-width sequences of octets, or UTF-16BE, which is backward compatible with fixed-width UCS-2BE and maps Unicode code points to variable-width sequences of 16-bit words. See comparison of Unicode encodings for a detailed discussion.\n\nFinally, there may be a higher level protocol which supplies additional information to select the particular variant of a Unicode character, particularly where there are regional variants that have been 'unified' in Unicode as the same character. An example is the XML attribute xml:lang.\n\nThe Unicode model uses the term character map for historical systems which directly assign a sequence of characters to a sequence of bytes, covering all of CCS, CEF and CES layers.\n\nCharacter sets, character maps and code pages \n\nHistorically, the terms \"character encoding\", \"character map\", \"character set\" and \"code page\" were synonymous in computer science, as the same standard would specify a repertoire of characters and how they were to be encoded into a stream of code units â€“ usually with a single character per code unit. But now the terms have related but distinct meanings, due to efforts by standards bodies to use precise terminology when writing about and unifying many different encoding systems. Regardless, the terms are still used interchangeably, with character set being nearly ubiquitous.\n\nA \"code page\" usually means a byte-oriented encoding, but with regard to some suite of encodings (covering different scripts), where many characters share the same codes in most or all those code pages. Well-known code page suites are \"Windows\" (based on Windows-1252) and \"IBM\"/\"DOS\" (based on code page 437), see Windows code page for details. Most, but not all, encodings referred to as code pages are single-byte encodings (but see octet on byte size.)\n\nIBM's Character Data Representation Architecture (CDRA) designates with coded character set identifiers (CCSIDs) and each of which is variously called a \"charset\", \"character set\", \"code page\", or \"CHARMAP\".\n\nThe term \"code page\" does not occur in Unix or Linux where \"charmap\" is preferred, usually in the larger context of locales.\n\nContrasted to CCS above, a \"character encoding\" is a map from abstract characters to code words. A \"character set\" in HTTP (and MIME) parlance is the same as a character encoding (but not the same as CCS).\n\n\"Legacy encoding\" is a term sometimes used to characterize old character encodings, but with an ambiguity of sense. Most of its use is in the context of Unicodification, where it refers to encodings that fail to cover all Unicode code points, or, more generally, using a somewhat different character repertoire: several code points representing one Unicode character,[http://www.basistech.co.jp/knowledge-center/database/uc-trillium-2.ppt \"Processing database information using Unicode, a case study\"]  or versa (see e.g. code page 437). Some sources refer to an encoding as legacy only because it preceded Unicode. All Windows code pages are usually referred to as legacy, both because they antedate Unicode and because they are unable to represent all 221 possible Unicode code points.\n\nCharacter encoding translation \n\nAs a result of having many character encoding methods in use (and the need for backward compatibility with archived data), many computer programs have been developed to translate data between encoding schemes as a form of data transcoding. Some of these are cited below.\n\nCross-platform:\n* Web browsers â€“ most modern web browsers feature automatic character encoding detection. On Firefox 3, for example, see the View/Character Encoding submenu.\n* iconv â€“ program and standardized API to convert encodings\n* luit â€“ program that converts encoding of input and output to programs running interactively\n* convert_encoding.py â€“ Python based utility to convert text files between arbitrary encodings and line endings.[https://github.com/goerz/convert_encoding.py convert_encoding.py]\n* decodeh.py â€“ algorithm and module to heuristically guess the encoding of a string.[http://gizmojo.org/code/decodeh/ Decodeh â€“ heuristically decode a string or text file] \n* International Components for Unicode â€“ A set of C and Java libraries to perform charset conversion. uconv can be used from ICU4C.\n* [http://pypi.python.org/pypi/chardet chardet] â€“ This is a translation of the Mozilla automatic-encoding-detection code into the Python computer language.\n* The newer versions of the Unix file command attempt to do a basic detection of character encoding (also available on Cygwin).\n* [http://sourceforge.net/projects/charset charset] â€“ C++ template library with simple interface to convert between C++/user-defined streams. charset defined many character-sets and allows you to use Unicode formats with support of endianness.\nUnix-like: \n* cmv â€“ simple tool for transcoding filenames.[http://cmv.fossrec.com CharsetMove â€“ Simple Tool for Transcoding Filenames]\n* convmv â€“ convert a filename from one encoding to another.[http://www.j3e.de/linux/convmv/man/ Convmv â€“ converts filenames from one encoding to another]\n* cstocs â€“ convert file contents from one encoding to another for the Czech and Slovak languages.\n* enca â€“ analyzes encodings for given text files.[http://directory.fsf.org/project/enca/ Extremely Naive Charset Analyser]\n* recode â€“ convert file contents from one encoding to another[https://www.gnu.org/software/recode/recode.html Recode â€“ GNU project â€“ Free Software Foundation (FSF)]\n* utrac â€“ convert file contents from one encoding to another.[http://utrac.sourceforge.net/ Utrac Homepage]\n\nWindows:\n* Encoding.Convert â€“ .NET API[http://msdn.microsoft.com/en-us/library/system.text.encoding.convert(VS.71).aspx Microsoft .NET Framework Class Library â€“ Encoding.Convert Method]\n* MultiByteToWideChar/WideCharToMultiByte â€“ Convert from ANSI to Unicode & Unicode to ANSI[http://support.microsoft.com/kb/138813 MultiByteToWideChar/WideCharToMultiByte â€“ Convert from ANSI to Unicode & Unicode to ANSI]\n* cscvt â€“ character set conversion tool[http://www.cscvt.de/ Kalytta's Character Set Converter]\n* enca â€“ analyzes encodings for given text files.[http://www.john.geek.nz/2010/02/enca-binary-compiled-for-32-bit-windows/ Extremely Naive Charset Analyser]",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Character encoding" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=5295" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In computing character encoding is used to represent a repertoire of characters by some kind of encoding system.Definition from [http://techterms.com/definition/characterencoding The Tech Terms Dictionary] Depending on the abstraction level and context, corresponding code points and the resulting code space may be regarded as bit patterns, octets, natural numbers, electrical pulses, etc. A character encoding is used in computation, data storage, and transmission of textual data. \"Character set\", \"character map\", \"codeset\" and \"code page\" are related, but not identical, terms.\n\nEarly character codes associated with the optical or electrical telegraph could only represent a subset of the characters used in written languages, sometimes restricted to upper case letters, numerals and some punctuation only. The low cost of digital representation of data in modern computer systems allows more elaborate character codes (such as Unicode) which represent most of the characters used in many written languages. Character encoding using internationally accepted standards permits worldwide interchange of text in electronic form.\n\nHistory\n\nEarly binary repertoires include Bacon's cipher, Braille, International maritime signal flags, and the 4-digit encoding of Chinese characters for a Chinese telegraph code (Hans Schjellerup, 1869). Common examples of character encoding systems include Morse code, the Baudot code, the American Standard Code for Information Interchange (ASCII) and Unicode.\n\nMorse code was introduced in the 1840s and is used to encode each letter of the Latin alphabet, each Arabic numeral, and some other characters via a series of long and short presses of a telegraph key. Representations of characters encoded using Morse code varied in length.\n\nThe Baudot code, a five-bit encoding, was created by Ã‰mile Baudot in 1870, patented in 1874, modified by Donald Murray in 1901, and standardized by CCITT as International Telegraph Alphabet No. 2 (ITA2) in 1930.\n\nFieldata, a six- or seven-bit code, was introduced by the U.S. Army Signal Corps in the late 1950s.\n\nIBM's Binary Coded Decimal (BCD) was a six-bit encoding scheme used by IBM in as early as 1959 in its 1401 and 1620 computers, and in its 7000 Series (for example, 704, 7040, 709 and 7090 computers), as well as in associated peripherals. BCD extended existing simple four-bit numeric encoding to include alphabetic and special characters, mapping it easily to punch-card encoding which was already in widespread use. It was the precursor to EBCDIC.\n\nASCII was introduced in 1963 and is a seven-bit encoding scheme used to encode letters, numerals, symbols, and device control codes as fixed-length codes using integers.\n\nIBM's Extended Binary Coded Decimal Interchange Code (usually abbreviated as EBCDIC) is an eight-bit encoding scheme developed in 1963.\n\nThe limitations of such sets soon became apparent, and a number of ad hoc methods were developed to extend them. The need to support more writing systems for different languages, including the CJK family of East Asian scripts, required support for a far larger number of characters and demanded a systematic approach to character encoding rather than the previous ad hoc approaches.\n\nIn trying to develop universally interchangeable character encodings, researchers in the 1980s faced the dilemma that on the one hand, it seemed necessary to add more bits to accommodate additional characters, but on the other hand, for the users of the relatively small character set of the Latin alphabet (who still constituted the majority of computer users), those additional bits were a colossal waste of then-scarce and expensive computing resources (as they would always be zeroed out for such users).\n\nThe compromise solution that was eventually found and developed into Unicode was to break the assumption (dating back to telegraph codes) that each character should always directly correspond to a particular sequence of bits. Instead, characters would first be mapped to a universal intermediate representation in the form of abstract numbers called code points. Code points would then be represented in a variety of ways and with various default numbers of bits per character (code units) depending on context. To encode code points higher than the length of the code unit, such as above 256 for 8-bit units, the solution was to implement variable-width encodings where an escape sequence would signal that subsequent bits should be parsed as a higher code point.\n\nTerminology\n\nTerminology related to code unit:\n* A character is a minimal unit of text that has semantic value.\n* A character set is a collection of characters that might be used by multiple languages. \nExample: The Latin character set is used by English and most European languages, though the Greek character set is used only by the Greek language.\n* A coded character set is a character set in which each character corresponds to a unique number.\n* A code point of a coded character set is any allowed value in the character set.\n* A code unit is a bit sequence used to encode each character of a repertoire within a given encoding form.\n\n; Character repertoire (the abstract set of characters):\n\nThe character repertoire is an abstract set of more than one million characters found in a wide variety of scripts including Latin, Cyrillic, Chinese, Korean, Japanese, Hebrew, and Aramaic.\n\nOther symbols such as musical notation are also included in the character repertoire. Both the Unicode and GB18030 standards have a character repertoire. As new characters are added to one standard, the other standard also adds those characters, to maintain parity.\n\nThe code unit size is equivalent to the bit measurement for the particular encoding:\n* A code unit in US-ASCII consists of 7 bits;\n* A code unit in UTF-8, EBCDIC and GB18030 consists of 8 bits;\n* A code unit in UTF-16 consists of 16 bits;\n* A code unit in UTF-32 consists of 32 bits.\n\nExample of a code unit: Consider a string of the letters \"abc\" followed by  (represented with 1 char32_t, 2 char16_t or 4 char8_t). That string contains:\n* four characters;\n* four code points\n* either:\n*: four code units in UTF-32 (00000061, 00000062, 00000063, 00010400)\n*: five code units in UTF-16 (0061, 0062, 0063, d801, dc00), or\n*: seven code units in UTF-8  (61, 62, 63, f0, 90, 90, 80).\n\nTo express a character in Unicode, the hexadecimal value is prefixed with the string 'U+'. The range of valid code points for the Unicode standard is U+0000 to U+10FFFF, inclusive, divided in 17 planes, identified by the numbers 0 to 16. Characters in the range U+0000 to U+FFFF are in the plane 0, called the Basic Multilingual Plane (BMP). This plane contains most commonly-used characters. Characters in the range U+10000 to U+10FFFF in the other planes are called supplementary characters.\n\nThe following table shows examples of code point values:\n\nA code point is represented by a sequence of code units. The mapping is defined by the encoding. Thus, the number of code units required to represent a code point depends on the encoding:\n* UTF-8: code points map to a sequence of one, two, three or four code units.\n* UTF-16: code units are twice as long as 8-bit code units. Therefore, any code point with a scalar value less than U+10000 are encoded with a single code unit. Code points with a value U+10000 or higher require two code units each. These pairs of code units have a unique term in UTF-16: \"Unicode surrogate pairs\".\n* UTF-32: the 32-bit code unit is large enough that every code point is represented as a single code unit.\n* GB18030: multiple code units per code point are common, because of the small code units. Code points are mapped to one, two, or four code units.http://docs.oracle.com/javase/tutorial/i18n/text/terminology.html\n\nUnicode encoding model\n\nUnicode and its parallel standard, the ISO/IEC 10646 Universal Character Set, together constitute a modern, unified character encoding. Rather than mapping characters directly to octets (bytes), they separately define what characters are available, corresponding natural numbers (code points), how those numbers are encoded as a series of fixed-size natural numbers (code units), and finally how those units are encoded as a stream of octets. The purpose of this decomposition is to establish a universal set of characters that can be encoded in a variety of ways. To describe this model correctly requires more precise terms than \"character set\" and \"character encoding.\" The terms used in the modern model follow:\n\nA character repertoire is the full set of abstract characters that a system supports. The repertoire may be closed, i.e. no additions are allowed without creating a new standard (as is the case with ASCII and most of the ISO-8859 series), or it may be open, allowing additions (as is the case with Unicode and to a limited extent the Windows code pages). The characters in a given repertoire reflect decisions that have been made about how to divide writing systems into basic information units. The basic variants of the Latin, Greek and Cyrillic alphabets can be broken down into letters, digits, punctuation, and a few special characters such as the space, which can all be arranged in simple linear sequences that are displayed in the same order they are read. But even with these alphabets, diacritics pose a complication: they can be regarded either as part of a single character containing a letter and diacritic (known as a precomposed character), or as separate characters. The former allows a far simpler text handling system but the latter allows any letter/diacritic combination to be used in text. Ligatures pose similar problems. Other writing systems, such as Arabic and Hebrew, are represented with more complex character repertoires due to the need to accommodate things like bidirectional text and glyphs that are joined together in different ways for different situations.\n\nA coded character set (CCS) is a function that maps characters to code points (each code point represents one character). For example, in a given repertoire, the capital letter \"A\" in the Latin alphabet might be represented by the code point 65, the character \"B\" to 66, and so on. Multiple coded character sets may share the same repertoire; for example ISO/IEC 8859-1 and IBM code pages 037 and 500 all cover the same repertoire but map them to different code points.\n\nA character encoding form (CEF) is the mapping of code points to code units to facilitate storage in a system that represents numbers as bit sequences of fixed length (i.e. practically any computer system). For example, a system that stores numeric information in 16-bit units can only directly represent code points 0 to 65,535 in each unit, but larger code points (say, 65,536 to 1.4Â million) could be represented by using multiple 16-bit units. This correspondence is defined by a CEF.\n\nNext, a character encoding scheme (CES) is the mapping of code units to a sequence of octets to facilitate storage on an octet-based file system or transmission over an octet-based network. Simple character encoding schemes include UTF-8, UTF-16BE, UTF-32BE, UTF-16LE or UTF-32LE; compound character encoding schemes, such as UTF-16, UTF-32 and ISO/IEC 2022, switch between several simple schemes by using byte order marks or escape sequences; compressing schemes try to minimise the number of bytes used per code unit (such as SCSU, BOCU, and Punycode).\n\nAlthough UTF-32BE is a simpler CES, most systems working with Unicode use either UTF-8, which is backward compatible with fixed-width ASCII and maps Unicode code points to variable-width sequences of octets, or UTF-16BE, which is backward compatible with fixed-width UCS-2BE and maps Unicode code points to variable-width sequences of 16-bit words. See comparison of Unicode encodings for a detailed discussion.\n\nFinally, there may be a higher level protocol which supplies additional information to select the particular variant of a Unicode character, particularly where there are regional variants that have been 'unified' in Unicode as the same character. An example is the XML attribute xml:lang.\n\nThe Unicode model uses the term character map for historical systems which directly assign a sequence of characters to a sequence of bytes, covering all of CCS, CEF and CES layers.\n\nCharacter sets, character maps and code pages \n\nHistorically, the terms \"character encoding\", \"character map\", \"character set\" and \"code page\" were synonymous in computer science, as the same standard would specify a repertoire of characters and how they were to be encoded into a stream of code units â€“ usually with a single character per code unit. But now the terms have related but distinct meanings, due to efforts by standards bodies to use precise terminology when writing about and unifying many different encoding systems. Regardless, the terms are still used interchangeably, with character set being nearly ubiquitous.\n\nA \"code page\" usually means a byte-oriented encoding, but with regard to some suite of encodings (covering different scripts), where many characters share the same codes in most or all those code pages. Well-known code page suites are \"Windows\" (based on Windows-1252) and \"IBM\"/\"DOS\" (based on code page 437), see Windows code page for details. Most, but not all, encodings referred to as code pages are single-byte encodings (but see octet on byte size.)\n\nIBM's Character Data Representation Architecture (CDRA) designates with coded character set identifiers (CCSIDs) and each of which is variously called a \"charset\", \"character set\", \"code page\", or \"CHARMAP\".\n\nThe term \"code page\" does not occur in Unix or Linux where \"charmap\" is preferred, usually in the larger context of locales.\n\nContrasted to CCS above, a \"character encoding\" is a map from abstract characters to code words. A \"character set\" in HTTP (and MIME) parlance is the same as a character encoding (but not the same as CCS).\n\n\"Legacy encoding\" is a term sometimes used to characterize old character encodings, but with an ambiguity of sense. Most of its use is in the context of Unicodification, where it refers to encodings that fail to cover all Unicode code points, or, more generally, using a somewhat different character repertoire: several code points representing one Unicode character,[http://www.basistech.co.jp/knowledge-center/database/uc-trillium-2.ppt \"Processing database information using Unicode, a case study\"]  or versa (see e.g. code page 437). Some sources refer to an encoding as legacy only because it preceded Unicode. All Windows code pages are usually referred to as legacy, both because they antedate Unicode and because they are unable to represent all 221 possible Unicode code points.\n\nCharacter encoding translation \n\nAs a result of having many character encoding methods in use (and the need for backward compatibility with archived data), many computer programs have been developed to translate data between encoding schemes as a form of data transcoding. Some of these are cited below.\n\nCross-platform:\n* Web browsers â€“ most modern web browsers feature automatic character encoding detection. On Firefox 3, for example, see the View/Character Encoding submenu.\n* iconv â€“ program and standardized API to convert encodings\n* luit â€“ program that converts encoding of input and output to programs running interactively\n* convert_encoding.py â€“ Python based utility to convert text files between arbitrary encodings and line endings.[https://github.com/goerz/convert_encoding.py convert_encoding.py]\n* decodeh.py â€“ algorithm and module to heuristically guess the encoding of a string.[http://gizmojo.org/code/decodeh/ Decodeh â€“ heuristically decode a string or text file] \n* International Components for Unicode â€“ A set of C and Java libraries to perform charset conversion. uconv can be used from ICU4C.\n* [http://pypi.python.org/pypi/chardet chardet] â€“ This is a translation of the Mozilla automatic-encoding-detection code into the Python computer language.\n* The newer versions of the Unix file command attempt to do a basic detection of character encoding (also available on Cygwin).\n* [http://sourceforge.net/projects/charset charset] â€“ C++ template library with simple interface to convert between C++/user-defined streams. charset defined many character-sets and allows you to use Unicode formats with support of endianness.\nUnix-like: \n* cmv â€“ simple tool for transcoding filenames.[http://cmv.fossrec.com CharsetMove â€“ Simple Tool for Transcoding Filenames]\n* convmv â€“ convert a filename from one encoding to another.[http://www.j3e.de/linux/convmv/man/ Convmv â€“ converts filenames from one encoding to another]\n* cstocs â€“ convert file contents from one encoding to another for the Czech and Slovak languages.\n* enca â€“ analyzes encodings for given text files.[http://directory.fsf.org/project/enca/ Extremely Naive Charset Analyser]\n* recode â€“ convert file contents from one encoding to another[https://www.gnu.org/software/recode/recode.html Recode â€“ GNU project â€“ Free Software Foundation (FSF)]\n* utrac â€“ convert file contents from one encoding to another.[http://utrac.sourceforge.net/ Utrac Homepage]\n\nWindows:\n* Encoding.Convert â€“ .NET API[http://msdn.microsoft.com/en-us/library/system.text.encoding.convert(VS.71).aspx Microsoft .NET Framework Class Library â€“ Encoding.Convert Method]\n* MultiByteToWideChar/WideCharToMultiByte â€“ Convert from ANSI to Unicode & Unicode to ANSI[http://support.microsoft.com/kb/138813 MultiByteToWideChar/WideCharToMultiByte â€“ Convert from ANSI to Unicode & Unicode to ANSI]\n* cscvt â€“ character set conversion tool[http://www.cscvt.de/ Kalytta's Character Set Converter]\n* enca â€“ analyzes encodings for given text files.[http://www.john.geek.nz/2010/02/enca-binary-compiled-for-32-bit-windows/ Extremely Naive Charset Analyser]. Character encoding. http://en.wikipedia.org/?curid=5295."
  }
}
