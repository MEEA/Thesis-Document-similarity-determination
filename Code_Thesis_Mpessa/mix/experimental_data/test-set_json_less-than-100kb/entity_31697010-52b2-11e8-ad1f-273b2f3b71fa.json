{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=18171",
  "eid" : "31697010-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778592145,
  "textBody" : "In computer science, linear search or sequential search is a method for finding a target value within a list. It sequentially checks each element of the list for the target value until a match is found or until all the elements have been searched.\n\nLinear search runs in at worst linear time and makes at most  comparisons, where  is the length of the list. If each element is equally likely to be searched, then linear search has an average case of  comparisons, but the average case can be affected if the search probabilities for each element vary. Linear search is rarely practical because other search algorithms and schemes, such as the binary search algorithm and hash tables, allow significantly faster searching for all but short lists.\n\nAlgorithm\n\nLinear search sequentially checks each element of the list until it finds an element that matches the target value. If the algorithm reaches the end of the list, the search terminates unsuccessfully.\n\nBasic algorithm\n\nGiven a list  of  elements with values or records , and target value , the following subroutine uses linear search to find the index of the target  in .\n\n#Set  to 0.\n#If , the search terminates successfully; return .\n#Increase  by 1.\n#If , go to step 2. Otherwise, the search terminates unsuccessfully.\n\nWith a sentinel\n\nThe basic algorithm above makes two comparisons per iteration: one to check if  equals , and the other to check if  still points to a valid index of the list. By adding an extra record  to the list (a sentinel value) that equals the target, the second comparison can be eliminated until the end of the search, making the algorithm faster. The search will reach the sentinel if the target is not contained within the list.\n\n#Set  to 0.\n#If , go to step 4.\n#Increase  by 1 and go to step 2.\n#If , the search terminates successfully; return . Else, the search terminates unsuccessfully.\n\nIn an ordered table\n\nIf the list is ordered such that , the search can establish the absence of the target more quickly by concluding the search once  exceeds the target. This variation requires a sentinel that is greater than the target.\n\n#Set  to 0.\n#If , go to step 4.\n#Increase  by 1 and go to step 2.\n#If , the search terminates successfully; return . Else, the search terminates unsuccessfully.\n\nAnalysis\n\nFor a list with n items, the best case is when the value is equal to the first element of the list, in which case only one comparison is needed. The worst case is when the value is not in the list (or occurs only once at the end of the list), in which case n comparisons are needed.\n\nIf the value being sought occurs k times in the list, and all orderings of the list are equally likely, the expected number of comparisons is\n\n\\begin{cases} \n  n                   & \\mbox{if } k = 0 \\\\[5pt]\n  \\displaystyle\\frac{n + 1}{k + 1} & \\mbox{if } 1 \\le k \\le n.\n\\end{cases}\n\nFor example, if the value being sought occurs once in the list, and all orderings of the list are equally likely, the expected number of comparisons is \\frac{n + 1}2. However, if it is known that it occurs once, then at most n - 1 comparisons are needed, and the expected number of comparisons is \n\\displaystyle\\frac{(n + 2)(n-1)}{2n}\n\n(for example, for n = 2 this is 1, corresponding to a single if-then-else construct).\n\nEither way, asymptotically the worst-case cost and the expected cost of linear search are both O(n).\n\nNon-uniform probabilities\n\nThe performance of linear search improves if the desired value is more likely to be near the beginning of the list than to its end.  Therefore, if some values are much more likely to be searched than others,  it is desirable to place them at the beginning of the list.\n\nIn particular, when the list items are arranged in order of decreasing probability, and these probabilities are geometrically distributed, the cost of linear search is only O(1).  If the table size n is large enough, linear search will be faster than binary search, whose cost is O(log n).\n  \n\nApplication\n\nLinear search is usually very simple to implement, and is practical when the list has only a few elements, or when performing a single search in an unordered list.\n\nWhen many values have to be searched in the same list, it often pays to pre-process the list in order to use a faster method. For example, one may sort the list and use binary search, or build an efficient search data structure from it. Should the content of the list change frequently, repeated re-organization may be more trouble than it is worth.\n\nAs a result, even though in theory other search algorithms may be faster than linear search (for instance binary search), in practice even on medium-sized arrays (around 100 items or less) it might be infeasible to use anything else. On larger arrays, it only makes sense to use other, faster search methods if the data is large enough, because the initial time to prepare (sort) the data is comparable to many linear searches",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Linear search" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=18171" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In computer science, linear search or sequential search is a method for finding a target value within a list. It sequentially checks each element of the list for the target value until a match is found or until all the elements have been searched.\n\nLinear search runs in at worst linear time and makes at most  comparisons, where  is the length of the list. If each element is equally likely to be searched, then linear search has an average case of  comparisons, but the average case can be affected if the search probabilities for each element vary. Linear search is rarely practical because other search algorithms and schemes, such as the binary search algorithm and hash tables, allow significantly faster searching for all but short lists.\n\nAlgorithm\n\nLinear search sequentially checks each element of the list until it finds an element that matches the target value. If the algorithm reaches the end of the list, the search terminates unsuccessfully.\n\nBasic algorithm\n\nGiven a list  of  elements with values or records , and target value , the following subroutine uses linear search to find the index of the target  in .\n\n#Set  to 0.\n#If , the search terminates successfully; return .\n#Increase  by 1.\n#If , go to step 2. Otherwise, the search terminates unsuccessfully.\n\nWith a sentinel\n\nThe basic algorithm above makes two comparisons per iteration: one to check if  equals , and the other to check if  still points to a valid index of the list. By adding an extra record  to the list (a sentinel value) that equals the target, the second comparison can be eliminated until the end of the search, making the algorithm faster. The search will reach the sentinel if the target is not contained within the list.\n\n#Set  to 0.\n#If , go to step 4.\n#Increase  by 1 and go to step 2.\n#If , the search terminates successfully; return . Else, the search terminates unsuccessfully.\n\nIn an ordered table\n\nIf the list is ordered such that , the search can establish the absence of the target more quickly by concluding the search once  exceeds the target. This variation requires a sentinel that is greater than the target.\n\n#Set  to 0.\n#If , go to step 4.\n#Increase  by 1 and go to step 2.\n#If , the search terminates successfully; return . Else, the search terminates unsuccessfully.\n\nAnalysis\n\nFor a list with n items, the best case is when the value is equal to the first element of the list, in which case only one comparison is needed. The worst case is when the value is not in the list (or occurs only once at the end of the list), in which case n comparisons are needed.\n\nIf the value being sought occurs k times in the list, and all orderings of the list are equally likely, the expected number of comparisons is\n\n\\begin{cases} \n  n                   & \\mbox{if } k = 0 \\\\[5pt]\n  \\displaystyle\\frac{n + 1}{k + 1} & \\mbox{if } 1 \\le k \\le n.\n\\end{cases}\n\nFor example, if the value being sought occurs once in the list, and all orderings of the list are equally likely, the expected number of comparisons is \\frac{n + 1}2. However, if it is known that it occurs once, then at most n - 1 comparisons are needed, and the expected number of comparisons is \n\\displaystyle\\frac{(n + 2)(n-1)}{2n}\n\n(for example, for n = 2 this is 1, corresponding to a single if-then-else construct).\n\nEither way, asymptotically the worst-case cost and the expected cost of linear search are both O(n).\n\nNon-uniform probabilities\n\nThe performance of linear search improves if the desired value is more likely to be near the beginning of the list than to its end.  Therefore, if some values are much more likely to be searched than others,  it is desirable to place them at the beginning of the list.\n\nIn particular, when the list items are arranged in order of decreasing probability, and these probabilities are geometrically distributed, the cost of linear search is only O(1).  If the table size n is large enough, linear search will be faster than binary search, whose cost is O(log n).\n  \n\nApplication\n\nLinear search is usually very simple to implement, and is practical when the list has only a few elements, or when performing a single search in an unordered list.\n\nWhen many values have to be searched in the same list, it often pays to pre-process the list in order to use a faster method. For example, one may sort the list and use binary search, or build an efficient search data structure from it. Should the content of the list change frequently, repeated re-organization may be more trouble than it is worth.\n\nAs a result, even though in theory other search algorithms may be faster than linear search (for instance binary search), in practice even on medium-sized arrays (around 100 items or less) it might be infeasible to use anything else. On larger arrays, it only makes sense to use other, faster search methods if the data is large enough, because the initial time to prepare (sort) the data is comparable to many linear searches. Linear search. http://en.wikipedia.org/?curid=18171."
  }
}
