{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=18826",
  "eid" : "34cb5fc0-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778597820,
  "textBody" : "The MD5 algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function, it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity, but only against unintentional corruption.\n\nLike most hash functions, MD5 is neither encryption nor encoding. It can be cracked by brute-force attack and suffers from extensive vulnerabilities as detailed in the security section below.\n\nMD5 was designed by Ronald Rivest in 1991 to replace an earlier hash function MD4. The source code in RFC 1321 contains a \"by attribution\" RSA license. The abbreviation \"MD\" stands for \"Message Digest.\"\n\nThe security of the MD5 has been severely compromised, with its weaknesses having been exploited in the field, most infamously by the Flame malware in 2012. The CMU Software Engineering Institute considers MD5 essentially \"cryptographically broken and unsuitable for further use\". Despite this known vulnerability, MD5 remains in use.\n\nHistory and cryptanalysis\n\nMD5 is one in a series of message digest algorithms designed by Professor Ronald Rivest of MIT (Rivest, 1992).  When analytic work indicated that MD5's predecessor MD4 was likely to be insecure, Rivest designed MD5 in 1991 as a secure replacement. (Hans Dobbertin did indeed later find weaknesses in MD4.)\n\nIn 1993, Den Boer and Bosselaers gave an early, although limited, result of finding a \"pseudo-collision\" of the MD5 compression function; that is, two different initialization vectors that produce an identical digest.\n\nIn 1996, Dobbertin announced a collision of the compression function of MD5 (Dobbertin, 1996). While this was not an attack on the full MD5 hash function, it was close enough for cryptographers to recommend switching to a replacement, such as SHA-1 or RIPEMD-160.\n\nThe size of the hash value (128 bits) is small enough to contemplate a birthday attack. MD5CRK was a distributed project started in March 2004 with the aim of demonstrating that MD5 is practically insecure by finding a collision using a birthday attack.\n\nMD5CRK ended shortly after 17 August 2004, when collisions for the full MD5 were announced by Xiaoyun Wang, Dengguo Feng, Xuejia Lai, and Hongbo Yu.Philip Hawkes and Michael Paddon and Gregory G. Rose: [http://eprint.iacr.org/2004/264 Musings on the Wang et al. MD5 Collision], 13 October 2004. Retrieved 27 July 2008. Their analytical attack was reported to take only one hour on an IBM p690 cluster.\n\nOn 1 March 2005, Arjen Lenstra, Xiaoyun Wang, and Benne de Weger demonstrated construction of two X.509 certificates with different public keys and the same MD5 hash value, a demonstrably practical collision.Arjen Lenstra, Xiaoyun Wang, Benne de Weger: [http://eprint.iacr.org/2005/067 Colliding X.509 Certificates], Cryptology ePrint Archive Report 2005/067, 1 March 2005, revised 6 May 2005. Retrieved 27 July 2008. The construction included private keys for both public keys. A few days later, Vlastimil Klima described an improved algorithm, able to construct MD5 collisions in a few hours on a single notebook computer.Vlastimil Klima: [http://eprint.iacr.org/2005/075 Finding MD5 Collisions – a Toy For a Notebook], Cryptology ePrint Archive Report 2005/075, 5 March 2005, revised 8 March 2005. Retrieved 27 July 2008. On 18 March 2006, Klima published an algorithm that could find a collision within one minute on a single notebook computer, using a method he calls tunneling.Vlastimil Klima: [http://eprint.iacr.org/2006/105 Tunnels in Hash Functions: MD5 Collisions Within a Minute], Cryptology ePrint Archive Report 2006/105, 18 March 2006, revised 17 April 2006. Retrieved 27 July 2008.\n\nVarious MD5-related RFC errata have been published. \nIn 2009, the United States Cyber Command used an MD5 hash value of their mission statement as a part of their official emblem.\n\nOn 24 December 2010, Tao Xie and Dengguo Feng announced the first published single-block (512-bit) MD5 collision. (Previous collision discoveries had relied on multi-block attacks.) For \"security reasons\", Xie and Feng did not disclose the new attack method. They issued a challenge to the cryptographic community, offering a US$10,000 reward to the first finder of a different 64-byte collision before 1 January 2013. Marc Stevens responded to the challenge and published colliding single-block messages as well as the construction algorithm and sources.\n\nIn 2011 an informational RFC 6151 was approved to update the security considerations in MD5 and HMAC-MD5.\n\nSecurity\n\nThe security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 224.1). Further, there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using off-the-shelf computing hardware (complexity 239).\nThe ability to find collisions has been greatly aided by the use of off-the-shelf GPUs. On an NVIDIA GeForce 8400GS graphics processor, 16–18 million hashes per second can be computed. An NVIDIA GeForce 8800 Ultra can calculate more than 200 million hashes per second.\n\nThese hash and collision attacks have been demonstrated in the public in various situations, including colliding document files and digital certificates. As of 2015, MD5 was demonstrated to be still quite widely used, most notably by security research and antivirus companies.\n\nOverview of security issues \n\nIn 1996, a flaw was found in the design of MD5. While it was not deemed a fatal weakness at the time, cryptographers began recommending the use of other algorithms, such as SHA-1, which has since been found to be vulnerable as well.\nIn 2004 it was shown that MD5 is not collision-resistant. As such, MD5 is not suitable for applications like SSL certificates or digital signatures that rely on this property for digital security. Also in 2004 more serious flaws were discovered in MD5, making further use of the algorithm for security purposes questionable; specifically, a group of researchers described how to create a pair of files that share the same MD5 checksum.J. Black, M. Cochran, T. Highland: [http://www.cs.colorado.edu/~jrblack/papers/md5e-full.pdf A Study of the MD5 Attacks: Insights and Improvements], 3 March 2006. Retrieved 27 July 2008.Xiaoyun Wang, Dengguo ,k.,m.,m, HAVAL-128 and RIPEMD, Cryptology ePrint Archive Report 2004/199, 16 August 2004, revised 17 August 2004. Retrieved 27 July 2008. Further advances were made in breaking MD5 in 2005, 2006, and 2007.Marc Stevens, Arjen Lenstra, Benne de Weger: [http://www.win.tue.nl/hashclash/SoftIntCodeSign/ Vulnerability of software integrity and code signing applications to chosen-prefix collisions for MD5], 30 November 2007. Retrieved 27 July 2008. In December 2008, a group of researchers used this technique to fake SSL certificate validity. [https://events.ccc.de/congress/2008/Fahrplan/events/3023.en.html Announced] at the 25th Chaos Communication Congress.\n\nAs of 2010, the CMU Software Engineering Institute considers MD5 \"cryptographically broken and unsuitable for further use\", and most U.S. government applications now require the SHA-2 family of hash functions.  In 2012, the Flame malware exploited the weaknesses in MD5 to fake a Microsoft digital signature.\n\nCollision vulnerabilities\n\nIn 1996, collisions were found in the compression function of MD5, and Hans Dobbertin wrote in the RSA Laboratories technical newsletter, \"The presented attack does not yet threaten practical applications of MD5, but it comes rather close ... in the future MD5 should no longer be implemented ... where a collision-resistant hash function is required.\"\n\nIn 2005, researchers were able to create pairs of PostScript documents and X.509 certificates with the same hash. Later that year, MD5's designer Ron Rivest wrote that \"md5 and sha1 are both clearly broken (in terms of collision-resistance)\".\n\nOn 30 December 2008, a group of researchers announced at the 25th Chaos Communication Congress how they had used MD5 collisions to create an intermediate certificate authority certificate that appeared to be legitimate when checked by its MD5 hash. The researchers used a cluster of Sony PlayStation 3 units at the EPFL in Lausanne, Switzerland to change a normal SSL certificate issued by RapidSSL into a working CA certificate for that issuer, which could then be used to create other certificates that would appear to be legitimate and issued by RapidSSL. VeriSign, the issuers of RapidSSL certificates, said they stopped issuing new certificates using MD5 as their checksum algorithm for RapidSSL once the vulnerability was announced. Although Verisign declined to revoke existing certificates signed using MD5, their response was considered adequate by the authors of the exploit (Alexander Sotirov, Marc Stevens, Jacob Appelbaum, Arjen Lenstra, David Molnar, Dag Arne Osvik, and Benne de Weger). Bruce Schneier wrote of the attack that \"we already knew that MD5 is a broken hash function\" and that \"no one should be using MD5 anymore\". The SSL researchers wrote, \"Our desired impact is that Certification Authorities will stop using MD5 in issuing new certificates. We also hope that use of MD5 in other applications will be reconsidered as well.\"\n\nIn 2012, according to Microsoft, the authors of the Flame malware used an MD5 collision to forge a Windows code-signing certificate.\n\nMD5 uses the Merkle–Damgård construction, so if two prefixes with the same hash can be constructed, a common suffix can be added to both to make the collision more likely to be accepted as valid data by the application using it. Furthermore, current collision-finding techniques allow to specify an arbitrary prefix: an attacker can create two colliding files that both begin with the same content. All the attacker needs to generate two colliding files is a template file with a 128-byte block of data, aligned on a 64-byte boundary that can be changed freely by the collision-finding algorithm. An example MD5 collision, with the two messages differing in 6 bits, is:\n\n d131dd02c5e6eec4 693d9a0698aff95c 2fcab5712467eab 4004583eb8fb7f89\n 55ad340609f4b302 83e48883251415a 085125e8f7cdc99f d91dbd280373c5b\n d8823e3156348f5b ae6dacd436c919c6 dd53e2487da03fd 02396306d248cda0\n e99f33420f577ee8 ce54b6708080d1e c69821bcb6a88393 96f965b6ff72a70\n\n d131dd02c5e6eec4 693d9a0698aff95c 2fcab5712467eab 4004583eb8fb7f89\n 55ad340609f4b302 83e48883251415a 085125e8f7cdc99f d91dbd280373c5b\n d8823e3156348f5b ae6dacd436c919c6 dd53e2487da03fd 02396306d248cda0\n e99f33420f577ee8 ce54b6708080d1e c69821bcb6a88393 96f965b6ff72a70\n\nBoth produce the MD5 hash 79054025255fb1a26e4bc422aef54eb4.\nThe difference between the two samples is that the leading bit in each nibble has been flipped. For example, the 20th byte (offset 0x13) in the top sample, 0x87, is 10000111 in binary. The leading bit in the byte (also the leading bit in the first nibble) is flipped to make 00000111, which is 0x07, as shown in the lower sample.\n\nLater it was also found to be possible to construct collisions between two files with separately chosen prefixes. This technique was used in the creation of the rogue CA certificate in 2008. A new variant of parallelized collision searching using MPI was proposed by Anton Kuznetsov in 2014, which allowed to find a collision in 11 hours on a computing cluster.\n\nPreimage vulnerability\n\nIn April 2009, a preimage attack against MD5 was published that breaks MD5's preimage resistance. This attack is only theoretical, with a computational complexity of 2123.4 for full preimage.\n\nApplications\n\nMD5 digests have been widely used in the software world to provide some assurance that a transferred file has arrived intact. For example, file servers often provide a pre-computed MD5 (known as md5sum) checksum for the files, so that a user can compare the checksum of the downloaded file to it. Most unix-based operating systems include MD5 sum utilities in their distribution packages; Windows users may use the included PowerShell function \"Get-FileHash\", install a Microsoft utility, or use third-party applications. Android ROMs also use this type of checksum.\n\nAs it is easy to generate MD5 collisions, it is possible for the person who created the file to create a second file with the same checksum, so this technique cannot protect against some forms of malicious tampering. In some cases, the checksum cannot be trusted (for example, if it was obtained over the same channel as the downloaded file), in which case MD5 can only provide error-checking functionality: it will recognize a corrupt or incomplete download, which becomes more likely when downloading larger files.\n\nHistorically, MD5 has been used to store a one-way hash of a password, often with key stretching. Due to the weaknesses described in the Security section, NIST does not include MD5 in their list of recommended hashes for password storage.[http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf NIST SP 800-132] Section 5.1\n\nMD5 is also used in the field of electronic discovery, in order to provide a unique identifier for each document that is exchanged during the legal discovery process. This method can be used to replace the Bates stamp numbering system that has been used for decades during the exchange of paper documents. As above, this usage should be discouraged due to the ease of collision attacks.\n\nAlgorithm\n\nMD5 processes a variable-length message into a fixed-length output of 128 bits. The input message is broken up into chunks of 512-bit blocks (sixteen 32-bit words); the message is padded so that its length is divisible by 512. The padding works as follows: first a single bit, 1, is appended to the end of the message. This is followed by as many zeros as are required to bring the length of the message up to 64 bits fewer than a multiple of 512. The remaining bits are filled up with 64 bits representing the length of the original message, modulo 264.\n\nThe main MD5 algorithm operates on a 128-bit state, divided into four 32-bit words, denoted , , , and . These are initialized to certain fixed constants. The main algorithm then uses each 512-bit message block in turn to modify the state. The processing of a message block consists of four similar stages, termed rounds; each round is composed of 16 similar operations based on a non-linear function , modular addition, and left rotation. Figure 1 illustrates one operation within a round. There are four possible functions; a different one is used in each round:\n\\begin{align}\nF(B,C,D) &= (B\\wedge{C}) \\vee (\\neg{B} \\wedge{D}) \\\\\nG(B,C,D) &= (B\\wedge{D}) \\vee (C \\wedge \\neg{D}) \\\\\nH(B,C,D) &= B \\oplus C \\oplus D \\\\\nI(B,C,D) &= C \\oplus (B \\vee \\neg{D})\n\\end{align}\n\n\\oplus, \\wedge, \\vee, \\neg denote the XOR, AND, OR and NOT operations respectively.\n\nPseudocode\n\nThe MD5 hash is calculated according to this algorithm. All values are in little-endian.\n\n //Note: All variables are unsigned 32 bit and wrap modulo 2^32 when calculating\n var int[64] s, K\n var int i\n \n //s specifies the per-round shift amounts\n s[ 0..15] := { 7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22 }\n s[16..31] := { 5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20 }\n s[32..47] := { 4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23 }\n s[48..63] := { 6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21 }\n \n //Use binary integer part of the sines of integers (Radians) as constants:\n for i from 0 to 63\n     K[i] := floor(232 × abs(sin(i + 1)))\n end for\n //(Or just use the following precomputed table):\n K[ 0.. 3] := { 0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee }\n K[ 4.. 7] := { 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 }\n K[ 8..11] := { 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be }\n K[12..15] := { 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 }\n K[16..19] := { 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa }\n K[20..23] := { 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 }\n K[24..27] := { 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed }\n K[28..31] := { 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a }\n K[32..35] := { 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c }\n K[36..39] := { 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 }\n K[40..43] := { 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 }\n K[44..47] := { 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 }\n K[48..51] := { 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 }\n K[52..55] := { 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 }\n K[56..59] := { 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 }\n K[60..63] := { 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 }\n \n //Initialize variables:\n var int a0 :0x67452301   //A\n var int b0 :0xefcdab89   //B\n var int c0 :0x98badcfe   //C\n var int d0 :0x10325476   //D\n \n //Pre-processing: adding a single 1 bit\n append \"1\" bit to message    \n // Notice: the input bytes are considered as bits strings,\n //  where the first bit is the most significant bit of the byte.RFC 1321, section 2, \"Terminology and Notation\", Page 2.\n \n //Pre-processing: padding with zeros\n append \"0\" bit until message length in bits ≡ 448 (mod 512)\n append original length in bits mod 264 to message\n \n //Process the message in successive 512-bit chunks:\n for each 512-bit chunk of padded message\n     break chunk into sixteen 32-bit words M[j], 0 ≤ j ≤ 15\n //Initialize hash value for this chunk:\n     var int A := a0\n     var int B := b0\n     var int C := c0\n     var int D := d0\n //Main loop:\n     for i from 0 to 63\n         var int F, g\n         if 0 ≤ i ≤ 15 then\n             F := (B and C) or ((not B) and D)\n             g := i\n         else if 16 ≤ i ≤ 31\n             F := (D and B) or ((not D) and C)\n             g := (5×i + 1) mod 16\n         else if 32 ≤ i ≤ 47\n             F := B xor C xor D\n             g := (3×i + 5) mod 16\n         else if 48 ≤ i ≤ 63\n             F := C xor (B or (not D))\n             g := (7×i) mod 16\n //Be wary of the below definitions of a,b,c,d\n         F := F + A + K[i] + M[g]\n         A := D\n         D := C\n         C := B\n         B := B + leftrotate(F, s[i])\n     end for\n //Add this chunk's hash to result so far:\n     a0 := a0 + A\n     b0 := b0 + B\n     c0 := c0 + C\n     d0 := d0 + D\n end for\n \n var char digest[16] :a0 append b0 append c0 append d0 //(Output is in little-endian)\n \n //leftrotate function definition\n leftrotate (x, c)\n     return (x > (32-c));\n\nNote: Instead of the formulation from the original RFC 1321 shown, the following may be used for improved efficiency (useful if assembly language is being used – otherwise, the compiler will generally optimize the above code. Since each computation is dependent on another in these formulations, this is often slower than the above method where the nand/and can be parallelised):\n ( 0 ≤ i ≤ 15): F := D xor (B and (C xor D))\n (16 ≤ i ≤ 31): F := C xor (D and (B xor C))\n\nMD5 hashes\n\nThe 128-bit (16-byte) MD5 hashes (also termed message digests) are typically represented as a sequence of 32 hexadecimal digits. The following demonstrates a 43-byte ASCII input and the corresponding MD5 hash:\n\n MD5(\"The quick brown fox jumps over the lazy dog\") =\n 9e107d9d372bb6826bd81d3542a419d6\n\nEven a small change in the message will (with overwhelming probability) result in a mostly different hash, due to the avalanche effect. For example, adding a period to the end of the sentence:\n\n MD5(\"The quick brown fox jumps over the lazy dog\") = \n e4d909c290d0fb1ca068ffaddf22cbd0\n\nThe hash of the zero-length string is:\n\n MD5(\"\") = \n d41d8cd98f00b204e9800998ecf8427e\n\nThe MD5 algorithm is specified for messages consisting of any number of bits; it is not limited to multiples of eight bit (octets, bytes). Some MD5 implementations such as md5sum might be limited to octets, or they might not support streaming for messages of an initially undetermined length.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "MD5" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=18826" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The MD5 algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function, it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity, but only against unintentional corruption.\n\nLike most hash functions, MD5 is neither encryption nor encoding. It can be cracked by brute-force attack and suffers from extensive vulnerabilities as detailed in the security section below.\n\nMD5 was designed by Ronald Rivest in 1991 to replace an earlier hash function MD4. The source code in RFC 1321 contains a \"by attribution\" RSA license. The abbreviation \"MD\" stands for \"Message Digest.\"\n\nThe security of the MD5 has been severely compromised, with its weaknesses having been exploited in the field, most infamously by the Flame malware in 2012. The CMU Software Engineering Institute considers MD5 essentially \"cryptographically broken and unsuitable for further use\". Despite this known vulnerability, MD5 remains in use.\n\nHistory and cryptanalysis\n\nMD5 is one in a series of message digest algorithms designed by Professor Ronald Rivest of MIT (Rivest, 1992).  When analytic work indicated that MD5's predecessor MD4 was likely to be insecure, Rivest designed MD5 in 1991 as a secure replacement. (Hans Dobbertin did indeed later find weaknesses in MD4.)\n\nIn 1993, Den Boer and Bosselaers gave an early, although limited, result of finding a \"pseudo-collision\" of the MD5 compression function; that is, two different initialization vectors that produce an identical digest.\n\nIn 1996, Dobbertin announced a collision of the compression function of MD5 (Dobbertin, 1996). While this was not an attack on the full MD5 hash function, it was close enough for cryptographers to recommend switching to a replacement, such as SHA-1 or RIPEMD-160.\n\nThe size of the hash value (128 bits) is small enough to contemplate a birthday attack. MD5CRK was a distributed project started in March 2004 with the aim of demonstrating that MD5 is practically insecure by finding a collision using a birthday attack.\n\nMD5CRK ended shortly after 17 August 2004, when collisions for the full MD5 were announced by Xiaoyun Wang, Dengguo Feng, Xuejia Lai, and Hongbo Yu.Philip Hawkes and Michael Paddon and Gregory G. Rose: [http://eprint.iacr.org/2004/264 Musings on the Wang et al. MD5 Collision], 13 October 2004. Retrieved 27 July 2008. Their analytical attack was reported to take only one hour on an IBM p690 cluster.\n\nOn 1 March 2005, Arjen Lenstra, Xiaoyun Wang, and Benne de Weger demonstrated construction of two X.509 certificates with different public keys and the same MD5 hash value, a demonstrably practical collision.Arjen Lenstra, Xiaoyun Wang, Benne de Weger: [http://eprint.iacr.org/2005/067 Colliding X.509 Certificates], Cryptology ePrint Archive Report 2005/067, 1 March 2005, revised 6 May 2005. Retrieved 27 July 2008. The construction included private keys for both public keys. A few days later, Vlastimil Klima described an improved algorithm, able to construct MD5 collisions in a few hours on a single notebook computer.Vlastimil Klima: [http://eprint.iacr.org/2005/075 Finding MD5 Collisions – a Toy For a Notebook], Cryptology ePrint Archive Report 2005/075, 5 March 2005, revised 8 March 2005. Retrieved 27 July 2008. On 18 March 2006, Klima published an algorithm that could find a collision within one minute on a single notebook computer, using a method he calls tunneling.Vlastimil Klima: [http://eprint.iacr.org/2006/105 Tunnels in Hash Functions: MD5 Collisions Within a Minute], Cryptology ePrint Archive Report 2006/105, 18 March 2006, revised 17 April 2006. Retrieved 27 July 2008.\n\nVarious MD5-related RFC errata have been published. \nIn 2009, the United States Cyber Command used an MD5 hash value of their mission statement as a part of their official emblem.\n\nOn 24 December 2010, Tao Xie and Dengguo Feng announced the first published single-block (512-bit) MD5 collision. (Previous collision discoveries had relied on multi-block attacks.) For \"security reasons\", Xie and Feng did not disclose the new attack method. They issued a challenge to the cryptographic community, offering a US$10,000 reward to the first finder of a different 64-byte collision before 1 January 2013. Marc Stevens responded to the challenge and published colliding single-block messages as well as the construction algorithm and sources.\n\nIn 2011 an informational RFC 6151 was approved to update the security considerations in MD5 and HMAC-MD5.\n\nSecurity\n\nThe security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 224.1). Further, there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using off-the-shelf computing hardware (complexity 239).\nThe ability to find collisions has been greatly aided by the use of off-the-shelf GPUs. On an NVIDIA GeForce 8400GS graphics processor, 16–18 million hashes per second can be computed. An NVIDIA GeForce 8800 Ultra can calculate more than 200 million hashes per second.\n\nThese hash and collision attacks have been demonstrated in the public in various situations, including colliding document files and digital certificates. As of 2015, MD5 was demonstrated to be still quite widely used, most notably by security research and antivirus companies.\n\nOverview of security issues \n\nIn 1996, a flaw was found in the design of MD5. While it was not deemed a fatal weakness at the time, cryptographers began recommending the use of other algorithms, such as SHA-1, which has since been found to be vulnerable as well.\nIn 2004 it was shown that MD5 is not collision-resistant. As such, MD5 is not suitable for applications like SSL certificates or digital signatures that rely on this property for digital security. Also in 2004 more serious flaws were discovered in MD5, making further use of the algorithm for security purposes questionable; specifically, a group of researchers described how to create a pair of files that share the same MD5 checksum.J. Black, M. Cochran, T. Highland: [http://www.cs.colorado.edu/~jrblack/papers/md5e-full.pdf A Study of the MD5 Attacks: Insights and Improvements], 3 March 2006. Retrieved 27 July 2008.Xiaoyun Wang, Dengguo ,k.,m.,m, HAVAL-128 and RIPEMD, Cryptology ePrint Archive Report 2004/199, 16 August 2004, revised 17 August 2004. Retrieved 27 July 2008. Further advances were made in breaking MD5 in 2005, 2006, and 2007.Marc Stevens, Arjen Lenstra, Benne de Weger: [http://www.win.tue.nl/hashclash/SoftIntCodeSign/ Vulnerability of software integrity and code signing applications to chosen-prefix collisions for MD5], 30 November 2007. Retrieved 27 July 2008. In December 2008, a group of researchers used this technique to fake SSL certificate validity. [https://events.ccc.de/congress/2008/Fahrplan/events/3023.en.html Announced] at the 25th Chaos Communication Congress.\n\nAs of 2010, the CMU Software Engineering Institute considers MD5 \"cryptographically broken and unsuitable for further use\", and most U.S. government applications now require the SHA-2 family of hash functions.  In 2012, the Flame malware exploited the weaknesses in MD5 to fake a Microsoft digital signature.\n\nCollision vulnerabilities\n\nIn 1996, collisions were found in the compression function of MD5, and Hans Dobbertin wrote in the RSA Laboratories technical newsletter, \"The presented attack does not yet threaten practical applications of MD5, but it comes rather close ... in the future MD5 should no longer be implemented ... where a collision-resistant hash function is required.\"\n\nIn 2005, researchers were able to create pairs of PostScript documents and X.509 certificates with the same hash. Later that year, MD5's designer Ron Rivest wrote that \"md5 and sha1 are both clearly broken (in terms of collision-resistance)\".\n\nOn 30 December 2008, a group of researchers announced at the 25th Chaos Communication Congress how they had used MD5 collisions to create an intermediate certificate authority certificate that appeared to be legitimate when checked by its MD5 hash. The researchers used a cluster of Sony PlayStation 3 units at the EPFL in Lausanne, Switzerland to change a normal SSL certificate issued by RapidSSL into a working CA certificate for that issuer, which could then be used to create other certificates that would appear to be legitimate and issued by RapidSSL. VeriSign, the issuers of RapidSSL certificates, said they stopped issuing new certificates using MD5 as their checksum algorithm for RapidSSL once the vulnerability was announced. Although Verisign declined to revoke existing certificates signed using MD5, their response was considered adequate by the authors of the exploit (Alexander Sotirov, Marc Stevens, Jacob Appelbaum, Arjen Lenstra, David Molnar, Dag Arne Osvik, and Benne de Weger). Bruce Schneier wrote of the attack that \"we already knew that MD5 is a broken hash function\" and that \"no one should be using MD5 anymore\". The SSL researchers wrote, \"Our desired impact is that Certification Authorities will stop using MD5 in issuing new certificates. We also hope that use of MD5 in other applications will be reconsidered as well.\"\n\nIn 2012, according to Microsoft, the authors of the Flame malware used an MD5 collision to forge a Windows code-signing certificate.\n\nMD5 uses the Merkle–Damgård construction, so if two prefixes with the same hash can be constructed, a common suffix can be added to both to make the collision more likely to be accepted as valid data by the application using it. Furthermore, current collision-finding techniques allow to specify an arbitrary prefix: an attacker can create two colliding files that both begin with the same content. All the attacker needs to generate two colliding files is a template file with a 128-byte block of data, aligned on a 64-byte boundary that can be changed freely by the collision-finding algorithm. An example MD5 collision, with the two messages differing in 6 bits, is:\n\n d131dd02c5e6eec4 693d9a0698aff95c 2fcab5712467eab 4004583eb8fb7f89\n 55ad340609f4b302 83e48883251415a 085125e8f7cdc99f d91dbd280373c5b\n d8823e3156348f5b ae6dacd436c919c6 dd53e2487da03fd 02396306d248cda0\n e99f33420f577ee8 ce54b6708080d1e c69821bcb6a88393 96f965b6ff72a70\n\n d131dd02c5e6eec4 693d9a0698aff95c 2fcab5712467eab 4004583eb8fb7f89\n 55ad340609f4b302 83e48883251415a 085125e8f7cdc99f d91dbd280373c5b\n d8823e3156348f5b ae6dacd436c919c6 dd53e2487da03fd 02396306d248cda0\n e99f33420f577ee8 ce54b6708080d1e c69821bcb6a88393 96f965b6ff72a70\n\nBoth produce the MD5 hash 79054025255fb1a26e4bc422aef54eb4.\nThe difference between the two samples is that the leading bit in each nibble has been flipped. For example, the 20th byte (offset 0x13) in the top sample, 0x87, is 10000111 in binary. The leading bit in the byte (also the leading bit in the first nibble) is flipped to make 00000111, which is 0x07, as shown in the lower sample.\n\nLater it was also found to be possible to construct collisions between two files with separately chosen prefixes. This technique was used in the creation of the rogue CA certificate in 2008. A new variant of parallelized collision searching using MPI was proposed by Anton Kuznetsov in 2014, which allowed to find a collision in 11 hours on a computing cluster.\n\nPreimage vulnerability\n\nIn April 2009, a preimage attack against MD5 was published that breaks MD5's preimage resistance. This attack is only theoretical, with a computational complexity of 2123.4 for full preimage.\n\nApplications\n\nMD5 digests have been widely used in the software world to provide some assurance that a transferred file has arrived intact. For example, file servers often provide a pre-computed MD5 (known as md5sum) checksum for the files, so that a user can compare the checksum of the downloaded file to it. Most unix-based operating systems include MD5 sum utilities in their distribution packages; Windows users may use the included PowerShell function \"Get-FileHash\", install a Microsoft utility, or use third-party applications. Android ROMs also use this type of checksum.\n\nAs it is easy to generate MD5 collisions, it is possible for the person who created the file to create a second file with the same checksum, so this technique cannot protect against some forms of malicious tampering. In some cases, the checksum cannot be trusted (for example, if it was obtained over the same channel as the downloaded file), in which case MD5 can only provide error-checking functionality: it will recognize a corrupt or incomplete download, which becomes more likely when downloading larger files.\n\nHistorically, MD5 has been used to store a one-way hash of a password, often with key stretching. Due to the weaknesses described in the Security section, NIST does not include MD5 in their list of recommended hashes for password storage.[http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf NIST SP 800-132] Section 5.1\n\nMD5 is also used in the field of electronic discovery, in order to provide a unique identifier for each document that is exchanged during the legal discovery process. This method can be used to replace the Bates stamp numbering system that has been used for decades during the exchange of paper documents. As above, this usage should be discouraged due to the ease of collision attacks.\n\nAlgorithm\n\nMD5 processes a variable-length message into a fixed-length output of 128 bits. The input message is broken up into chunks of 512-bit blocks (sixteen 32-bit words); the message is padded so that its length is divisible by 512. The padding works as follows: first a single bit, 1, is appended to the end of the message. This is followed by as many zeros as are required to bring the length of the message up to 64 bits fewer than a multiple of 512. The remaining bits are filled up with 64 bits representing the length of the original message, modulo 264.\n\nThe main MD5 algorithm operates on a 128-bit state, divided into four 32-bit words, denoted , , , and . These are initialized to certain fixed constants. The main algorithm then uses each 512-bit message block in turn to modify the state. The processing of a message block consists of four similar stages, termed rounds; each round is composed of 16 similar operations based on a non-linear function , modular addition, and left rotation. Figure 1 illustrates one operation within a round. There are four possible functions; a different one is used in each round:\n\\begin{align}\nF(B,C,D) &= (B\\wedge{C}) \\vee (\\neg{B} \\wedge{D}) \\\\\nG(B,C,D) &= (B\\wedge{D}) \\vee (C \\wedge \\neg{D}) \\\\\nH(B,C,D) &= B \\oplus C \\oplus D \\\\\nI(B,C,D) &= C \\oplus (B \\vee \\neg{D})\n\\end{align}\n\n\\oplus, \\wedge, \\vee, \\neg denote the XOR, AND, OR and NOT operations respectively.\n\nPseudocode\n\nThe MD5 hash is calculated according to this algorithm. All values are in little-endian.\n\n //Note: All variables are unsigned 32 bit and wrap modulo 2^32 when calculating\n var int[64] s, K\n var int i\n \n //s specifies the per-round shift amounts\n s[ 0..15] := { 7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22 }\n s[16..31] := { 5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20 }\n s[32..47] := { 4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23 }\n s[48..63] := { 6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21 }\n \n //Use binary integer part of the sines of integers (Radians) as constants:\n for i from 0 to 63\n     K[i] := floor(232 × abs(sin(i + 1)))\n end for\n //(Or just use the following precomputed table):\n K[ 0.. 3] := { 0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee }\n K[ 4.. 7] := { 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 }\n K[ 8..11] := { 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be }\n K[12..15] := { 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 }\n K[16..19] := { 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa }\n K[20..23] := { 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 }\n K[24..27] := { 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed }\n K[28..31] := { 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a }\n K[32..35] := { 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c }\n K[36..39] := { 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 }\n K[40..43] := { 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 }\n K[44..47] := { 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 }\n K[48..51] := { 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 }\n K[52..55] := { 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 }\n K[56..59] := { 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 }\n K[60..63] := { 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 }\n \n //Initialize variables:\n var int a0 :0x67452301   //A\n var int b0 :0xefcdab89   //B\n var int c0 :0x98badcfe   //C\n var int d0 :0x10325476   //D\n \n //Pre-processing: adding a single 1 bit\n append \"1\" bit to message    \n // Notice: the input bytes are considered as bits strings,\n //  where the first bit is the most significant bit of the byte.RFC 1321, section 2, \"Terminology and Notation\", Page 2.\n \n //Pre-processing: padding with zeros\n append \"0\" bit until message length in bits ≡ 448 (mod 512)\n append original length in bits mod 264 to message\n \n //Process the message in successive 512-bit chunks:\n for each 512-bit chunk of padded message\n     break chunk into sixteen 32-bit words M[j], 0 ≤ j ≤ 15\n //Initialize hash value for this chunk:\n     var int A := a0\n     var int B := b0\n     var int C := c0\n     var int D := d0\n //Main loop:\n     for i from 0 to 63\n         var int F, g\n         if 0 ≤ i ≤ 15 then\n             F := (B and C) or ((not B) and D)\n             g := i\n         else if 16 ≤ i ≤ 31\n             F := (D and B) or ((not D) and C)\n             g := (5×i + 1) mod 16\n         else if 32 ≤ i ≤ 47\n             F := B xor C xor D\n             g := (3×i + 5) mod 16\n         else if 48 ≤ i ≤ 63\n             F := C xor (B or (not D))\n             g := (7×i) mod 16\n //Be wary of the below definitions of a,b,c,d\n         F := F + A + K[i] + M[g]\n         A := D\n         D := C\n         C := B\n         B := B + leftrotate(F, s[i])\n     end for\n //Add this chunk's hash to result so far:\n     a0 := a0 + A\n     b0 := b0 + B\n     c0 := c0 + C\n     d0 := d0 + D\n end for\n \n var char digest[16] :a0 append b0 append c0 append d0 //(Output is in little-endian)\n \n //leftrotate function definition\n leftrotate (x, c)\n     return (x > (32-c));\n\nNote: Instead of the formulation from the original RFC 1321 shown, the following may be used for improved efficiency (useful if assembly language is being used – otherwise, the compiler will generally optimize the above code. Since each computation is dependent on another in these formulations, this is often slower than the above method where the nand/and can be parallelised):\n ( 0 ≤ i ≤ 15): F := D xor (B and (C xor D))\n (16 ≤ i ≤ 31): F := C xor (D and (B xor C))\n\nMD5 hashes\n\nThe 128-bit (16-byte) MD5 hashes (also termed message digests) are typically represented as a sequence of 32 hexadecimal digits. The following demonstrates a 43-byte ASCII input and the corresponding MD5 hash:\n\n MD5(\"The quick brown fox jumps over the lazy dog\") =\n 9e107d9d372bb6826bd81d3542a419d6\n\nEven a small change in the message will (with overwhelming probability) result in a mostly different hash, due to the avalanche effect. For example, adding a period to the end of the sentence:\n\n MD5(\"The quick brown fox jumps over the lazy dog\") = \n e4d909c290d0fb1ca068ffaddf22cbd0\n\nThe hash of the zero-length string is:\n\n MD5(\"\") = \n d41d8cd98f00b204e9800998ecf8427e\n\nThe MD5 algorithm is specified for messages consisting of any number of bits; it is not limited to multiples of eight bit (octets, bytes). Some MD5 implementations such as md5sum might be limited to octets, or they might not support streaming for messages of an initially undetermined length. MD5. http://en.wikipedia.org/?curid=18826."
  }
}
