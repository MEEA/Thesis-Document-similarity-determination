{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=8741",
  "eid" : "ea16c550-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778472485,
  "textBody" : "Dylan is a multi-paradigm programming language that includes support for functional and object-oriented programming, and is dynamic and reflective while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer.\n\nA concise and thorough overview of the language may be found in the Dylan Reference Manual.\n\nDylan derives from Scheme and Common Lisp and adds an integrated object system derived from the Common Lisp Object System (CLOS). In Dylan, all values (including numbers, characters, functions, and classes) are first-class objects. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).\n\nDylan's main design goal is to be a dynamic language well-suited for developing commercial software. Dylan attempts to address potential performance issues by introducing \"natural\" limits to the full flexibility of Lisp systems, allowing the compiler to clearly understand compilable units (i.e., libraries).\n\nAlthough deriving much of its semantics from Scheme and other Lisps—some implementations were in fact initially built within existing Lisp systems—Dylan has an ALGOL-like syntax rather than a Lisp-like prefix syntax.\n\nHistory\n\nDylan was created in the early 1990s by a group led by Apple Computer. At one point in its development it was intended for use with Apple's Newton computer, but the Dylan implementation did not reach sufficient maturity in time, and Newton instead used a combination of C and the NewtonScript developed by Walter Smith. Apple ended their Dylan development effort in 1995, though they made a \"technology release\" version available (Apple Dylan TR1) that included an advanced IDE.\n\nTwo other groups contributed to the design of the language and developed implementations: Harlequin released a commercial IDE for Microsoft Windows and Carnegie Mellon University released an open source compiler for Unix systems called Gwydion Dylan. Both of these implementations are now open source.  The Harlequin implementation is now known as Open Dylan and is maintained by a group of volunteers, the Dylan Hackers.\n\nThe Dylan language was code-named Ralph. James Joaquin chose the name Dylan for \"DYnamic LANguage.\"\n\nSyntax\n\nDylan uses an Algol-like syntax designed by Michael Kahl.  It is described in great detail in the Dylan Reference Manual.  This page shows examples of some syntax features that are more unusual.  Many of them come from Dylan's Lisp heritage.\n\nA simple class with several slots:\n\ndefine class  ()\n  slot point-x :: ,\n    required-init-keyword: x:;\n  slot point-y :: ,\n    required-init-keyword: y:;\nend class ;\n\n* By convention all classes are named with angle brackets.  This is just a convention.  The class could be named \"Point\", but that is never done.  (Note that Dylan is not case sensitive.)\n* In end class  both class and  are optional.  This is true for all end clauses.  For example, you may write end if or just end to terminate an if statement.\n\nThe same class, rewritten in the most minimal way possible:\n\ndefine class  ()\n  slot point-x;\n  slot point-y;\nend;\n\n* The slots are now both typed as .\n* The slots must be initialized manually.\n\ndefine constant $pi ::  = 3.1415927d0;\n\n* By convention constant names begin with \"$\".\n\nA factorial function:\n\ndefine function factorial (n :: ) => (n! :: )\n  case\n    n  error(\"Can't take factorial of negative integer: %d\\n\", n);\n    n 0     \n> 1;\n    otherwise => n * factorial(n - 1);\n  end\nend;\n\n* There is no explicit return statement.  The result of a method or function is the last expression evaluated.  It is a common style to leave off the semicolon after an expression in return position.\n* Identifiers in Dylan may contain more \"special\" characters than most language.  n! and  are just normal identifiers.  If there is any ambiguity, whitespace is used.\n* Statements such as if and for end with the keyword end but may optionally be written as end if or end for.\n\nOriginally, Dylan used a Lisp-like prefix syntax, which is based on s-expressions:\n\n (bind ((radius 5)\n        (circumference (* 2 $pi radius)))\n   (if (> circumference 42)\n       (format-out \"Hello big circle! c is %=\" circumference)\n       (format-out \"Hello circle! c is %=\" circumference)))\n\nBy the time the language design was completed, it was changed to an Algol-like syntax, with the expectation that it would be more familiar to a wider audience of programmers.\n\nModules vs. namespace\n\nIn many object-oriented languages, classes are the primary means of encapsulation and modularity; each class defines a namespace and controls which definitions are externally visible. In addition, classes in many languages define an indivisible unit that must be used as a whole—if you want to use a String concatenation function, you must import and compile against all of String.\n\nSome languages also include a separate, explicit namespace or module system that performs encapsulation in a more general way. Dylan is such a language.\n\nIn Dylan, the concepts of compile-unit and import-unit are separated, and classes have nothing specifically to do with either. A library defines items that should be compiled and handled together, while a module defines the namespace. Classes can be placed together in modules, or cut across them, as the programmer wishes. Often the complete definition for a class does not exist in a single module, but is spread across several that are optionally collected together. Different programs can have different definitions of the same class, including only what they need.\n\nFor example, consider an add-on library for regex support on String. In some languages, in order for the functionality to be included in strings, the functionality has to be added to the String namespace itself. As soon as you do this, the String class becomes larger, and people who don't need to use regex still have to \"pay\" for it in increased library size. For this reason these sorts of add-ons are typically placed in their own namespaces and objects. The downside to this approach is that the new functionality is no longer a part of string; instead, it is isolated in its own set of functions that have to be called separately. Instead of myString.parseWith(myPattern), which would be the natural organization from an OO point of view, you use something like myPattern.parseString(myString), which effectively reverses the ordering.\n\nIn addition, under Dylan many interfaces can be defined for the same code, for instance the String concatenation method could be placed in both the String interface, and the \"concat\" interface which collects together all of the different concatenation functions from various classes. This is more commonly used in math libraries, where functions tend to be applicable to widely differing object types.\n\nA more practical use of the interface construct is to build public and private versions of a module, something that other languages include as a \"bolt on\" feature that invariably causes problems and adds syntax. Under Dylan the programmer can simply place every function call in the \"Private\" or \"Development\" interface, and collect up publicly accessible functions in \"Public\". Under Java or C++ the visibility of an object is defined in the code itself, meaning that to support a similar change the programmer would be forced to re-write the definitions completely, and could not have two versions at the same time.\n\nClasses\n\nClasses in Dylan describe \"slots\" (data members, fields, ivars, etc.) of objects in a fashion similar to most OO languages. All access to slots are via methods, as in Smalltalk. Default getter and setter methods are automatically generated based on the slot names.  In contrast with most other OO languages, other methods applicable to the class are often defined outside of the class, and thus class definitions in Dylan typically include the definition of the storage only. For instance:\n\ndefine class  ()\n  slot title ::  = \"untitled\", init-keyword: title:;\n  slot position :: , required-init-keyword: position:;\nend class;\n\nIn this example the class \"\" is defined. The  syntax is convention only, to make the class names stand out—the angle brackets are merely part of the class name. In comparison, in some languages the convention is to capitalize the first letter of the class name or to prefix the name with a \"C\" or \"T\" (for example).  inherits from a single class, , and contains two slots, title holding a string for the window title, and position holding an X-Y point for a corner of the window. In this particular example the title has been given a default value, while the position has not. The optional \"init-keyword\" syntax allows the programmer to specify the initial value of the slot when instantiating an object of the class.\n\nIn languages such as C++ or Java, the class would also define its interface. In this case the definition above has no explicit instructions, so in both languages access to the slots and methods is considered protected, meaning they can be used only by subclasses. In order to allow unrelated code to use the window instances, they would have to be declared public.\n\nIn Dylan these sorts of visibility rules are not considered part of the code itself, but of the module/interface system. This adds considerable flexibility. For instance, one interface used during early development could declare everything public, whereas one used in testing and deployment could limit this. With C++ or Java these changes would require changes to the source code itself, so people won't do it, whereas in Dylan this is a completely unrelated concept.\n\nAlthough this example does not use it, Dylan also supports multiple inheritance.\n\nMethods and generic functions\n\nIn Dylan, methods are not intrinsically associated with any particular class; methods can be thought of as existing outside of classes. Like CLOS, Dylan is based on multimethods, where the specific method to be called is chosen based upon the types of all its arguments. The method does not have to be known at compile time, the understanding being that the required functionality may be available or may not, based on the user's preferences.\n\nUnder Java the same methods would be isolated in a particular class. In order to use that functionality the programmer is forced to import that class and refer to it explicitly in order to call the method. If that class is not available, or unknown at compile time, the application simply won't compile.\n\nIn Dylan, code is isolated from storage in functions. Many classes have methods that call their own functions, thereby looking and feeling like most other OO languages. However code may also be located in generic functions, meaning they are not attached to a particular class, and can be called natively by anyone. Linking a particular generic function to a method in a class is accomplished this way:\n\ndefine method turn-blue (w :: )\n  w.color := $blue;\nend method;\n\nThis definition is similar to those in other languages, and would likely be encapsulated within the  class. Note the := setter call, which is syntactic sugar for color-setter($blue, w).\n\nThe utility of generic methods comes into its own when you consider more \"generic\" examples. For instance, one common function in most languages is the to-string, which returns some human-readable form for the object. For instance, a window might return its title and its position in parens, while a string would return itself. In Dylan these methods could all be collected into a single module called \"to-string\", thereby removing this code from the definition of the class itself. If a particular object did not support a to-string, it could be easily added in the to-string module.\n\nExtensibility\n\nThis whole concept might strike some readers as very odd. The code to handle to-string for a window isn't defined in ? This might not make any sense until you consider how Dylan handles the call of the to-string. In most languages when the program is compiled the to-string for  is looked up and replaced with a pointer (more or less) to the method. In Dylan this occurs when the program is first run; the runtime builds a table of method-name/parameters details and looks up methods dynamically via this table. That means that a function for a particular method can be located anywhere, not just in the compile-time unit. In the end the programmer is given considerable flexibility in terms of where to place their code, collecting it along class lines where appropriate, and functional lines where it's not.\n\nThe implication here is that a programmer can add functionality to existing classes by defining functions in a separate file. For instance, you might wish to add spell checking to all s, which in most languages would require access to the source code of the string class—and such basic classes are rarely given out in source form. In Dylan (and other \"extensible languages\") the spell checking method could be added in the spell-check module, defining all of the classes on which it can be applied via the define method construct. In this case the actual functionality might be defined in a single generic function, which takes a string and returns the errors. When the spell-check module is compiled into your program, all strings (and other objects) will get the added functionality.\n\nApple Dylan\n\nApple Dylan is the implementation of Dylan produced by Apple Computer. It was originally developed for the Apple Newton product.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Dylan (programming language)" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=8741" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "Dylan is a multi-paradigm programming language that includes support for functional and object-oriented programming, and is dynamic and reflective while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer.\n\nA concise and thorough overview of the language may be found in the Dylan Reference Manual.\n\nDylan derives from Scheme and Common Lisp and adds an integrated object system derived from the Common Lisp Object System (CLOS). In Dylan, all values (including numbers, characters, functions, and classes) are first-class objects. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).\n\nDylan's main design goal is to be a dynamic language well-suited for developing commercial software. Dylan attempts to address potential performance issues by introducing \"natural\" limits to the full flexibility of Lisp systems, allowing the compiler to clearly understand compilable units (i.e., libraries).\n\nAlthough deriving much of its semantics from Scheme and other Lisps—some implementations were in fact initially built within existing Lisp systems—Dylan has an ALGOL-like syntax rather than a Lisp-like prefix syntax.\n\nHistory\n\nDylan was created in the early 1990s by a group led by Apple Computer. At one point in its development it was intended for use with Apple's Newton computer, but the Dylan implementation did not reach sufficient maturity in time, and Newton instead used a combination of C and the NewtonScript developed by Walter Smith. Apple ended their Dylan development effort in 1995, though they made a \"technology release\" version available (Apple Dylan TR1) that included an advanced IDE.\n\nTwo other groups contributed to the design of the language and developed implementations: Harlequin released a commercial IDE for Microsoft Windows and Carnegie Mellon University released an open source compiler for Unix systems called Gwydion Dylan. Both of these implementations are now open source.  The Harlequin implementation is now known as Open Dylan and is maintained by a group of volunteers, the Dylan Hackers.\n\nThe Dylan language was code-named Ralph. James Joaquin chose the name Dylan for \"DYnamic LANguage.\"\n\nSyntax\n\nDylan uses an Algol-like syntax designed by Michael Kahl.  It is described in great detail in the Dylan Reference Manual.  This page shows examples of some syntax features that are more unusual.  Many of them come from Dylan's Lisp heritage.\n\nA simple class with several slots:\n\ndefine class  ()\n  slot point-x :: ,\n    required-init-keyword: x:;\n  slot point-y :: ,\n    required-init-keyword: y:;\nend class ;\n\n* By convention all classes are named with angle brackets.  This is just a convention.  The class could be named \"Point\", but that is never done.  (Note that Dylan is not case sensitive.)\n* In end class  both class and  are optional.  This is true for all end clauses.  For example, you may write end if or just end to terminate an if statement.\n\nThe same class, rewritten in the most minimal way possible:\n\ndefine class  ()\n  slot point-x;\n  slot point-y;\nend;\n\n* The slots are now both typed as .\n* The slots must be initialized manually.\n\ndefine constant $pi ::  = 3.1415927d0;\n\n* By convention constant names begin with \"$\".\n\nA factorial function:\n\ndefine function factorial (n :: ) => (n! :: )\n  case\n    n  error(\"Can't take factorial of negative integer: %d\\n\", n);\n    n 0     \n> 1;\n    otherwise => n * factorial(n - 1);\n  end\nend;\n\n* There is no explicit return statement.  The result of a method or function is the last expression evaluated.  It is a common style to leave off the semicolon after an expression in return position.\n* Identifiers in Dylan may contain more \"special\" characters than most language.  n! and  are just normal identifiers.  If there is any ambiguity, whitespace is used.\n* Statements such as if and for end with the keyword end but may optionally be written as end if or end for.\n\nOriginally, Dylan used a Lisp-like prefix syntax, which is based on s-expressions:\n\n (bind ((radius 5)\n        (circumference (* 2 $pi radius)))\n   (if (> circumference 42)\n       (format-out \"Hello big circle! c is %=\" circumference)\n       (format-out \"Hello circle! c is %=\" circumference)))\n\nBy the time the language design was completed, it was changed to an Algol-like syntax, with the expectation that it would be more familiar to a wider audience of programmers.\n\nModules vs. namespace\n\nIn many object-oriented languages, classes are the primary means of encapsulation and modularity; each class defines a namespace and controls which definitions are externally visible. In addition, classes in many languages define an indivisible unit that must be used as a whole—if you want to use a String concatenation function, you must import and compile against all of String.\n\nSome languages also include a separate, explicit namespace or module system that performs encapsulation in a more general way. Dylan is such a language.\n\nIn Dylan, the concepts of compile-unit and import-unit are separated, and classes have nothing specifically to do with either. A library defines items that should be compiled and handled together, while a module defines the namespace. Classes can be placed together in modules, or cut across them, as the programmer wishes. Often the complete definition for a class does not exist in a single module, but is spread across several that are optionally collected together. Different programs can have different definitions of the same class, including only what they need.\n\nFor example, consider an add-on library for regex support on String. In some languages, in order for the functionality to be included in strings, the functionality has to be added to the String namespace itself. As soon as you do this, the String class becomes larger, and people who don't need to use regex still have to \"pay\" for it in increased library size. For this reason these sorts of add-ons are typically placed in their own namespaces and objects. The downside to this approach is that the new functionality is no longer a part of string; instead, it is isolated in its own set of functions that have to be called separately. Instead of myString.parseWith(myPattern), which would be the natural organization from an OO point of view, you use something like myPattern.parseString(myString), which effectively reverses the ordering.\n\nIn addition, under Dylan many interfaces can be defined for the same code, for instance the String concatenation method could be placed in both the String interface, and the \"concat\" interface which collects together all of the different concatenation functions from various classes. This is more commonly used in math libraries, where functions tend to be applicable to widely differing object types.\n\nA more practical use of the interface construct is to build public and private versions of a module, something that other languages include as a \"bolt on\" feature that invariably causes problems and adds syntax. Under Dylan the programmer can simply place every function call in the \"Private\" or \"Development\" interface, and collect up publicly accessible functions in \"Public\". Under Java or C++ the visibility of an object is defined in the code itself, meaning that to support a similar change the programmer would be forced to re-write the definitions completely, and could not have two versions at the same time.\n\nClasses\n\nClasses in Dylan describe \"slots\" (data members, fields, ivars, etc.) of objects in a fashion similar to most OO languages. All access to slots are via methods, as in Smalltalk. Default getter and setter methods are automatically generated based on the slot names.  In contrast with most other OO languages, other methods applicable to the class are often defined outside of the class, and thus class definitions in Dylan typically include the definition of the storage only. For instance:\n\ndefine class  ()\n  slot title ::  = \"untitled\", init-keyword: title:;\n  slot position :: , required-init-keyword: position:;\nend class;\n\nIn this example the class \"\" is defined. The  syntax is convention only, to make the class names stand out—the angle brackets are merely part of the class name. In comparison, in some languages the convention is to capitalize the first letter of the class name or to prefix the name with a \"C\" or \"T\" (for example).  inherits from a single class, , and contains two slots, title holding a string for the window title, and position holding an X-Y point for a corner of the window. In this particular example the title has been given a default value, while the position has not. The optional \"init-keyword\" syntax allows the programmer to specify the initial value of the slot when instantiating an object of the class.\n\nIn languages such as C++ or Java, the class would also define its interface. In this case the definition above has no explicit instructions, so in both languages access to the slots and methods is considered protected, meaning they can be used only by subclasses. In order to allow unrelated code to use the window instances, they would have to be declared public.\n\nIn Dylan these sorts of visibility rules are not considered part of the code itself, but of the module/interface system. This adds considerable flexibility. For instance, one interface used during early development could declare everything public, whereas one used in testing and deployment could limit this. With C++ or Java these changes would require changes to the source code itself, so people won't do it, whereas in Dylan this is a completely unrelated concept.\n\nAlthough this example does not use it, Dylan also supports multiple inheritance.\n\nMethods and generic functions\n\nIn Dylan, methods are not intrinsically associated with any particular class; methods can be thought of as existing outside of classes. Like CLOS, Dylan is based on multimethods, where the specific method to be called is chosen based upon the types of all its arguments. The method does not have to be known at compile time, the understanding being that the required functionality may be available or may not, based on the user's preferences.\n\nUnder Java the same methods would be isolated in a particular class. In order to use that functionality the programmer is forced to import that class and refer to it explicitly in order to call the method. If that class is not available, or unknown at compile time, the application simply won't compile.\n\nIn Dylan, code is isolated from storage in functions. Many classes have methods that call their own functions, thereby looking and feeling like most other OO languages. However code may also be located in generic functions, meaning they are not attached to a particular class, and can be called natively by anyone. Linking a particular generic function to a method in a class is accomplished this way:\n\ndefine method turn-blue (w :: )\n  w.color := $blue;\nend method;\n\nThis definition is similar to those in other languages, and would likely be encapsulated within the  class. Note the := setter call, which is syntactic sugar for color-setter($blue, w).\n\nThe utility of generic methods comes into its own when you consider more \"generic\" examples. For instance, one common function in most languages is the to-string, which returns some human-readable form for the object. For instance, a window might return its title and its position in parens, while a string would return itself. In Dylan these methods could all be collected into a single module called \"to-string\", thereby removing this code from the definition of the class itself. If a particular object did not support a to-string, it could be easily added in the to-string module.\n\nExtensibility\n\nThis whole concept might strike some readers as very odd. The code to handle to-string for a window isn't defined in ? This might not make any sense until you consider how Dylan handles the call of the to-string. In most languages when the program is compiled the to-string for  is looked up and replaced with a pointer (more or less) to the method. In Dylan this occurs when the program is first run; the runtime builds a table of method-name/parameters details and looks up methods dynamically via this table. That means that a function for a particular method can be located anywhere, not just in the compile-time unit. In the end the programmer is given considerable flexibility in terms of where to place their code, collecting it along class lines where appropriate, and functional lines where it's not.\n\nThe implication here is that a programmer can add functionality to existing classes by defining functions in a separate file. For instance, you might wish to add spell checking to all s, which in most languages would require access to the source code of the string class—and such basic classes are rarely given out in source form. In Dylan (and other \"extensible languages\") the spell checking method could be added in the spell-check module, defining all of the classes on which it can be applied via the define method construct. In this case the actual functionality might be defined in a single generic function, which takes a string and returns the errors. When the spell-check module is compiled into your program, all strings (and other objects) will get the added functionality.\n\nApple Dylan\n\nApple Dylan is the implementation of Dylan produced by Apple Computer. It was originally developed for the Apple Newton product. Dylan (programming language). http://en.wikipedia.org/?curid=8741."
  }
}
