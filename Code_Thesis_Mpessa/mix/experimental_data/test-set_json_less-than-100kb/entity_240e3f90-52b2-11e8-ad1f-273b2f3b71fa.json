{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=16154",
  "eid" : "240e3f90-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778569737,
  "textBody" : "The Jupiter Ace was a British home computer of the early 1980s. It was produced by the company Jupiter Cantab which was set up for the purpose. The Ace differed from other microcomputers of the time Page 1 in that it used Forth instead of the more popular BASIC. After Jupiter Cantab ceased trading, the brand was acquired by Boldfield Computing Ltd in 1984, before eventually being sold to Andrews UK Limited in 2015 (the company owned by Paul Andrews, who also conceived the Sinclair Spectrum ZX Vega games console).\n\nThe Jupiter Ace was the first of its class to use a very fast structured language, free of spaghetti code, without the need to be loaded or even bought. The language was also the first (and only) adapted to use a cassette tape recorder (without the disk/tape drives of highly priced systems).\n\nThe down side of the language was its argument passing managed by the programmer. Additionally, not being a promoted language and the needing to later add a RAM Extension Pack, would be arguments against its offer of both power and professional programming delivered in a cheap computer.\n\nIntroduction \n\nJupiter Cantab was formed by Richard Altwasser and Steven Vickers.  \nBoth had been on the design team for the Sinclair ZX Spectrum: \nAltwasser did some work on the development of the ZX-81 and in the design of the hardware of the Spectrum. Vickers adapted and expanded the 4K ZX-80 ROM to the 8K ZX-81 ROM and wrote most of the ROM for the Spectrum.\n\nThe Jupiter Ace was named after the early British computer, the ACE. The name was chosen to emphasize the \"firsts\" of using FORTH environment. This, in contrast to previous introductory computers was its most distinctive characteristic, Forth being already considered well adapted to microcomputers (with small memory and relatively low-performance processors).Byte Magazine.\"Editorial\". 1980,August. Special Edition.\n\nThis was a structured language allowing complex programs to be built, free from BASIC's Spaghetti code while being near as fast as compiled languages. Not only was about 10 times faster than BASIC,The Complete FORTH, by Alan Winfield, 1983, Sigma Technical Press, page xi. it also allowed easy implementation of machine code routines, if needed for a particular critical task.\n\nFor such reasons, it was designed with FORTH, chosen to deliver better performance and Structured Programming flexibility as found in Pascal Language.Electronics & Computing. \"Jupiter Ace Review\". 1982, November. page 70. Using a common tape recorder instead of disk/tape drives, it decompiled the code built by its Forth to avoid source files.\n\nThe New Ace \n\nThe Jupiter ACE is often compared with ZX81 due to its similar size, low cost, and similar form factor, although internally its design is more similar to the ZX Spectrum in that the ZX81 used 75% of its Z80 CPU time to create the video signal. Within the ACE the Z80 CPU was fully available for Forth and user programs thanks to a more complete and independent video circuitry. Unlike the Spectrum however, the ACE also had a dedicated video memory of 2 kB, partly avoiding the slow down when programs accessed the same bank (same chips) as the video memory.\n\nJupiter Cantab was new to the market and the designers could not afford to use an uncommitted logic array (ULA), a design approach then gaining popularity in other computers (such as the ZX 81) to reduce component count, because these were not economical in small quantities. Instead they reduced the number of chips required via clever design.\n\nThe Ace used black conductive rubber keys. Audio capabilities were CPU controlled with programmable frequency and duration. Sound output was through a small built-in speaker. A television was needed as a display - which was in black and white only.\n\nIts stronger appeal was both delivering a structured language allowed complex programs to be built, free from BASIC's Spaghetti code, and being nearly as fast as the compiled languages loaded by more expensive computers. Forth programs tend to be more memory-efficient than the bigger programs; as they become bigger, they reuse more previously-defined code.James, John S. Byte Magazine. 1980, Aug. \"What is Forth?\", page 102, section \"Characteristics of FORTH Code\". Its starting base memory was equivalent to 2kB up to 4kB in a more common system.\n\nACE's FORTH was \"ten times faster than Basic\" and used less than half the memory (which was a costly luxury at the time) of an equivalent program written in interpreted BASIC. Control structures could be nested to any level, limited only by available memory. This allowed complex programs to be implemented, even allowing recursive programming.\n\nPrograms and data storage was by means of a common cassette tape, which was typical of home computers of the time. Tape access would mean manual slow sequential access, instead of random access of a disk/tape drive (not a tape recorder). The solution was to include decompile capabilities, allowing programs to be in their shortest form (either on RAM or on tape) and a quick access.\n\nSpecifications \n\nReferences to the ACE RAM usually include the separate 2 kB video memory, which is not available for programming, thus leading to some confusion (though that 1K was indeed equivalent in usage to between 2K and 4K on a BASIC system).\n\nACE's Forth \n\nACE's Forth was based mostly on Forth-79, with some relevant differences.Vickers, S: \"Jupiter ACE Manual\", page 176, 1982.\nRuntime error checking could be turned off to further raise speed by 25% to 50%.\n\nA few extra words were named similar to known BASIC sound, video and tape commands, as behavior was the same. The implementation lacked less frequently used Forth words, these being easily implemented if needed.\n\nThe ACE's dialect of FORTH introduced several innovations. \nFirst As FORTH programming environment, it added syntax checking to control structures and definer constructions (a.k.a. \"Safe Compiling\") as well as decompiling capabilities.\n\nDecompiling \n\nIts FORTH was adapted to the disk-less tape-using home computer hardware being able to save/load user compiled vocabularies instead of the usual numbered programming blocks used by diskette systems.\n\nDecompiling allowed not to waste RAM in simulating an absent Block System, used with both disk and tape drivers (these last not to be confused with tape recorders). As replacement, it included an extra data file, for raw binary data. These solutions were unique to the Jupiter ACE, making Ace Forth much more than Forth alone on a disk-less entry computer. There was no need to buy, or load, Forth to get full usage of a cheap computer.\n\nDefine vs Compile \n\nTo allow decompile, it distinguished usual Forth definer and compiler words creation, replacing the CREATE .. DOES>,Winfield, Alan: \"The Complete Forth\", Chapter 9 \"Extending FORTH\", Sigma Technical Press, 1983. creation pair with:\n# DEFINER .... DOES> : Create new Defining words, usually used to define and build data structures. Similar to CREATE..DOES usage in standard FORTH.Vickers, S: \"Jupiter ACE Manual\", page 120, 1982. ( Example: Adding Data Structures as Arrays, Records, ... ).\n# COMPILER .. RUNS> : Create new Compiling words, less frequently used to extend the language with compiler words where CREATE..DOES> is FORTH implementation dependent.Vickers, S: \"Jupiter ACE Manual\", page 136, 1982. ( Example: New Compiler Control Structures as Case, Infinite Loop, ... ).\n\nThese 2 defining pairs, instead of one alone, allowed the ACE to decompile its programs, unlike usual Forth systems. This decompiling ability was a solution to the absence of the more flexible disk system used by Forth. Not storing the source of a Forth program, but compiling the code after editing, it avoided completely the emulation of a disk/tape drive on RAM saving computer memory. It also saved time in reading and writing programs from cassette tape. This tape-friendly and RAM-saving solution was unique to the Jupiter ACE Forth.\n\nDevelopment \n\nAvoiding sources was compensated by inserting comments on code, thus recovering these too on decompiling. As a result of \"code is the source\", modified words (edited) would demand actualization of all code using the one newly edited. This was done with the non standard REDEFINE command.\n\nForth build up Compiled Applications. This suggested its usage as ROM extensions. Not designed for that purpose, ACE Forth allowed it. External ROMs were developed with Ace Forth to be used as control applications.\n\nSystem \n\nArchitecture \n\nThe ACE had an 8 kB ROM containing the Forth kernel and operating system, and the predefined dictionary of Forth words in about 5 kB. The remaining 3 kB of ROM supported several functionalities: floating point numbers library and character definitions table, tape recorder access, decompiling and redefining newly re-edited 'words' (i.e. routines). Some of the ROM was written in Z80 machine code, but some was also coded in Forth.\n\nThe next 8 kB were split in 2 blocks of 4 kB each. The video subsystem access allowing two different priorities of Video access by the user to the 2 kB SRAM, Regular or Overriding CPU contention, also conditioned by TV Image timings. \nThe 1 kB of user RAM was only partially decoded, so it echoed in the full 4 kB block address space it resides. \nThe 1st 16 kB space was used for ROM, VIDEO, and USER, leaving free 2nd 16 kB space for RAM extension plus 32 kB space free for all possible usages.\n\nHardware \n\n;CPU:\nDesigned to use a Zilog Z80. The designers had previous experience designing with the Z80 from the Sinclair ZX81 and ZX Spectrum, regarding hardware as well as firmware.\n\n;Video:\nOne 1K bank allowed redefinition of most of its 128 ASCII based characters in 8×8 pixel bitmap format. The other 1K bank stored the full screen display of 24 rows × 32 columns of characters in black and white. Colour could be achieved as expansion. Although a colour graphics board was designed article in ETI Magazine, April 1984 none was ever produced commercially.\n\nBoth graphics and text could be displayed at the same time: (1) redefinition of the character tiles provided standard 256×192 graphics limited to the 128 available (definable) 8×8 chars, concurrent with plotting of 64×48 graphics.\n\n;Memory:\n1 kB RAM (equivalent to near 2-4 kB on Basic). With the option of a 16 kB RAM-Pack extension (later extended to 32K extensions).\n\n;Sound:\nInternal speaker directly controlled by the CPU in single task mode, with control of sound frequency and duration in ms.\n\n;External Storage:\nStorage was through a cassette tape interface at 1500 baud. \nFiles were compiled user application (fast loading) and Memory Raw Data (size dependent).\n\nAdd-ons \n\nAble to receive ZX-81 add-ons due to similar RAM locations through a similar external expansion slot (Z80 bus), it was actually delivered in a different configuration. A simple rewiring adapter could be used, but not very safe due to power losses. After the initial power efficient 16 kB by Jupiter Cantab, other Rampacks were built by external companies as well as Peripheral Hardware and Interfaces.\n\nRAM\n#Pack 16 kB by Jupiter Cantab.\n#Pace 16 kB and 32 kB by Stonechip Electronics.\n#Pack 48 kB by Boldfield (new Jupiter ACE owner after Jupiter Cantab).\nKeyboard\n*Memotech Keyboard, by Memotech.\nSound\n*SoundBoard (1983) by Essex Micro Electronics,\nStorage\n#Jet-Disc Disc Drive System (1983) by MPE (control up to four 3\", 5\", or 8\" drives).\n#\"Deep Thought\" Disc interface with a 4K AceDOS in an EPROM (1986) by J Shepherd & S Leask.\nPrinter Adapters \n*ADS Centronics Interface Machine (1983), by Advanced Digital Systems,\n*RS232 & Centronics PrinterCard (1984) by Essex Micro Electronics.\n\nGraphics Card\n#Gray Scale card - 4 shades of gray by S Leask (1986)\n\nCommercial \n\nForth delivered several advantages over the interpreted BASIC used on all other contemporary home computers, as being more comprehensible and fast, but it was obscure and difficult to learn by the general public exposed to GOTOs (and hence unaware of structured programming). This, the lack of published software, the weak box, and the small initial memory kept the sales low despite technical interest.\n\nModels \n\n1982 - Original Jupiter ACE in a vacuum-drawn case - Reported 5000 units built.\n\n1983 - Jupiter ACE 4000 on stronger injection moulded case - Reported 800 units built.\n\nSales \n\nSales of the machine were never very large; the reported number of Ace’s sold before Jupiter Cantab closed for business was around 5,000. As of the early 2000s, surviving machines are quite uncommon, fetching high prices as collector's items.  One main reason for low sales seems to have been the need to buy an extra  RAM-extension which almost doubled the ACE's price.  It happened that the designed  of base RAM was not built in favour of the less costly  delivered.\n\nWhile being structured and thus more comprehensible, Forth was considered difficult to learn (mainly due the use of a stack, for parameter passing). The Tile monochrome-only graphics compared poorly with the colored dot graphics of available machines, the absence of colour kept the ACE squarely in a niche market of programming enthusiasts.\n\nFurther, there was a reduced list of published software - either commercial programs or listings printed in hobby magazines - for the machine, growing slowly as the base model was RAM crippled.\n\nA 1982 review stated that \"The success of the Jupiter Ace will depend on the machine-buying public's acceptance of another microcomputer language.\" This acceptance never materialized.\n\nA knowledge of BASIC acquired from familiarity with other home computers was of practically no help in learning another language and increasing doubts over whether Forth would be relevant for exam syllabuses, and decent support for Forth from teaching staff was considered unlikely due to lack of knowledge.\n\nA recent evaluation mention attempts to push the Ace in the education market failed, partly because children were more interested in learning the widely used BASIC than a language used by only one (uncommon) machine with a peculiar syntax (using RPN).",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Jupiter Ace" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=16154" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The Jupiter Ace was a British home computer of the early 1980s. It was produced by the company Jupiter Cantab which was set up for the purpose. The Ace differed from other microcomputers of the time Page 1 in that it used Forth instead of the more popular BASIC. After Jupiter Cantab ceased trading, the brand was acquired by Boldfield Computing Ltd in 1984, before eventually being sold to Andrews UK Limited in 2015 (the company owned by Paul Andrews, who also conceived the Sinclair Spectrum ZX Vega games console).\n\nThe Jupiter Ace was the first of its class to use a very fast structured language, free of spaghetti code, without the need to be loaded or even bought. The language was also the first (and only) adapted to use a cassette tape recorder (without the disk/tape drives of highly priced systems).\n\nThe down side of the language was its argument passing managed by the programmer. Additionally, not being a promoted language and the needing to later add a RAM Extension Pack, would be arguments against its offer of both power and professional programming delivered in a cheap computer.\n\nIntroduction \n\nJupiter Cantab was formed by Richard Altwasser and Steven Vickers.  \nBoth had been on the design team for the Sinclair ZX Spectrum: \nAltwasser did some work on the development of the ZX-81 and in the design of the hardware of the Spectrum. Vickers adapted and expanded the 4K ZX-80 ROM to the 8K ZX-81 ROM and wrote most of the ROM for the Spectrum.\n\nThe Jupiter Ace was named after the early British computer, the ACE. The name was chosen to emphasize the \"firsts\" of using FORTH environment. This, in contrast to previous introductory computers was its most distinctive characteristic, Forth being already considered well adapted to microcomputers (with small memory and relatively low-performance processors).Byte Magazine.\"Editorial\". 1980,August. Special Edition.\n\nThis was a structured language allowing complex programs to be built, free from BASIC's Spaghetti code while being near as fast as compiled languages. Not only was about 10 times faster than BASIC,The Complete FORTH, by Alan Winfield, 1983, Sigma Technical Press, page xi. it also allowed easy implementation of machine code routines, if needed for a particular critical task.\n\nFor such reasons, it was designed with FORTH, chosen to deliver better performance and Structured Programming flexibility as found in Pascal Language.Electronics & Computing. \"Jupiter Ace Review\". 1982, November. page 70. Using a common tape recorder instead of disk/tape drives, it decompiled the code built by its Forth to avoid source files.\n\nThe New Ace \n\nThe Jupiter ACE is often compared with ZX81 due to its similar size, low cost, and similar form factor, although internally its design is more similar to the ZX Spectrum in that the ZX81 used 75% of its Z80 CPU time to create the video signal. Within the ACE the Z80 CPU was fully available for Forth and user programs thanks to a more complete and independent video circuitry. Unlike the Spectrum however, the ACE also had a dedicated video memory of 2 kB, partly avoiding the slow down when programs accessed the same bank (same chips) as the video memory.\n\nJupiter Cantab was new to the market and the designers could not afford to use an uncommitted logic array (ULA), a design approach then gaining popularity in other computers (such as the ZX 81) to reduce component count, because these were not economical in small quantities. Instead they reduced the number of chips required via clever design.\n\nThe Ace used black conductive rubber keys. Audio capabilities were CPU controlled with programmable frequency and duration. Sound output was through a small built-in speaker. A television was needed as a display - which was in black and white only.\n\nIts stronger appeal was both delivering a structured language allowed complex programs to be built, free from BASIC's Spaghetti code, and being nearly as fast as the compiled languages loaded by more expensive computers. Forth programs tend to be more memory-efficient than the bigger programs; as they become bigger, they reuse more previously-defined code.James, John S. Byte Magazine. 1980, Aug. \"What is Forth?\", page 102, section \"Characteristics of FORTH Code\". Its starting base memory was equivalent to 2kB up to 4kB in a more common system.\n\nACE's FORTH was \"ten times faster than Basic\" and used less than half the memory (which was a costly luxury at the time) of an equivalent program written in interpreted BASIC. Control structures could be nested to any level, limited only by available memory. This allowed complex programs to be implemented, even allowing recursive programming.\n\nPrograms and data storage was by means of a common cassette tape, which was typical of home computers of the time. Tape access would mean manual slow sequential access, instead of random access of a disk/tape drive (not a tape recorder). The solution was to include decompile capabilities, allowing programs to be in their shortest form (either on RAM or on tape) and a quick access.\n\nSpecifications \n\nReferences to the ACE RAM usually include the separate 2 kB video memory, which is not available for programming, thus leading to some confusion (though that 1K was indeed equivalent in usage to between 2K and 4K on a BASIC system).\n\nACE's Forth \n\nACE's Forth was based mostly on Forth-79, with some relevant differences.Vickers, S: \"Jupiter ACE Manual\", page 176, 1982.\nRuntime error checking could be turned off to further raise speed by 25% to 50%.\n\nA few extra words were named similar to known BASIC sound, video and tape commands, as behavior was the same. The implementation lacked less frequently used Forth words, these being easily implemented if needed.\n\nThe ACE's dialect of FORTH introduced several innovations. \nFirst As FORTH programming environment, it added syntax checking to control structures and definer constructions (a.k.a. \"Safe Compiling\") as well as decompiling capabilities.\n\nDecompiling \n\nIts FORTH was adapted to the disk-less tape-using home computer hardware being able to save/load user compiled vocabularies instead of the usual numbered programming blocks used by diskette systems.\n\nDecompiling allowed not to waste RAM in simulating an absent Block System, used with both disk and tape drivers (these last not to be confused with tape recorders). As replacement, it included an extra data file, for raw binary data. These solutions were unique to the Jupiter ACE, making Ace Forth much more than Forth alone on a disk-less entry computer. There was no need to buy, or load, Forth to get full usage of a cheap computer.\n\nDefine vs Compile \n\nTo allow decompile, it distinguished usual Forth definer and compiler words creation, replacing the CREATE .. DOES>,Winfield, Alan: \"The Complete Forth\", Chapter 9 \"Extending FORTH\", Sigma Technical Press, 1983. creation pair with:\n# DEFINER .... DOES> : Create new Defining words, usually used to define and build data structures. Similar to CREATE..DOES usage in standard FORTH.Vickers, S: \"Jupiter ACE Manual\", page 120, 1982. ( Example: Adding Data Structures as Arrays, Records, ... ).\n# COMPILER .. RUNS> : Create new Compiling words, less frequently used to extend the language with compiler words where CREATE..DOES> is FORTH implementation dependent.Vickers, S: \"Jupiter ACE Manual\", page 136, 1982. ( Example: New Compiler Control Structures as Case, Infinite Loop, ... ).\n\nThese 2 defining pairs, instead of one alone, allowed the ACE to decompile its programs, unlike usual Forth systems. This decompiling ability was a solution to the absence of the more flexible disk system used by Forth. Not storing the source of a Forth program, but compiling the code after editing, it avoided completely the emulation of a disk/tape drive on RAM saving computer memory. It also saved time in reading and writing programs from cassette tape. This tape-friendly and RAM-saving solution was unique to the Jupiter ACE Forth.\n\nDevelopment \n\nAvoiding sources was compensated by inserting comments on code, thus recovering these too on decompiling. As a result of \"code is the source\", modified words (edited) would demand actualization of all code using the one newly edited. This was done with the non standard REDEFINE command.\n\nForth build up Compiled Applications. This suggested its usage as ROM extensions. Not designed for that purpose, ACE Forth allowed it. External ROMs were developed with Ace Forth to be used as control applications.\n\nSystem \n\nArchitecture \n\nThe ACE had an 8 kB ROM containing the Forth kernel and operating system, and the predefined dictionary of Forth words in about 5 kB. The remaining 3 kB of ROM supported several functionalities: floating point numbers library and character definitions table, tape recorder access, decompiling and redefining newly re-edited 'words' (i.e. routines). Some of the ROM was written in Z80 machine code, but some was also coded in Forth.\n\nThe next 8 kB were split in 2 blocks of 4 kB each. The video subsystem access allowing two different priorities of Video access by the user to the 2 kB SRAM, Regular or Overriding CPU contention, also conditioned by TV Image timings. \nThe 1 kB of user RAM was only partially decoded, so it echoed in the full 4 kB block address space it resides. \nThe 1st 16 kB space was used for ROM, VIDEO, and USER, leaving free 2nd 16 kB space for RAM extension plus 32 kB space free for all possible usages.\n\nHardware \n\n;CPU:\nDesigned to use a Zilog Z80. The designers had previous experience designing with the Z80 from the Sinclair ZX81 and ZX Spectrum, regarding hardware as well as firmware.\n\n;Video:\nOne 1K bank allowed redefinition of most of its 128 ASCII based characters in 8×8 pixel bitmap format. The other 1K bank stored the full screen display of 24 rows × 32 columns of characters in black and white. Colour could be achieved as expansion. Although a colour graphics board was designed article in ETI Magazine, April 1984 none was ever produced commercially.\n\nBoth graphics and text could be displayed at the same time: (1) redefinition of the character tiles provided standard 256×192 graphics limited to the 128 available (definable) 8×8 chars, concurrent with plotting of 64×48 graphics.\n\n;Memory:\n1 kB RAM (equivalent to near 2-4 kB on Basic). With the option of a 16 kB RAM-Pack extension (later extended to 32K extensions).\n\n;Sound:\nInternal speaker directly controlled by the CPU in single task mode, with control of sound frequency and duration in ms.\n\n;External Storage:\nStorage was through a cassette tape interface at 1500 baud. \nFiles were compiled user application (fast loading) and Memory Raw Data (size dependent).\n\nAdd-ons \n\nAble to receive ZX-81 add-ons due to similar RAM locations through a similar external expansion slot (Z80 bus), it was actually delivered in a different configuration. A simple rewiring adapter could be used, but not very safe due to power losses. After the initial power efficient 16 kB by Jupiter Cantab, other Rampacks were built by external companies as well as Peripheral Hardware and Interfaces.\n\nRAM\n#Pack 16 kB by Jupiter Cantab.\n#Pace 16 kB and 32 kB by Stonechip Electronics.\n#Pack 48 kB by Boldfield (new Jupiter ACE owner after Jupiter Cantab).\nKeyboard\n*Memotech Keyboard, by Memotech.\nSound\n*SoundBoard (1983) by Essex Micro Electronics,\nStorage\n#Jet-Disc Disc Drive System (1983) by MPE (control up to four 3\", 5\", or 8\" drives).\n#\"Deep Thought\" Disc interface with a 4K AceDOS in an EPROM (1986) by J Shepherd & S Leask.\nPrinter Adapters \n*ADS Centronics Interface Machine (1983), by Advanced Digital Systems,\n*RS232 & Centronics PrinterCard (1984) by Essex Micro Electronics.\n\nGraphics Card\n#Gray Scale card - 4 shades of gray by S Leask (1986)\n\nCommercial \n\nForth delivered several advantages over the interpreted BASIC used on all other contemporary home computers, as being more comprehensible and fast, but it was obscure and difficult to learn by the general public exposed to GOTOs (and hence unaware of structured programming). This, the lack of published software, the weak box, and the small initial memory kept the sales low despite technical interest.\n\nModels \n\n1982 - Original Jupiter ACE in a vacuum-drawn case - Reported 5000 units built.\n\n1983 - Jupiter ACE 4000 on stronger injection moulded case - Reported 800 units built.\n\nSales \n\nSales of the machine were never very large; the reported number of Ace’s sold before Jupiter Cantab closed for business was around 5,000. As of the early 2000s, surviving machines are quite uncommon, fetching high prices as collector's items.  One main reason for low sales seems to have been the need to buy an extra  RAM-extension which almost doubled the ACE's price.  It happened that the designed  of base RAM was not built in favour of the less costly  delivered.\n\nWhile being structured and thus more comprehensible, Forth was considered difficult to learn (mainly due the use of a stack, for parameter passing). The Tile monochrome-only graphics compared poorly with the colored dot graphics of available machines, the absence of colour kept the ACE squarely in a niche market of programming enthusiasts.\n\nFurther, there was a reduced list of published software - either commercial programs or listings printed in hobby magazines - for the machine, growing slowly as the base model was RAM crippled.\n\nA 1982 review stated that \"The success of the Jupiter Ace will depend on the machine-buying public's acceptance of another microcomputer language.\" This acceptance never materialized.\n\nA knowledge of BASIC acquired from familiarity with other home computers was of practically no help in learning another language and increasing doubts over whether Forth would be relevant for exam syllabuses, and decent support for Forth from teaching staff was considered unlikely due to lack of knowledge.\n\nA recent evaluation mention attempts to push the Ace in the education market failed, partly because children were more interested in learning the widely used BASIC than a language used by only one (uncommon) machine with a peculiar syntax (using RPN). Jupiter Ace. http://en.wikipedia.org/?curid=16154."
  }
}
