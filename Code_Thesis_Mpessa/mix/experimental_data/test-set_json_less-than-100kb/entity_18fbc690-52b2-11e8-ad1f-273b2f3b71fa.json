{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=14972",
  "eid" : "18fbc690-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778551161,
  "textBody" : "Idempotence (UK:; US: ) is the property of certain operations in mathematics and computer science that they can be applied multiple times without changing the result beyond the initial application. The concept of idempotence arises in a number of places in abstract algebra (in particular, in the theory of projectors and closure operators) and functional programming (in which it is connected to the property of referential transparency).\n\nThe term was introduced by Benjamin PeircePolcino & Sehgal (2002), p. 127. in the context of elements of algebras that remain invariant when raised to a positive integer power, and literally means \"(the quality of having) the same power\", from idem + potence (same + power).\n\nThere are several meanings of idempotence, depending on what the concept is applied to:\n\n*A unary operation (or function) is idempotent if, whenever it is applied twice to any value, it gives the same result as if it were applied once; i.e., . For example, the absolute value function, where , is idempotent.\n*Given a binary operation, an idempotent element (or simply an \"idempotent\") for the operation is a value for which the operation, when given that value for both of its operands, gives that value as the result. For example, the number 1 is an idempotent of multiplication: .\n*A binary operation is called idempotent if all elements are idempotent elements with respect to the operation. In other words, whenever it is applied to two equal values, it gives that value as the result. For example, the function giving the maximum value of two equal values is idempotent: .\n\nDefinitions \n\nUnary operation\n\nA unary operation f, that is, a map from some set S into itself, is called idempotent if, for all x in S,\nf\\!\\left(f\\!\\left(x\\right)\\right) = f\\!\\left(x\\right).\n\nIn particular, the identity function \\text{id}_S, defined by \\text{id}_S\\left(x\\right) x, is idempotent, as is the constant function K_c, where c is an element of S, defined by K_c\\left(x\\right) \n c.\n\nAn important class of idempotent functions is given by projections in a vector space. An example of a projection is the function \\pi_{xy} defined by \\pi_{xy}\\left(x, y, z\\right) = \\left(x, y, 0\\right), which projects an arbitrary point in 3D space to a point on the xy-plane, where the third coordinate (z) is equal to 0.\n\nA unary operation f\\colon S \\to S is idempotent if it maps each element of S to a fixed point of f. We can partition a set with n elements into k chosen fixed points and n-k non-fixed points, and then k^{n-k} is the number of different idempotent functions. Hence, taking into account all possible partitions,\n\\sum_{k=0}^n {n \\choose k} k^{n-k}\nis the total number of possible idempotent functions on the set. The integer sequence of the number of idempotent functions as given by the sum above for n = \\left\\{0, 1, 2, \\dots\\right\\} starts  with 1, 1, 3, 10, 41, 196, 1057, 6322, 41393, \\dots.  \n\nNeither the property of being idempotent nor that of being not is preserved under composition of unary functions.If f and g commute, i.e. if , then idempotency of both f and g implies that of , since , using the associativity of composition. As an example for the former,  mod 3 and g(x) max(x, 5) are both idempotent, but  is not,e.g. f(g(7)) \n f(7) 1, but f(g(1)) \n f(5) = 2 ≠ 1 although  happens to be.also showing that commutation of f and g is not a necessary condition for idempotency preservation As an example for the latter, the negation function ¬ on truth values isn't idempotent, but  is.\n\nIdempotent elements and binary operations\n\nGiven a binary operation \\bigstar on a set S, an element x is said to be idempotent (with respect to \\bigstar) if:\nx \\,\\bigstar\\, x = x.\nIn particular an identity element of \\bigstar, if it exists, is idempotent with respect to the operation \\bigstar, and the same is true of an absorbing element.\nThe binary operation itself is called idempotent if every element of S is idempotent. That is, for all x \\in S where \\in denotes set membership:\nx \\,\\bigstar\\, x = x.\nFor example, the operations of set union and set intersection are both idempotent, as are logical conjunction and logical disjunction, and, in general, the meet and join operations of a lattice.\n\nConnections\n\nThe connections between the three notions are as follows.\n\n*The statement that the binary operation ★  on a set S is idempotent, is equivalent to the statement that every element of S is idempotent for ★.\n*The defining property of unary idempotence,  for x in the domain of f, can equivalently be rewritten as , using the binary operation of function composition denoted by ∘. Thus, the statement that f is an idempotent unary operation on S is equivalent to the statement that f is an idempotent element with respect to the function composition operation ∘ on functions from S to S.\n\nCommon examples\n\nFunctions \n\nAs mentioned above, the identity map and the constant maps are always idempotent maps.  The absolute value function of a real or complex argument, and the floor function of a real argument are idempotent.\n\nThe function that assigns to every subset U of some topological space X the closure of U is idempotent on the power set \\mathcal{P}\\left(X\\right) of X. It is an example of a closure operator; all closure operators are idempotent functions.\n\nThe operation of subtracting the mean of a list of numbers from every number in the list is idempotent.  For example, consider the numbers 3, 6, 8, 8, \\text{and }10.  The mean is \\frac{3 + 6 + 8 + 8 + 10}{5} \\frac{35}{5} \n 7. Subtracting 7 from every number in the list yields \\left(-4\\right), \\left(-1\\right), 1, 1, 3.  The mean of that list is \\frac{\\left(-4\\right) + \\left(-1\\right) + 1 + 1 +3}{5} \\frac{0}{5} \n 0. Subtracting 0 from every number in that list yields the same list.\n\nFormal languages \n\nThe Kleene star and Kleene plus operators used to express repetition in formal languages are idempotent.\n\nIdempotent ring elements \n\nAn idempotent element of a ring is, by definition, an element that is idempotent for the ring's multiplication.See Hazewinkel et al. (2004), p. 2. That is, an element a is idempotent precisely when .\n\nIdempotent elements of rings yield direct decompositions of modules, and play a role in describing other homological properties of the ring. \nWhile \"idempotent\" usually refers to the multiplication operation of a ring, there are rings in which both operations are idempotent: Boolean algebras are such an example.\n\nOther examples \n\nIn Boolean algebra, both the 'logical and' and the 'logical or' operations are idempotent. This implies that every element of Boolean algebra is idempotent with respect to both of these operations. Specifically, x \\wedge x x and x \\vee x \n x for all x.  \nIn linear algebra, projections are idempotent. In fact, the projections of a vector space are exactly the idempotent elements of the ring of linear transformations of the vector space.  After fixing a basis, it can be shown that the matrix of a projection with respect to this basis is an idempotent matrix.\nAn idempotent semiring (also sometimes called a dioid) is a semiring whose addition (not multiplication) is idempotent. If both operations of the semiring are idempotent, then the semiring is called doubly idempotent.Gondran & Minoux. Graphs, dioids and semirings. Springer, 2008, p. 34\n\nComputer science meaning\n\nIn computer science, the term idempotent is used more comprehensively to describe an operation that will produce the same results if executed once or multiple times.  This may have a different meaning depending on the context in which it is applied.  In the case of methods or subroutine calls with side effects, for instance, it means that the modified state remains the same after the first call.  In functional programming, though, an idempotent function is one that has the property  for any value x.http://foldoc.org/idempotent\n\nThis is a very useful property in many situations, as it means that an operation can be repeated or retried as often as necessary without causing unintended effects. With non-idempotent operations, the algorithm may have to keep track of whether the operation was already performed or not.\n\nExamples \n\nA function looking up a customer's name and address in a database is typically idempotent, since this will not cause the database to change.  Similarly, changing a customer's address is typically idempotent, because the final address will be the same no matter how many times it is submitted. However, placing an order for a car for the customer is typically not idempotent, since running the call several times will lead to several orders being placed. Canceling an order is idempotent, because the order remains canceled no matter how many requests are made.\n\nA composition of idempotent methods or subroutines, however, is not necessarily idempotent if a later method in the sequence changes a value that an earlier method depends on – idempotence is not closed under composition.  For example, suppose the initial value of a variable is 3 and there is a sequence that reads the variable, then changes it to 5, and then reads it again.  Each step in the sequence is idempotent: both steps reading the variable have no side effects and changing a variable to 5 will always have the same effect no matter how many times it is executed.  Nonetheless, executing the entire sequence once produces the output (3, 5), but executing it a second time produces the output (5, 5), so the sequence is not idempotent.\n\nIn the Hypertext Transfer Protocol (HTTP), idempotence and safety are the major attributes that separate HTTP verbs.  Of the major HTTP verbs, GET, PUT, and DELETE should be implemented in an idempotent manner according to the standard, but POST need not be.IETF, [http://tools.ietf.org/html/rfc7231#section-4.2.2 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content].  See also HyperText Transfer Protocol.  GET retrieves a resource; PUT stores content at a resource; and DELETE eliminates a resource.  As in the example above, reading data usually has no side effects, so it is idempotent (in fact nullipotent).  Storing and deleting a given set of content are each usually idempotent as long as the request specifies a location or identifier that uniquely identifies that resource and only that resource again in the future.  The PUT and DELETE operations with unique identifiers reduce to the simple case of assignment to an immutable variable of either a value or the null-value, respectively, and are idempotent for the same reason; the end result is always the same as the result of the initial execution, even if the response differs.\n\nViolation of the unique identification requirement in storage or deletion typically causes violation of idempotence.  For example, storing or deleting a given set of content without specifying a unique identifier: POST requests, which do not need to be idempotent, often do not contain unique identifiers, so the creation of the identifier is delegated to the receiving system which then creates a corresponding new record.  Similarly, PUT and DELETE requests with nonspecific criteria may result in different outcomes depending on the state of the system - for example, a request to delete the most recent record. In each case, subsequent executions will further modify the state of the system, so they are not idempotent. \n\nIn Event Stream Processing, idempotence refers to the ability of a system to produce the same outcome, even if an event or message is received more than once.\n\nIn a load-store architecture, instructions that might possibly cause a page fault are idempotent. So if a page fault occurs, the OS can load the page from disk and then simply re-execute the faulted instruction.  In a processor where such instructions are not idempotent, dealing with page faults is much more complex.\n\nWhen reformatting output, pretty-printing is expected to be idempotent. In other words, if the output is already \"pretty\", there should be nothing to do for the pretty-printer.\n\nApplied examples\n\nApplied examples that many people could encounter in their day-to-day lives include elevator call buttons and crosswalk buttons.https://web.archive.org/web/20110523081716/http://www.nclabor.com/elevator/geartrac.pdf  For example, this design specification includes detailed algorithm for when elevator cars will respond to subsequent calls for service The initial activation of the button moves the system into a requesting state, until the request is satisfied. Subsequent activations of the button between the initial activation and the request being satisfied have no effect.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Idempotence" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=14972" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "Idempotence (UK:; US: ) is the property of certain operations in mathematics and computer science that they can be applied multiple times without changing the result beyond the initial application. The concept of idempotence arises in a number of places in abstract algebra (in particular, in the theory of projectors and closure operators) and functional programming (in which it is connected to the property of referential transparency).\n\nThe term was introduced by Benjamin PeircePolcino & Sehgal (2002), p. 127. in the context of elements of algebras that remain invariant when raised to a positive integer power, and literally means \"(the quality of having) the same power\", from idem + potence (same + power).\n\nThere are several meanings of idempotence, depending on what the concept is applied to:\n\n*A unary operation (or function) is idempotent if, whenever it is applied twice to any value, it gives the same result as if it were applied once; i.e., . For example, the absolute value function, where , is idempotent.\n*Given a binary operation, an idempotent element (or simply an \"idempotent\") for the operation is a value for which the operation, when given that value for both of its operands, gives that value as the result. For example, the number 1 is an idempotent of multiplication: .\n*A binary operation is called idempotent if all elements are idempotent elements with respect to the operation. In other words, whenever it is applied to two equal values, it gives that value as the result. For example, the function giving the maximum value of two equal values is idempotent: .\n\nDefinitions \n\nUnary operation\n\nA unary operation f, that is, a map from some set S into itself, is called idempotent if, for all x in S,\nf\\!\\left(f\\!\\left(x\\right)\\right) = f\\!\\left(x\\right).\n\nIn particular, the identity function \\text{id}_S, defined by \\text{id}_S\\left(x\\right) x, is idempotent, as is the constant function K_c, where c is an element of S, defined by K_c\\left(x\\right) \n c.\n\nAn important class of idempotent functions is given by projections in a vector space. An example of a projection is the function \\pi_{xy} defined by \\pi_{xy}\\left(x, y, z\\right) = \\left(x, y, 0\\right), which projects an arbitrary point in 3D space to a point on the xy-plane, where the third coordinate (z) is equal to 0.\n\nA unary operation f\\colon S \\to S is idempotent if it maps each element of S to a fixed point of f. We can partition a set with n elements into k chosen fixed points and n-k non-fixed points, and then k^{n-k} is the number of different idempotent functions. Hence, taking into account all possible partitions,\n\\sum_{k=0}^n {n \\choose k} k^{n-k}\nis the total number of possible idempotent functions on the set. The integer sequence of the number of idempotent functions as given by the sum above for n = \\left\\{0, 1, 2, \\dots\\right\\} starts  with 1, 1, 3, 10, 41, 196, 1057, 6322, 41393, \\dots.  \n\nNeither the property of being idempotent nor that of being not is preserved under composition of unary functions.If f and g commute, i.e. if , then idempotency of both f and g implies that of , since , using the associativity of composition. As an example for the former,  mod 3 and g(x) max(x, 5) are both idempotent, but  is not,e.g. f(g(7)) \n f(7) 1, but f(g(1)) \n f(5) = 2 ≠ 1 although  happens to be.also showing that commutation of f and g is not a necessary condition for idempotency preservation As an example for the latter, the negation function ¬ on truth values isn't idempotent, but  is.\n\nIdempotent elements and binary operations\n\nGiven a binary operation \\bigstar on a set S, an element x is said to be idempotent (with respect to \\bigstar) if:\nx \\,\\bigstar\\, x = x.\nIn particular an identity element of \\bigstar, if it exists, is idempotent with respect to the operation \\bigstar, and the same is true of an absorbing element.\nThe binary operation itself is called idempotent if every element of S is idempotent. That is, for all x \\in S where \\in denotes set membership:\nx \\,\\bigstar\\, x = x.\nFor example, the operations of set union and set intersection are both idempotent, as are logical conjunction and logical disjunction, and, in general, the meet and join operations of a lattice.\n\nConnections\n\nThe connections between the three notions are as follows.\n\n*The statement that the binary operation ★  on a set S is idempotent, is equivalent to the statement that every element of S is idempotent for ★.\n*The defining property of unary idempotence,  for x in the domain of f, can equivalently be rewritten as , using the binary operation of function composition denoted by ∘. Thus, the statement that f is an idempotent unary operation on S is equivalent to the statement that f is an idempotent element with respect to the function composition operation ∘ on functions from S to S.\n\nCommon examples\n\nFunctions \n\nAs mentioned above, the identity map and the constant maps are always idempotent maps.  The absolute value function of a real or complex argument, and the floor function of a real argument are idempotent.\n\nThe function that assigns to every subset U of some topological space X the closure of U is idempotent on the power set \\mathcal{P}\\left(X\\right) of X. It is an example of a closure operator; all closure operators are idempotent functions.\n\nThe operation of subtracting the mean of a list of numbers from every number in the list is idempotent.  For example, consider the numbers 3, 6, 8, 8, \\text{and }10.  The mean is \\frac{3 + 6 + 8 + 8 + 10}{5} \\frac{35}{5} \n 7. Subtracting 7 from every number in the list yields \\left(-4\\right), \\left(-1\\right), 1, 1, 3.  The mean of that list is \\frac{\\left(-4\\right) + \\left(-1\\right) + 1 + 1 +3}{5} \\frac{0}{5} \n 0. Subtracting 0 from every number in that list yields the same list.\n\nFormal languages \n\nThe Kleene star and Kleene plus operators used to express repetition in formal languages are idempotent.\n\nIdempotent ring elements \n\nAn idempotent element of a ring is, by definition, an element that is idempotent for the ring's multiplication.See Hazewinkel et al. (2004), p. 2. That is, an element a is idempotent precisely when .\n\nIdempotent elements of rings yield direct decompositions of modules, and play a role in describing other homological properties of the ring. \nWhile \"idempotent\" usually refers to the multiplication operation of a ring, there are rings in which both operations are idempotent: Boolean algebras are such an example.\n\nOther examples \n\nIn Boolean algebra, both the 'logical and' and the 'logical or' operations are idempotent. This implies that every element of Boolean algebra is idempotent with respect to both of these operations. Specifically, x \\wedge x x and x \\vee x \n x for all x.  \nIn linear algebra, projections are idempotent. In fact, the projections of a vector space are exactly the idempotent elements of the ring of linear transformations of the vector space.  After fixing a basis, it can be shown that the matrix of a projection with respect to this basis is an idempotent matrix.\nAn idempotent semiring (also sometimes called a dioid) is a semiring whose addition (not multiplication) is idempotent. If both operations of the semiring are idempotent, then the semiring is called doubly idempotent.Gondran & Minoux. Graphs, dioids and semirings. Springer, 2008, p. 34\n\nComputer science meaning\n\nIn computer science, the term idempotent is used more comprehensively to describe an operation that will produce the same results if executed once or multiple times.  This may have a different meaning depending on the context in which it is applied.  In the case of methods or subroutine calls with side effects, for instance, it means that the modified state remains the same after the first call.  In functional programming, though, an idempotent function is one that has the property  for any value x.http://foldoc.org/idempotent\n\nThis is a very useful property in many situations, as it means that an operation can be repeated or retried as often as necessary without causing unintended effects. With non-idempotent operations, the algorithm may have to keep track of whether the operation was already performed or not.\n\nExamples \n\nA function looking up a customer's name and address in a database is typically idempotent, since this will not cause the database to change.  Similarly, changing a customer's address is typically idempotent, because the final address will be the same no matter how many times it is submitted. However, placing an order for a car for the customer is typically not idempotent, since running the call several times will lead to several orders being placed. Canceling an order is idempotent, because the order remains canceled no matter how many requests are made.\n\nA composition of idempotent methods or subroutines, however, is not necessarily idempotent if a later method in the sequence changes a value that an earlier method depends on – idempotence is not closed under composition.  For example, suppose the initial value of a variable is 3 and there is a sequence that reads the variable, then changes it to 5, and then reads it again.  Each step in the sequence is idempotent: both steps reading the variable have no side effects and changing a variable to 5 will always have the same effect no matter how many times it is executed.  Nonetheless, executing the entire sequence once produces the output (3, 5), but executing it a second time produces the output (5, 5), so the sequence is not idempotent.\n\nIn the Hypertext Transfer Protocol (HTTP), idempotence and safety are the major attributes that separate HTTP verbs.  Of the major HTTP verbs, GET, PUT, and DELETE should be implemented in an idempotent manner according to the standard, but POST need not be.IETF, [http://tools.ietf.org/html/rfc7231#section-4.2.2 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content].  See also HyperText Transfer Protocol.  GET retrieves a resource; PUT stores content at a resource; and DELETE eliminates a resource.  As in the example above, reading data usually has no side effects, so it is idempotent (in fact nullipotent).  Storing and deleting a given set of content are each usually idempotent as long as the request specifies a location or identifier that uniquely identifies that resource and only that resource again in the future.  The PUT and DELETE operations with unique identifiers reduce to the simple case of assignment to an immutable variable of either a value or the null-value, respectively, and are idempotent for the same reason; the end result is always the same as the result of the initial execution, even if the response differs.\n\nViolation of the unique identification requirement in storage or deletion typically causes violation of idempotence.  For example, storing or deleting a given set of content without specifying a unique identifier: POST requests, which do not need to be idempotent, often do not contain unique identifiers, so the creation of the identifier is delegated to the receiving system which then creates a corresponding new record.  Similarly, PUT and DELETE requests with nonspecific criteria may result in different outcomes depending on the state of the system - for example, a request to delete the most recent record. In each case, subsequent executions will further modify the state of the system, so they are not idempotent. \n\nIn Event Stream Processing, idempotence refers to the ability of a system to produce the same outcome, even if an event or message is received more than once.\n\nIn a load-store architecture, instructions that might possibly cause a page fault are idempotent. So if a page fault occurs, the OS can load the page from disk and then simply re-execute the faulted instruction.  In a processor where such instructions are not idempotent, dealing with page faults is much more complex.\n\nWhen reformatting output, pretty-printing is expected to be idempotent. In other words, if the output is already \"pretty\", there should be nothing to do for the pretty-printer.\n\nApplied examples\n\nApplied examples that many people could encounter in their day-to-day lives include elevator call buttons and crosswalk buttons.https://web.archive.org/web/20110523081716/http://www.nclabor.com/elevator/geartrac.pdf  For example, this design specification includes detailed algorithm for when elevator cars will respond to subsequent calls for service The initial activation of the button moves the system into a requesting state, until the request is satisfied. Subsequent activations of the button between the initial activation and the request being satisfied have no effect. Idempotence. http://en.wikipedia.org/?curid=14972."
  }
}
