{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=6867",
  "eid" : "de5dac10-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778452817,
  "textBody" : "In formal language theory, a  context-free language (CFL) is a language generated by a context-free grammar (CFG).\n\nContext-free languages have many applications in programming languages, in particular, most arithmetic expressions are generated by context-free grammars.\n\nBackground\n\nContext-free grammar\n\nDifferent context-free grammars can generate the same context-free language. Intrinsic properties of the language can be distinguished from extrinsic properties of a particular grammar by comparing multiple grammars that describe the language.\n\nAutomata\n\nThe set of all context-free languages is identical to the set of languages accepted by pushdown automata, which makes these languages amenable to parsing. Further, for a given CFG, there is a direct way to produce a pushdown automaton for the grammar (and thereby the corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.\n\nExamples\n\nA model context-free language is L = \\{a^nb^n:n\\geq1\\}, the language of all non-empty even-length strings, the entire first halves of which are 's, and the entire second halves of which are 's.  is generated by the grammar S\\to aSb ~|~ ab.\nThis language is not regular.\nIt is accepted by the pushdown automaton M(\\{q_0,q_1,q_f\\}, \\{a,b\\}, \\{a,z\\}, \\delta, q_0, z, \\{q_f\\}) where \\delta is defined as follows:meaning of \\delta's arguments and results: \\delta(\\mathrm{state}_1, \\mathrm{read}, \\mathrm{pop}) = (\\mathrm{state}_2, \\mathrm{push})\n\n\\begin{align}\n\\delta(q_0, a, z) &= (q_0, az) \\\\\n\\delta(q_0, a, a) &= (q_0, aa) \\\\\n\\delta(q_0, b, a) &= (q_1, \\varepsilon) \\\\\n\\delta(q_1, b, a) &= (q_1, \\varepsilon) \\\\\n\\delta(q_1, \\varepsilon, z) &= (q_f, \\varepsilon)\n\\end{align}\n\nUnambiguous CFLs are a proper subset of all CFLs: there are inherently ambiguous CFLs. An example of an inherently ambiguous CFL is the union of \\{a^n b^m c^m d^n | n, m > 0\\} with \\{a^n b^n c^m d^m | n, m > 0\\}. This set is context-free, since the union of two context-free languages is always context-free. But there is no way to unambiguously parse strings in the (non-context-free) subset \\{a^n b^n c^n d^n | n > 0\\} which is the intersection of these two languages.\n\nDyck language\n\nThe language of all properly matched parentheses is generated by the grammar S\\to SS ~|~ (S) ~|~ \\varepsilon.\n\nProperties\n\nContext-free parsing\n\nThe context-free nature of the language makes it simple to parse with a pushdown automaton.\n\nDetermining an instance of the membership problem; i.e. given a string w, determine whether w \\in L(G) where L is the language generated by a given grammar G; is also known as recognition. Context-free recognition for Chomsky normal form grammars was shown by Leslie G. Valiant to be reducible to boolean matrix multiplication, thus inheriting its complexity upper bound of O(n2.3728639).In Valiant's papers, O(n2.81) given, the then best known upper bound. See Matrix multiplication#Algorithms for efficient matrix multiplication and Coppersmith–Winograd algorithm for bound improvements since then.\nConversely, Lillian Lee has shown O(n3−ε) boolean matrix multiplication to be reducible to O(n3−3ε) CFG parsing, thus establishing some kind of lower bound for the latter.\n\nPractical uses of context-free languages require also to produce a derivation tree that exhibits the  structure that the grammar associates with the given string. The process of producing this tree is called parsing. Known parsers have a time complexity that is cubic in the size of the string that is parsed.\n\nFormally, the set of all context-free languages is identical to the set of languages accepted by pushdown automata (PDA). Parser algorithms for context-free languages include the CYK algorithm and Earley's Algorithm.\n\nA special subclass of context-free languages are the deterministic context-free languages which are defined as the set of languages accepted by a deterministic pushdown automaton and can be parsed by a LR(k) parser.\n\nSee also parsing expression grammar as an alternative approach to grammar and parser.\n\nClosure\n\nContext-free languages are closed under the following operations. That is, if L and P are context-free languages, the following languages are context-free as well:\n*the union L \\cup P of L and P\n*the reversal of L\n*the concatenation L \\cdot P of L and P\n*the Kleene star L^* of L\n*the image \\varphi(L) of L under a homomorphism \\varphi\n*the image \\varphi^{-1}(L) of L under an inverse homomorphism \\varphi^{-1}\n*the cyclic shift of L (the language \\{vu : uv \\in L \\})\n\nContext-free languages are not closed under complement, intersection, or difference. This was proved by Scheinberg in 1960.Stephen Scheinberg, Note on the Boolean Properties of Context Free Languages, Information and Control, 3, 372-375 (1960) However, if L is a context-free language and D is a regular language then both their intersection L\\cap D and their difference L\\setminus D are context-free languages.\n\nNonclosure under intersection, complement, and difference\n\nThe context-free languages are not closed under intersection.  This can be seen by taking the languages A \\{a^n b^n c^m \\mid m, n \\geq 0 \\} and B \n \\{a^m b^n c^n \\mid m,n \\geq 0\\}, which are both context-free.A context-free grammar for the language A is given by the following production rules, taking S as the start symbol: S → Sc | aTb | ε; T → aTb | ε. The grammar for B is analogous. Their intersection is A \\cap B \n \\{ a^n b^n c^n \\mid n \\geq 0\\}, which can be shown to be non-context-free by the pumping lemma for context-free languages.\n\nContext-free languages are also not closed under complementation, as for any languages A and B:  A \\cap B = \\overline{\\overline{A} \\cup \\overline{B}} .\n\nContext-free language are also not closed under difference: LC Σ* \\ L.\n\nDecidability\n\nThe following problems are undecidable for arbitrarily given context-free grammars A and B:\n*Equivalence: is L(A)=L(B)?\n*Disjointness: is L(A) \\cap L(B) = \\emptyset  ? However, the intersection of a context-free language and a regular language is context-free,, p. 59, Theorem 6.7 hence the variant of the problem where B is a regular grammar is decidable (see \"Emptiness\" below).\n*Containment: is L(A) \\subseteq L(B) ? Again, the variant of the problem where B is a regular grammar is decidable, while that where A is regular is generally not.\n*Universality: is L(A)=\\Sigma^* ?\n\nThe following problems are decidable for arbitrary context-free languages:\n*Emptiness: Given a context-free grammar A, is L(A) = \\emptyset ?\n*Finiteness: Given a context-free grammar A, is L(A) finite?\n*Membership: Given a context-free grammar G, and  a word w, does w \\in L(G) ? Efficient polynomial-time algorithms for the membership problem are the CYK algorithm and Earley's Algorithm.\n\nAccording to Hopcroft, Motwani, Ullman (2003), Here: Sect.7.6, p.304, and Sect.9.7, p.411 \nmany of the fundamental closure and (un)decidability properties of context-free languages were shown in the 1961 paper of Bar-Hillel, Perles, and Shamir\n\nLanguages that are not context-free\n\nThe set \\{a^n b^n c^n d^n | n > 0\\} is a context-sensitive language, but there does not exist a context-free grammar generating this language. So there exist context-sensitive languages which are not context-free. To prove that a given language is not context-free, one may employ the pumping lemma for context-free languages or a number of other methods, such as Ogden's lemma or Parikh's theorem.[http://cs.stackexchange.com/questions/265/how-to-prove-that-a-language-is-not-context-free How to prove that a language is not context-free?]\n\nNotes",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Context-free language" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=6867" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In formal language theory, a  context-free language (CFL) is a language generated by a context-free grammar (CFG).\n\nContext-free languages have many applications in programming languages, in particular, most arithmetic expressions are generated by context-free grammars.\n\nBackground\n\nContext-free grammar\n\nDifferent context-free grammars can generate the same context-free language. Intrinsic properties of the language can be distinguished from extrinsic properties of a particular grammar by comparing multiple grammars that describe the language.\n\nAutomata\n\nThe set of all context-free languages is identical to the set of languages accepted by pushdown automata, which makes these languages amenable to parsing. Further, for a given CFG, there is a direct way to produce a pushdown automaton for the grammar (and thereby the corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.\n\nExamples\n\nA model context-free language is L = \\{a^nb^n:n\\geq1\\}, the language of all non-empty even-length strings, the entire first halves of which are 's, and the entire second halves of which are 's.  is generated by the grammar S\\to aSb ~|~ ab.\nThis language is not regular.\nIt is accepted by the pushdown automaton M(\\{q_0,q_1,q_f\\}, \\{a,b\\}, \\{a,z\\}, \\delta, q_0, z, \\{q_f\\}) where \\delta is defined as follows:meaning of \\delta's arguments and results: \\delta(\\mathrm{state}_1, \\mathrm{read}, \\mathrm{pop}) = (\\mathrm{state}_2, \\mathrm{push})\n\n\\begin{align}\n\\delta(q_0, a, z) &= (q_0, az) \\\\\n\\delta(q_0, a, a) &= (q_0, aa) \\\\\n\\delta(q_0, b, a) &= (q_1, \\varepsilon) \\\\\n\\delta(q_1, b, a) &= (q_1, \\varepsilon) \\\\\n\\delta(q_1, \\varepsilon, z) &= (q_f, \\varepsilon)\n\\end{align}\n\nUnambiguous CFLs are a proper subset of all CFLs: there are inherently ambiguous CFLs. An example of an inherently ambiguous CFL is the union of \\{a^n b^m c^m d^n | n, m > 0\\} with \\{a^n b^n c^m d^m | n, m > 0\\}. This set is context-free, since the union of two context-free languages is always context-free. But there is no way to unambiguously parse strings in the (non-context-free) subset \\{a^n b^n c^n d^n | n > 0\\} which is the intersection of these two languages.\n\nDyck language\n\nThe language of all properly matched parentheses is generated by the grammar S\\to SS ~|~ (S) ~|~ \\varepsilon.\n\nProperties\n\nContext-free parsing\n\nThe context-free nature of the language makes it simple to parse with a pushdown automaton.\n\nDetermining an instance of the membership problem; i.e. given a string w, determine whether w \\in L(G) where L is the language generated by a given grammar G; is also known as recognition. Context-free recognition for Chomsky normal form grammars was shown by Leslie G. Valiant to be reducible to boolean matrix multiplication, thus inheriting its complexity upper bound of O(n2.3728639).In Valiant's papers, O(n2.81) given, the then best known upper bound. See Matrix multiplication#Algorithms for efficient matrix multiplication and Coppersmith–Winograd algorithm for bound improvements since then.\nConversely, Lillian Lee has shown O(n3−ε) boolean matrix multiplication to be reducible to O(n3−3ε) CFG parsing, thus establishing some kind of lower bound for the latter.\n\nPractical uses of context-free languages require also to produce a derivation tree that exhibits the  structure that the grammar associates with the given string. The process of producing this tree is called parsing. Known parsers have a time complexity that is cubic in the size of the string that is parsed.\n\nFormally, the set of all context-free languages is identical to the set of languages accepted by pushdown automata (PDA). Parser algorithms for context-free languages include the CYK algorithm and Earley's Algorithm.\n\nA special subclass of context-free languages are the deterministic context-free languages which are defined as the set of languages accepted by a deterministic pushdown automaton and can be parsed by a LR(k) parser.\n\nSee also parsing expression grammar as an alternative approach to grammar and parser.\n\nClosure\n\nContext-free languages are closed under the following operations. That is, if L and P are context-free languages, the following languages are context-free as well:\n*the union L \\cup P of L and P\n*the reversal of L\n*the concatenation L \\cdot P of L and P\n*the Kleene star L^* of L\n*the image \\varphi(L) of L under a homomorphism \\varphi\n*the image \\varphi^{-1}(L) of L under an inverse homomorphism \\varphi^{-1}\n*the cyclic shift of L (the language \\{vu : uv \\in L \\})\n\nContext-free languages are not closed under complement, intersection, or difference. This was proved by Scheinberg in 1960.Stephen Scheinberg, Note on the Boolean Properties of Context Free Languages, Information and Control, 3, 372-375 (1960) However, if L is a context-free language and D is a regular language then both their intersection L\\cap D and their difference L\\setminus D are context-free languages.\n\nNonclosure under intersection, complement, and difference\n\nThe context-free languages are not closed under intersection.  This can be seen by taking the languages A \\{a^n b^n c^m \\mid m, n \\geq 0 \\} and B \n \\{a^m b^n c^n \\mid m,n \\geq 0\\}, which are both context-free.A context-free grammar for the language A is given by the following production rules, taking S as the start symbol: S → Sc | aTb | ε; T → aTb | ε. The grammar for B is analogous. Their intersection is A \\cap B \n \\{ a^n b^n c^n \\mid n \\geq 0\\}, which can be shown to be non-context-free by the pumping lemma for context-free languages.\n\nContext-free languages are also not closed under complementation, as for any languages A and B:  A \\cap B = \\overline{\\overline{A} \\cup \\overline{B}} .\n\nContext-free language are also not closed under difference: LC Σ* \\ L.\n\nDecidability\n\nThe following problems are undecidable for arbitrarily given context-free grammars A and B:\n*Equivalence: is L(A)=L(B)?\n*Disjointness: is L(A) \\cap L(B) = \\emptyset  ? However, the intersection of a context-free language and a regular language is context-free,, p. 59, Theorem 6.7 hence the variant of the problem where B is a regular grammar is decidable (see \"Emptiness\" below).\n*Containment: is L(A) \\subseteq L(B) ? Again, the variant of the problem where B is a regular grammar is decidable, while that where A is regular is generally not.\n*Universality: is L(A)=\\Sigma^* ?\n\nThe following problems are decidable for arbitrary context-free languages:\n*Emptiness: Given a context-free grammar A, is L(A) = \\emptyset ?\n*Finiteness: Given a context-free grammar A, is L(A) finite?\n*Membership: Given a context-free grammar G, and  a word w, does w \\in L(G) ? Efficient polynomial-time algorithms for the membership problem are the CYK algorithm and Earley's Algorithm.\n\nAccording to Hopcroft, Motwani, Ullman (2003), Here: Sect.7.6, p.304, and Sect.9.7, p.411 \nmany of the fundamental closure and (un)decidability properties of context-free languages were shown in the 1961 paper of Bar-Hillel, Perles, and Shamir\n\nLanguages that are not context-free\n\nThe set \\{a^n b^n c^n d^n | n > 0\\} is a context-sensitive language, but there does not exist a context-free grammar generating this language. So there exist context-sensitive languages which are not context-free. To prove that a given language is not context-free, one may employ the pumping lemma for context-free languages or a number of other methods, such as Ogden's lemma or Parikh's theorem.[http://cs.stackexchange.com/questions/265/how-to-prove-that-a-language-is-not-context-free How to prove that a language is not context-free?]\n\nNotes. Context-free language. http://en.wikipedia.org/?curid=6867."
  }
}
