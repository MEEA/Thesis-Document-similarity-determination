{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=11306",
  "eid" : "fafa8050-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778500821,
  "textBody" : "In artificial intelligence, the frame problem describes an issue with using first-order logic (FOL) to express facts about a robot in the world. Representing the state of a robot with traditional FOL requires the use of many axioms that simply imply that things in the environment do not change arbitrarily. For example, Hayes describes a \"block world\" with rules about stacking blocks together. In a FOL system, additional axioms are required to make inferences about the environment (for example, that a block cannot change position unless it is physically moved). The frame problem is the problem of finding adequate collections of axioms for a viable description of a robot environment.\n\nJohn McCarthy and Patrick J. Hayes defined this problem in their 1969 article, Some Philosophical Problems from the Standpoint of Artificial Intelligence.  In this paper, and many that came after, the formal mathematical problem was a starting point for more general discussions of the difficulty of knowledge representation for artificial intelligence. Issues such as how to provide rational default assumptions and what humans consider common sense in a virtual environment.  Later, the term acquired a broader meaning in philosophy, where it is formulated as the problem of limiting the beliefs that have to be updated in response to actions. In the logical context, actions are typically specified by what they change, with the implicit assumption that everything else (the frame) remains unchanged.\n\nDescription\n\nThe frame problem occurs even in very simple domains. A scenario with a door, which can be open or closed, and a light, which can be on or off, is statically represented by two propositions \\textit{open} and \\textit{on}. If these conditions can change, they are better represented by two predicates \\textit{open}(t) and \\textit{on}(t) that depend on time; such predicates are called fluents. A domain in which the door is closed and the light off at time 0, and the door opened at time 1, can be directly represented in logic by the following formulae:\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\textit{true} \\rightarrow \\textit{open}(1)\n\nThe first two formulae represent the initial situation; the third formula represents the effect of executing the action of opening the door at time 1. If such an action had preconditions, such as the door being unlocked, it would have been represented by \\neg \\textit{locked}(0) \\rightarrow \\textit{open}(1). In practice, one would have a predicate \\textit{executeopen}(t) for specifying when an action is executed and a rule \\forall t . \\textit{executeopen}(t) \\wedge \\textit{true} \\rightarrow \\textit{open}(t+1) for specifying the effects of actions.  The article on the situation calculus gives more details.\n\nWhile the three formulae above are a direct expression in logic of what is known, they do not suffice to correctly draw consequences. While the following conditions (representing the expected situation) are consistent with the three formulae above, they are not the only ones.\n\nIndeed, another set of conditions that is consistent with the three formulae above is:\n\nThe frame problem is that specifying only which conditions are changed by the actions does not entail that all other conditions are not changed. This problem can be solved by adding the so-called “frame axioms”, which explicitly specify that all conditions not affected by actions are not changed while executing that action. For example, since the action executed at time 0 is that of opening the door, a frame axiom would state that the status of the light does not change from time 0 to time 1:\n\n\\textit{on}(0) \\leftrightarrow \\textit{on}(1)\n\nThe frame problem is that one such frame axiom is necessary for every pair of action and condition such that the action does not affect the condition. In other words, the problem is that of formalizing a dynamical domain without explicitly specifying the frame axioms.\n\nThe solution proposed by McCarthy to solve this problem involves assuming that a minimal amount of condition changes have occurred; this solution is formalized using the framework of circumscription. The Yale shooting problem, however, shows that this solution is not always correct. Alternative solutions were then proposed, involving predicate completion, fluent occlusion, successor state axioms, etc.; they are explained below. By the end of the 1980s, the frame problem as defined by McCarthy and Hayes was solved. Even after that, however, the term “frame problem” was still used, in part to refer to the same problem but under different settings (e.g., concurrent actions), and in part to refer to the general problem of representing and reasoning with dynamical domains.\n\nSolutions \n\nThe following solutions depict how the frame problem is solved in various formalisms. The formalisms themselves are not presented in full: what is presented are simplified versions that are sufficient to explain the full solution.\n\nFluent occlusion solution\n\nThis solution was proposed by Erik Sandewall, who also defined a formal language for the specification of dynamical domains; therefore, such a domain can be first expressed in this language and then automatically translated into logic. In this article, only the expression in logic is shown, and only in the simplified language with no action names.\n\nThe rationale of this solution is to represent not only the value of conditions over time, but also whether they can be affected by the last executed action. The latter is represented by another condition, called occlusion. A condition is said to be occluded in a given time point if an action has been just executed that makes the condition true or false as an effect. Occlusion can be viewed as “permission to change”: if a condition is occluded, it is relieved from obeying the constraint of inertia.\n\nIn the simplified example of the door and the light, occlusion can be formalized by two predicates \\textit{occludeopen}(t) and \\textit{occludeon}(t). The rationale is that a condition can change value only if the corresponding occlusion predicate is true at the next time point. In turn, the occlusion predicate is true only when an action affecting the condition is executed.\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\textit{true} \\rightarrow \\textit{open}(1) \\wedge \\textit{occludeopen}(1)\n\\forall t . \\neg \\textit{occludeopen}(t) \\rightarrow (\\textit{open}(t-1) \\leftrightarrow \\textit{open}(t))\n\\forall t . \\neg \\textit{occludeon}(t) \\rightarrow (\\textit{on}(t-1) \\leftrightarrow \\textit{on}(t))\n\nIn general, every action making a condition true or false also makes the corresponding occlusion predicate true. In this case, \\textit{occludeopen}(1) is true, making the antecedent of the fourth formula above false for t1; therefore, the constraint that \\textit{open}(t-1) \\leftrightarrow \\textit{open}(t) does not hold for t\n1. Therefore, \\textit{open} can change value, which is also what is enforced by the third formula.\n\nIn order for this condition to work, occlusion predicates have to be true only when they are made true as an effect of an action. This can be achieved either by circumscription or by predicate completion. It is worth noticing that occlusion does not necessarily imply a change: for example, executing the action of opening the door when it was already open (in the formalization above) makes the predicate \\textit{occludeopen} true and makes \\textit{open} true; however, \\textit{open} has not changed value, as it was true already.\n\nPredicate completion solution\n\nThis encoding is similar to the fluent occlusion solution, but the additional predicates denote change, not permission to change. For example, \\textit{changeopen}(t) represents the fact that the predicate \\textit{open} will change from time t to t+1. As a result, a predicate changes if and only if the corresponding change predicate is true. An action results in a change if and only if it makes true a condition that was previously false or vice versa.\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\neg \\textit{open}(0) \\wedge \\textit{true} \\rightarrow \\textit{changeopen}(0)\n\\forall t. \\textit{changeopen}(t) \\leftrightarrow (\\neg \\textit{open}(t) \\leftrightarrow \\textit{open}(t+1))\n\\forall t. \\textit{changeon}(t) \\leftrightarrow (\\neg \\textit{on}(t) \\leftrightarrow \\textit{on}(t+1))\n\nThe third formula is a different way of saying that opening the door causes the door to be opened. Precisely, it states that opening the door changes the state of the door if it had been previously closed. The last two conditions state that a condition changes value at time t if and only if the corresponding change predicate is true at time t. To complete the solution, the time points in which the change predicates are true have to be as few as possible, and this can be done by applying predicate completion to the rules specifying the effects of actions.\n\nSuccessor state axioms solution\n\nThe value of a condition after the execution of an action can be determined by\nthe fact that the condition is true if and only if:\n\n# the action makes the condition true; or\n# the condition was previously true and the action does not make it false.\n\nA successor state axiom is a formalization in logic of these two facts. For\nexample, if \\textit{opendoor}(t) and \\textit{closedoor}(t) are two\nconditions used to denote that the action executed at time t was\nto open or close the door, respectively, the running example is encoded as\nfollows.\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\textit{opendoor}(0)\n\\forall t . \\textit{open}(t+1) \\leftrightarrow \\textit{opendoor}(t) \\vee (\\textit{open}(t) \\wedge \\neg \\textit{closedoor}(t))\n\nThis solution is centered around the value of conditions, rather than the\neffects of actions. In other words, there is an axiom for every condition,\nrather than a formula for every action. Preconditions to actions (which are not\npresent in this example) are formalized by other formulae. The successor state\naxioms are used in the variant to the situation calculus proposed by\nRay Reiter.\n\nFluent calculus solution\n\nThe fluent calculus is a variant of the situation calculus. It solves the frame problem by using first-order logic\nterms, rather than predicates, to represent the states. Converting\npredicates into terms in first-order logic is called reification; the\nfluent calculus can be seen as a logic in which predicates representing the\nstate of conditions are reified.\n\nThe difference between a predicate and a term in first-order logic is that a term is a representation of an object (possibly a complex object composed of other objects), while a predicate represents a condition that can be true or false when evaluated over a given set of terms.\n\nIn the fluent calculus, each possible state is represented by a term obtained by composition of other terms, each one representing the conditions that are true in state. For example, the state in which the door is open and the light is on is represented by the term \\textit{open} \\circ \\textit{on}. It is important to notice that a term is not true or false by itself, as it is an object and not a condition. In other words, the term \\textit{open} \\circ \\textit{on} represent a possible state, and does not by itself mean that this is the current state. A separate condition can be stated to specify that this is actually the state at a given time, e.g., \\textit{state}(\\textit{open} \\circ \\textit{on}, 10) means that this is the state at time 10.\n\nThe solution to the frame problem given in the fluent calculus is to specify the effects of actions by stating how a term representing the state changes when the action is executed. For example, the action of opening the door at time 0 is represented by the formula:\n\n\\textit{state}(s \\circ \\textit{open}, 1) \\leftrightarrow \\textit{state}(s,0)\n\nThe action of closing the door, which makes a condition false instead of true, is represented in a slightly different way:\n\n\\textit{state}(s, 1) \\leftrightarrow \\textit{state}(s \\circ \\textit{open}, 0)\n\nThis formula works provided that suitable axioms are given about \\textit{state} and \\circ, e.g., a term containing the same condition twice is not a valid state (for example, \\textit{state}(\\textit{open} \\circ s \\circ \\textit{open}, t) is always false for every s and t).\n\nEvent calculus solution\n\nThe event calculus uses terms for representing fluents, like the fluent calculus, but also has axioms constraining the value of fluents, like the successor state axioms. In the event calculus, inertia is enforced by formulae stating that a fluent is true if it has been true at a given previous time point and no action changing it to false has been performed in the meantime. Predicate completion is still needed in the event calculus for obtaining that a fluent is made true only if an action making it true has been performed, but also for obtaining that an action had been performed only if that is explicitly stated.\n\nDefault logic solution\n\nThe frame problem can be thought of as the problem of formalizing the principle that, by default, \"everything is presumed to remain in the state in which it is\" (Leibniz, \"An Introduction to a Secret Encyclopædia\", c. 1679).  This default, sometimes called the commonsense law of inertia, was expressed by Raymond Reiter in default logic:\n\n\\frac{R(x,s)\\; :\\ R(x,\\textit{do}(a,s))}{R(x,\\textit{do}(a,s))}\n\n(if R(x) is true in situation s, and it can be assumedi.e., no contradicting information is known that R(x) remains true after executing action a, then we can conclude that R(x) remains true).\n\nSteve Hanks and Drew McDermott argued, on the basis of their Yale shooting example, that this solution to the frame problem is unsatisfactory.  Hudson Turner showed, however, that it works correctly in the presence of appropriate additional postulates.\n\nAnswer set programming solution\n\nThe counterpart of the default logic solution in the language of answer set programming is a rule with strong negation:\n\nr(X,T+1) \\leftarrow r(X,T),\\ \\hbox{not }\\sim r(X,T+1)\n\n(if r(X) is true at time T, and it can be assumed that r(X) remains true at time T+1, then we can conclude that r(X) remains true).\n\nAction description languages\n\nAction description languages elude the frame problem rather than solving it. An action description language is a formal language with a syntax that is specific for describing situations and actions. For example, that the action \\textit{opendoor} makes the door open if not locked is expressed by:\n\n\\textit{opendoor} causes \\textit{open} if \\neg \\textit{locked}\n\nThe semantics of an action description language depends on what the language can express (concurrent actions, delayed effects, etc.) and is usually based on transition systems.\n\nSince domains are expressed in these languages rather than directly in logic, the frame problem only arises when a specification given in an action description logic is to be translated into logic. Typically, however, a translation is given from these languages to answer set programming rather than first-order logic.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Frame problem" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=11306" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In artificial intelligence, the frame problem describes an issue with using first-order logic (FOL) to express facts about a robot in the world. Representing the state of a robot with traditional FOL requires the use of many axioms that simply imply that things in the environment do not change arbitrarily. For example, Hayes describes a \"block world\" with rules about stacking blocks together. In a FOL system, additional axioms are required to make inferences about the environment (for example, that a block cannot change position unless it is physically moved). The frame problem is the problem of finding adequate collections of axioms for a viable description of a robot environment.\n\nJohn McCarthy and Patrick J. Hayes defined this problem in their 1969 article, Some Philosophical Problems from the Standpoint of Artificial Intelligence.  In this paper, and many that came after, the formal mathematical problem was a starting point for more general discussions of the difficulty of knowledge representation for artificial intelligence. Issues such as how to provide rational default assumptions and what humans consider common sense in a virtual environment.  Later, the term acquired a broader meaning in philosophy, where it is formulated as the problem of limiting the beliefs that have to be updated in response to actions. In the logical context, actions are typically specified by what they change, with the implicit assumption that everything else (the frame) remains unchanged.\n\nDescription\n\nThe frame problem occurs even in very simple domains. A scenario with a door, which can be open or closed, and a light, which can be on or off, is statically represented by two propositions \\textit{open} and \\textit{on}. If these conditions can change, they are better represented by two predicates \\textit{open}(t) and \\textit{on}(t) that depend on time; such predicates are called fluents. A domain in which the door is closed and the light off at time 0, and the door opened at time 1, can be directly represented in logic by the following formulae:\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\textit{true} \\rightarrow \\textit{open}(1)\n\nThe first two formulae represent the initial situation; the third formula represents the effect of executing the action of opening the door at time 1. If such an action had preconditions, such as the door being unlocked, it would have been represented by \\neg \\textit{locked}(0) \\rightarrow \\textit{open}(1). In practice, one would have a predicate \\textit{executeopen}(t) for specifying when an action is executed and a rule \\forall t . \\textit{executeopen}(t) \\wedge \\textit{true} \\rightarrow \\textit{open}(t+1) for specifying the effects of actions.  The article on the situation calculus gives more details.\n\nWhile the three formulae above are a direct expression in logic of what is known, they do not suffice to correctly draw consequences. While the following conditions (representing the expected situation) are consistent with the three formulae above, they are not the only ones.\n\nIndeed, another set of conditions that is consistent with the three formulae above is:\n\nThe frame problem is that specifying only which conditions are changed by the actions does not entail that all other conditions are not changed. This problem can be solved by adding the so-called “frame axioms”, which explicitly specify that all conditions not affected by actions are not changed while executing that action. For example, since the action executed at time 0 is that of opening the door, a frame axiom would state that the status of the light does not change from time 0 to time 1:\n\n\\textit{on}(0) \\leftrightarrow \\textit{on}(1)\n\nThe frame problem is that one such frame axiom is necessary for every pair of action and condition such that the action does not affect the condition. In other words, the problem is that of formalizing a dynamical domain without explicitly specifying the frame axioms.\n\nThe solution proposed by McCarthy to solve this problem involves assuming that a minimal amount of condition changes have occurred; this solution is formalized using the framework of circumscription. The Yale shooting problem, however, shows that this solution is not always correct. Alternative solutions were then proposed, involving predicate completion, fluent occlusion, successor state axioms, etc.; they are explained below. By the end of the 1980s, the frame problem as defined by McCarthy and Hayes was solved. Even after that, however, the term “frame problem” was still used, in part to refer to the same problem but under different settings (e.g., concurrent actions), and in part to refer to the general problem of representing and reasoning with dynamical domains.\n\nSolutions \n\nThe following solutions depict how the frame problem is solved in various formalisms. The formalisms themselves are not presented in full: what is presented are simplified versions that are sufficient to explain the full solution.\n\nFluent occlusion solution\n\nThis solution was proposed by Erik Sandewall, who also defined a formal language for the specification of dynamical domains; therefore, such a domain can be first expressed in this language and then automatically translated into logic. In this article, only the expression in logic is shown, and only in the simplified language with no action names.\n\nThe rationale of this solution is to represent not only the value of conditions over time, but also whether they can be affected by the last executed action. The latter is represented by another condition, called occlusion. A condition is said to be occluded in a given time point if an action has been just executed that makes the condition true or false as an effect. Occlusion can be viewed as “permission to change”: if a condition is occluded, it is relieved from obeying the constraint of inertia.\n\nIn the simplified example of the door and the light, occlusion can be formalized by two predicates \\textit{occludeopen}(t) and \\textit{occludeon}(t). The rationale is that a condition can change value only if the corresponding occlusion predicate is true at the next time point. In turn, the occlusion predicate is true only when an action affecting the condition is executed.\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\textit{true} \\rightarrow \\textit{open}(1) \\wedge \\textit{occludeopen}(1)\n\\forall t . \\neg \\textit{occludeopen}(t) \\rightarrow (\\textit{open}(t-1) \\leftrightarrow \\textit{open}(t))\n\\forall t . \\neg \\textit{occludeon}(t) \\rightarrow (\\textit{on}(t-1) \\leftrightarrow \\textit{on}(t))\n\nIn general, every action making a condition true or false also makes the corresponding occlusion predicate true. In this case, \\textit{occludeopen}(1) is true, making the antecedent of the fourth formula above false for t1; therefore, the constraint that \\textit{open}(t-1) \\leftrightarrow \\textit{open}(t) does not hold for t\n1. Therefore, \\textit{open} can change value, which is also what is enforced by the third formula.\n\nIn order for this condition to work, occlusion predicates have to be true only when they are made true as an effect of an action. This can be achieved either by circumscription or by predicate completion. It is worth noticing that occlusion does not necessarily imply a change: for example, executing the action of opening the door when it was already open (in the formalization above) makes the predicate \\textit{occludeopen} true and makes \\textit{open} true; however, \\textit{open} has not changed value, as it was true already.\n\nPredicate completion solution\n\nThis encoding is similar to the fluent occlusion solution, but the additional predicates denote change, not permission to change. For example, \\textit{changeopen}(t) represents the fact that the predicate \\textit{open} will change from time t to t+1. As a result, a predicate changes if and only if the corresponding change predicate is true. An action results in a change if and only if it makes true a condition that was previously false or vice versa.\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\neg \\textit{open}(0) \\wedge \\textit{true} \\rightarrow \\textit{changeopen}(0)\n\\forall t. \\textit{changeopen}(t) \\leftrightarrow (\\neg \\textit{open}(t) \\leftrightarrow \\textit{open}(t+1))\n\\forall t. \\textit{changeon}(t) \\leftrightarrow (\\neg \\textit{on}(t) \\leftrightarrow \\textit{on}(t+1))\n\nThe third formula is a different way of saying that opening the door causes the door to be opened. Precisely, it states that opening the door changes the state of the door if it had been previously closed. The last two conditions state that a condition changes value at time t if and only if the corresponding change predicate is true at time t. To complete the solution, the time points in which the change predicates are true have to be as few as possible, and this can be done by applying predicate completion to the rules specifying the effects of actions.\n\nSuccessor state axioms solution\n\nThe value of a condition after the execution of an action can be determined by\nthe fact that the condition is true if and only if:\n\n# the action makes the condition true; or\n# the condition was previously true and the action does not make it false.\n\nA successor state axiom is a formalization in logic of these two facts. For\nexample, if \\textit{opendoor}(t) and \\textit{closedoor}(t) are two\nconditions used to denote that the action executed at time t was\nto open or close the door, respectively, the running example is encoded as\nfollows.\n\n\\neg \\textit{open}(0)\n\\neg \\textit{on}(0)\n\\textit{opendoor}(0)\n\\forall t . \\textit{open}(t+1) \\leftrightarrow \\textit{opendoor}(t) \\vee (\\textit{open}(t) \\wedge \\neg \\textit{closedoor}(t))\n\nThis solution is centered around the value of conditions, rather than the\neffects of actions. In other words, there is an axiom for every condition,\nrather than a formula for every action. Preconditions to actions (which are not\npresent in this example) are formalized by other formulae. The successor state\naxioms are used in the variant to the situation calculus proposed by\nRay Reiter.\n\nFluent calculus solution\n\nThe fluent calculus is a variant of the situation calculus. It solves the frame problem by using first-order logic\nterms, rather than predicates, to represent the states. Converting\npredicates into terms in first-order logic is called reification; the\nfluent calculus can be seen as a logic in which predicates representing the\nstate of conditions are reified.\n\nThe difference between a predicate and a term in first-order logic is that a term is a representation of an object (possibly a complex object composed of other objects), while a predicate represents a condition that can be true or false when evaluated over a given set of terms.\n\nIn the fluent calculus, each possible state is represented by a term obtained by composition of other terms, each one representing the conditions that are true in state. For example, the state in which the door is open and the light is on is represented by the term \\textit{open} \\circ \\textit{on}. It is important to notice that a term is not true or false by itself, as it is an object and not a condition. In other words, the term \\textit{open} \\circ \\textit{on} represent a possible state, and does not by itself mean that this is the current state. A separate condition can be stated to specify that this is actually the state at a given time, e.g., \\textit{state}(\\textit{open} \\circ \\textit{on}, 10) means that this is the state at time 10.\n\nThe solution to the frame problem given in the fluent calculus is to specify the effects of actions by stating how a term representing the state changes when the action is executed. For example, the action of opening the door at time 0 is represented by the formula:\n\n\\textit{state}(s \\circ \\textit{open}, 1) \\leftrightarrow \\textit{state}(s,0)\n\nThe action of closing the door, which makes a condition false instead of true, is represented in a slightly different way:\n\n\\textit{state}(s, 1) \\leftrightarrow \\textit{state}(s \\circ \\textit{open}, 0)\n\nThis formula works provided that suitable axioms are given about \\textit{state} and \\circ, e.g., a term containing the same condition twice is not a valid state (for example, \\textit{state}(\\textit{open} \\circ s \\circ \\textit{open}, t) is always false for every s and t).\n\nEvent calculus solution\n\nThe event calculus uses terms for representing fluents, like the fluent calculus, but also has axioms constraining the value of fluents, like the successor state axioms. In the event calculus, inertia is enforced by formulae stating that a fluent is true if it has been true at a given previous time point and no action changing it to false has been performed in the meantime. Predicate completion is still needed in the event calculus for obtaining that a fluent is made true only if an action making it true has been performed, but also for obtaining that an action had been performed only if that is explicitly stated.\n\nDefault logic solution\n\nThe frame problem can be thought of as the problem of formalizing the principle that, by default, \"everything is presumed to remain in the state in which it is\" (Leibniz, \"An Introduction to a Secret Encyclopædia\", c. 1679).  This default, sometimes called the commonsense law of inertia, was expressed by Raymond Reiter in default logic:\n\n\\frac{R(x,s)\\; :\\ R(x,\\textit{do}(a,s))}{R(x,\\textit{do}(a,s))}\n\n(if R(x) is true in situation s, and it can be assumedi.e., no contradicting information is known that R(x) remains true after executing action a, then we can conclude that R(x) remains true).\n\nSteve Hanks and Drew McDermott argued, on the basis of their Yale shooting example, that this solution to the frame problem is unsatisfactory.  Hudson Turner showed, however, that it works correctly in the presence of appropriate additional postulates.\n\nAnswer set programming solution\n\nThe counterpart of the default logic solution in the language of answer set programming is a rule with strong negation:\n\nr(X,T+1) \\leftarrow r(X,T),\\ \\hbox{not }\\sim r(X,T+1)\n\n(if r(X) is true at time T, and it can be assumed that r(X) remains true at time T+1, then we can conclude that r(X) remains true).\n\nAction description languages\n\nAction description languages elude the frame problem rather than solving it. An action description language is a formal language with a syntax that is specific for describing situations and actions. For example, that the action \\textit{opendoor} makes the door open if not locked is expressed by:\n\n\\textit{opendoor} causes \\textit{open} if \\neg \\textit{locked}\n\nThe semantics of an action description language depends on what the language can express (concurrent actions, delayed effects, etc.) and is usually based on transition systems.\n\nSince domains are expressed in these languages rather than directly in logic, the frame problem only arises when a specification given in an action description logic is to be translated into logic. Typically, however, a translation is given from these languages to answer set programming rather than first-order logic. Frame problem. http://en.wikipedia.org/?curid=11306."
  }
}
