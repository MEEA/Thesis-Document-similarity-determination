{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=2014",
  "eid" : "bd42a2b0-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778397275,
  "textBody" : "Atomic semantics is a term which describes a type of guarantee provided by a data register shared by several processors in a parallel machine or in a network of computers working together.\nAtomic semantics are very strong. An atomic register provides strong guarantees even when there is concurrency and failures.\n\nA read/write register R stores a value and is accessed by two basic operations: read and write(v). A read  returns the value stored in R and write(v) changes the value stored in R to v.\nA register is called atomic if it satisfies the two following properties:\n\n1) Each invocation op of a read or write operation:\n\n•Must appear as if it were executed at a single point τ(op) in time.\n\n•τ (op) works as follow:\nτb(op) ≤ τ (op) ≤ τe(op): where τb(op) and τe(op) indicate the time when the operation op begins and ends.\n\n•If op1 ≠ op2, then τ (op1)≠τ (op2)\n\n2) Each read operation returns the value written by the last write operation before the read, in the sequence where all operations are ordered by their τ values.\n\nAtomic/Linearizable register:\n\nTermination: when a node is correct,sooner or later each read and write operation will complete.\n\nSafety Property (Linearization points for read and write and failed operations):\n\nRead operation:It appears as if happened at all nodes at some times between the invocation and response time.\n\nWrite operation: Similar to read operation,it appears as if happened at all nodes at some times between the invocation and response time.\n\nFailed operation(The atomic term comes from this notion):It appears as if it is completed at every single node or it never happened at any node.\n\nExample : We know that an atomic register is one that is linearizable to a sequential safe register.\n\nThe following picture shows where we should put the linearization point for each operation:\n\n \nAn atomic register could be defined for a variable with a single writer but multi- readers(SWMR),single-writer/single-reader (SWSR),or multi-writer/multi-reader(MWMR). Here is an example of a multi-reader multi-writer atomic register which is accessed by three processes (P1,P2,P3).Note that R.read() → v means that the corresponding read operation returns v, which is the value of the register. Therefore, the following execution of the register R could satisfies the definition of the atomic registers:\nR.write(1), R.read()→1, R.write(3), R.write(2), R.read()→2, R.read()→2.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Atomic semantics" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=2014" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "Atomic semantics is a term which describes a type of guarantee provided by a data register shared by several processors in a parallel machine or in a network of computers working together.\nAtomic semantics are very strong. An atomic register provides strong guarantees even when there is concurrency and failures.\n\nA read/write register R stores a value and is accessed by two basic operations: read and write(v). A read  returns the value stored in R and write(v) changes the value stored in R to v.\nA register is called atomic if it satisfies the two following properties:\n\n1) Each invocation op of a read or write operation:\n\n•Must appear as if it were executed at a single point τ(op) in time.\n\n•τ (op) works as follow:\nτb(op) ≤ τ (op) ≤ τe(op): where τb(op) and τe(op) indicate the time when the operation op begins and ends.\n\n•If op1 ≠ op2, then τ (op1)≠τ (op2)\n\n2) Each read operation returns the value written by the last write operation before the read, in the sequence where all operations are ordered by their τ values.\n\nAtomic/Linearizable register:\n\nTermination: when a node is correct,sooner or later each read and write operation will complete.\n\nSafety Property (Linearization points for read and write and failed operations):\n\nRead operation:It appears as if happened at all nodes at some times between the invocation and response time.\n\nWrite operation: Similar to read operation,it appears as if happened at all nodes at some times between the invocation and response time.\n\nFailed operation(The atomic term comes from this notion):It appears as if it is completed at every single node or it never happened at any node.\n\nExample : We know that an atomic register is one that is linearizable to a sequential safe register.\n\nThe following picture shows where we should put the linearization point for each operation:\n\n \nAn atomic register could be defined for a variable with a single writer but multi- readers(SWMR),single-writer/single-reader (SWSR),or multi-writer/multi-reader(MWMR). Here is an example of a multi-reader multi-writer atomic register which is accessed by three processes (P1,P2,P3).Note that R.read() → v means that the corresponding read operation returns v, which is the value of the register. Therefore, the following execution of the register R could satisfies the definition of the atomic registers:\nR.write(1), R.read()→1, R.write(3), R.write(2), R.read()→2, R.read()→2. Atomic semantics. http://en.wikipedia.org/?curid=2014."
  }
}
