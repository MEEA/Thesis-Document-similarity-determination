{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=16485",
  "eid" : "26462e30-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778573459,
  "textBody" : "Just another Perl hacker, or JAPH, typically refers to a Perl program which prints \"Just another Perl hacker,\" (the comma is canonical but is occasionally omitted).  Short JAPH programs are often used as signatures in online forums, or as T-shirt designs.  The phrase or acronym is also occasionally used (without code) for a signature.\n\nJAPH programs are classically done using extremely obfuscated methods, in the spirit of the Obfuscated C Contest.  More recently, as the phenomenon has become so well known, the phrase is sometimes used in ordinary examples (without obfuscation).\n\nThe idea of using tiny Perl programs which print a signature as a signature was originated by Randal L. Schwartz, in his postings to the newsgroup comp.lang.perl.Randal L. Schwartz in Usenet message M1HFPVH2JQ.FSF@HALFDOME.HOLDIT.COM explaining the origin of JAPH. Available through  [http://groups.google.com/group/comp.lang.perl.misc/msg/ecc405feeefc120c Google.com] Many of the JAPHs below are his.\n\nExamples\n\nJAPH program without obfuscation:\n\nprint \"Just another Perl hacker,\";\n\nEmbedding JAPH in opaque code:\n\n$_='987;s/^(\\d+)/$1-1/e;$1?eval:print\"Just another Perl hacker,\"';eval;\n\nDecoding JAPH from a transposed string literal:\n\n$_\"krJhruaesrltre c a cnP,ohet\";$_.\n$1,print$2while s/(..)(.)//;\n\nPrinting out JAPH as separate processes:\n\nfor $i (0..4) { if (!fork) {\n      $i 0 or not { $SIG{INT} \n sub { print \"J\" } } or\n      $i 1 or not { $SIG{INT} \n sub { print \"A\" } } or\n      $i 2 or not { $SIG{INT} \n sub { print \"P\" } } or\n      $i 3 or not { $SIG{INT} \n sub { print \"H\" } } ;\n      sleep $i; last; } } kill INT => $$;\n\nAppearing as if it does something completely unrelated to printing JAPH:\n\n$_ = \"wftedskaebjgdpjgidbsmnjgc\";\ntr/a-z/oh, turtleneck Phrase Jar!/; print;\n\nForking processes to print out one letter each in the correct order:[http://perl.plover.com/obfuscated/ Plover.com]\n\n@Psplit//,\".URRUU\\c8R\";@d\nsplit//,\"\\nrekcah xinU / lreP rehtona tsuJ\";sub p{\n@p{\"r$p\",\"u$p\"}(P,P);pipe\"r$p\",\"u$p\";++$p;($q*\n2)+$f\n!fork;map{$P=$P[$f^ord\n($p{$_})&6];$p{$_}/ ^$P/ix?$P:close$_}keys%p}p;p;p;p;p;map{$p{$_}\n~/^[P.]/&&\nclose$_}%p;wait until$?;map{/^r/&&}%p;$_=$d[$q];sleep rand(2)if/\\S/;print\n\nUsing only Perl keywords (no punctuation):Originally posted at [http://www.perlmonks.org/?node_id=290607 perlmonks.org] by user blokhead\n\nnot exp log srand xor s qq qx xor\ns x x length uc ord and print chr\nord for qw q join use sub tied qx\nxor eval xor print qq q q xor int\neval lc q m cos and print chr ord\nfor qw y abs ne open tied hex exp\nref y m xor scalar srand print qq\nq q xor int eval lc qq y sqrt cos\nand print chr ord for qw x printf\neach return local x y or print qq\ns s and eval q s undef or oct xor\ntime xor ref print chr int ord lc\nforeach qw y hex alarm chdir kill\nexec return y s gt sin sort split\n\nUsing only punctuation, no alphanumeric characters (written by [https://metacpan.org/author/ROODE Eric Roode]; only works on Unix and Unix-like systems):\n\n`$`;$_\n\\%!;($_)/(.)/;$\n++$|;($.,$/,$,,$\\,$\",$;,$^,$#,$~,$*,$:,@%)=(\n$!~/(.)(.).(.)(.)(.)(.)..(.)(.)(.)..(.)......(.)/,$\"),$\n++;$.++;$.++;\n$_++;$_++;($_,$\\,$,)=($~.$\".\"$;$/$%[$?]$_$\\$,$:$%[$?]\",$\"&$~,$#,);$,++\n;$,++;$^|$\";`$_$\\$,$/$:$;$~$*$%[$?]$.$~$*${#}$%[$?]$;$\\$\"$^$~$*.>&$\n` \n\nA much shorter one, using only punctuation, based on the [https://metacpan.org/module/Acme::EyeDrops EyeDrops] module:\n\n=~('(?{'.('-)@.)@_*([]@!@/)(@)@-@),@(@@+@)'\n^'][)@]`}`]()`@.@]@%[`}%[@`@!#@%[').',\"})')\n\nASCII art (to make this dromedary-shaped code work, the console size needs to be set to at least 119Ã—48):Originally posted at [http://www.perlmonks.org/?node_id=528042 perlmonks.org] by user liverpole.\n\n                                                       #\n                                                   sub j(\\$){($\n                     P,$V)                     @_;while($$P\n~s:^\n                 ([()])::x){                    $V+=('('eq$1)?-32:31\n           }$V+=ord(  substr(                 $$P,0,1,\"\"))-74} sub a{\n          my($I,$K,$  J,$L)@_               ;$I\nint($I*$M/$Z);$K=int(\n         $K*$M/$Z);$Jint($J*$M             /$Z);$L\nint($L*$M/$Z); $G=$\n         J-$I;$F$L-$K;$E\n(abs($          G)>=abs($F))?$G:$F;($E{$K\n                  +int($i*$F/$E)      }->{$I+int($i*$G/$E)}1}}sub p{$D\n{};$\n                 Z$z||.01;map{    $H\n$_;$I$N\nj$H;$K$O\nj$H;while($H){$q=ord\n                substr($H,0,1,\"\" );if(42$q){$J\nj$H;$Lj$H}else{$q-\n43;$L =$q\n              %9;$J($q-$L)/9;$L\n$q-9*$J-4;$J-4}$J+\n$I;$L+=$K;a($I,$K,$J,$ L);\n              ($I,$K)($J,$L)}a($I,$K,$N,$O)}@_;my$T;map{$y\n$_;map{ $T.=$D->{$y}\n              ->{$_}?$\\:' '}(-59..59);$T.\"\\n\"}(-23..23);print\"\\e[H$T\"}$w\n eval{\n              require Win32::Console::ANSI};$b=$w?'1;7;':\"\";($j,$u,$s,$t,$a,$n,$o\n              ,$h,$c,$k,$p,$e,$r,$l,$C)=split/}/,'Tw*JSK8IAg*PJ[*J@wR}*JR]*QJ[*J'.\n               'BA*JQK8I*JC}KUz]BAIJT]*QJ[R?-R[e]\\RI'.'}Tn*JQ]wRAI*JDnR8QAU}wT8KT'.\n               ']n*JEI*EJR*QJ]*JR*DJ@IQ[}*JSe*JD[n]*JPe*'.'JBI/KI}T8@?PcdnfgVCBRcP'.\n                '?ABKV}*JWe*JD[n]*JPe*JC?8B*JE};Vq*OJQ/IP['.'wQ}*JWeOe{n*EERk8;'.\n                  'J*JC}/U*OJd[OI@*BJ*JXn*J>w]U}CWq*OJc8KJ?O[e]U/T*QJP?}*JSe*JCnTe'.\n                   'QIAKJR}*JV]wRAI*J?}T]*RJcJI[\\]3;U]Uq*PM[wV]W]WCT*DM*SJ'.  'ZP[Z'.\n                      'PZa[\\]UKVgogK9K*QJ[\\]n[RI@*EH@IddR[Q[]T]T]T3o[dk*JE'.  '[Z\\U'.\n                        '{T]*JPKTKK]*OJ[QIO[PIQIOgUKU\\k*JE+J+J5R5AI*EJ00'.  'BCB*'.\n                             'DMKKJIR[Q+*EJ0*EK';sub h{$\\ = qw(% & @ x)[int    rand\n                              4];map{printf  \"\\e[$b;%dm\",int(rand 6)+101-60*   ($w\n                               ||0);system(  \"cls\")if$w ;($A,$S)=    ($_[1],   $\n                                _[0]);($M,   @,)split  '}';for(     $z\n256\n                                ;$z>0; $z   -$S){$S*\n   $A;p @,}      sleep$_\n                                [2];while   ($_[3]&&($    z+$ S)",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Just another Perl hacker" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=16485" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "Just another Perl hacker, or JAPH, typically refers to a Perl program which prints \"Just another Perl hacker,\" (the comma is canonical but is occasionally omitted).  Short JAPH programs are often used as signatures in online forums, or as T-shirt designs.  The phrase or acronym is also occasionally used (without code) for a signature.\n\nJAPH programs are classically done using extremely obfuscated methods, in the spirit of the Obfuscated C Contest.  More recently, as the phenomenon has become so well known, the phrase is sometimes used in ordinary examples (without obfuscation).\n\nThe idea of using tiny Perl programs which print a signature as a signature was originated by Randal L. Schwartz, in his postings to the newsgroup comp.lang.perl.Randal L. Schwartz in Usenet message M1HFPVH2JQ.FSF@HALFDOME.HOLDIT.COM explaining the origin of JAPH. Available through  [http://groups.google.com/group/comp.lang.perl.misc/msg/ecc405feeefc120c Google.com] Many of the JAPHs below are his.\n\nExamples\n\nJAPH program without obfuscation:\n\nprint \"Just another Perl hacker,\";\n\nEmbedding JAPH in opaque code:\n\n$_='987;s/^(\\d+)/$1-1/e;$1?eval:print\"Just another Perl hacker,\"';eval;\n\nDecoding JAPH from a transposed string literal:\n\n$_\"krJhruaesrltre c a cnP,ohet\";$_.\n$1,print$2while s/(..)(.)//;\n\nPrinting out JAPH as separate processes:\n\nfor $i (0..4) { if (!fork) {\n      $i 0 or not { $SIG{INT} \n sub { print \"J\" } } or\n      $i 1 or not { $SIG{INT} \n sub { print \"A\" } } or\n      $i 2 or not { $SIG{INT} \n sub { print \"P\" } } or\n      $i 3 or not { $SIG{INT} \n sub { print \"H\" } } ;\n      sleep $i; last; } } kill INT => $$;\n\nAppearing as if it does something completely unrelated to printing JAPH:\n\n$_ = \"wftedskaebjgdpjgidbsmnjgc\";\ntr/a-z/oh, turtleneck Phrase Jar!/; print;\n\nForking processes to print out one letter each in the correct order:[http://perl.plover.com/obfuscated/ Plover.com]\n\n@Psplit//,\".URRUU\\c8R\";@d\nsplit//,\"\\nrekcah xinU / lreP rehtona tsuJ\";sub p{\n@p{\"r$p\",\"u$p\"}(P,P);pipe\"r$p\",\"u$p\";++$p;($q*\n2)+$f\n!fork;map{$P=$P[$f^ord\n($p{$_})&6];$p{$_}/ ^$P/ix?$P:close$_}keys%p}p;p;p;p;p;map{$p{$_}\n~/^[P.]/&&\nclose$_}%p;wait until$?;map{/^r/&&}%p;$_=$d[$q];sleep rand(2)if/\\S/;print\n\nUsing only Perl keywords (no punctuation):Originally posted at [http://www.perlmonks.org/?node_id=290607 perlmonks.org] by user blokhead\n\nnot exp log srand xor s qq qx xor\ns x x length uc ord and print chr\nord for qw q join use sub tied qx\nxor eval xor print qq q q xor int\neval lc q m cos and print chr ord\nfor qw y abs ne open tied hex exp\nref y m xor scalar srand print qq\nq q xor int eval lc qq y sqrt cos\nand print chr ord for qw x printf\neach return local x y or print qq\ns s and eval q s undef or oct xor\ntime xor ref print chr int ord lc\nforeach qw y hex alarm chdir kill\nexec return y s gt sin sort split\n\nUsing only punctuation, no alphanumeric characters (written by [https://metacpan.org/author/ROODE Eric Roode]; only works on Unix and Unix-like systems):\n\n`$`;$_\n\\%!;($_)/(.)/;$\n++$|;($.,$/,$,,$\\,$\",$;,$^,$#,$~,$*,$:,@%)=(\n$!~/(.)(.).(.)(.)(.)(.)..(.)(.)(.)..(.)......(.)/,$\"),$\n++;$.++;$.++;\n$_++;$_++;($_,$\\,$,)=($~.$\".\"$;$/$%[$?]$_$\\$,$:$%[$?]\",$\"&$~,$#,);$,++\n;$,++;$^|$\";`$_$\\$,$/$:$;$~$*$%[$?]$.$~$*${#}$%[$?]$;$\\$\"$^$~$*.>&$\n` \n\nA much shorter one, using only punctuation, based on the [https://metacpan.org/module/Acme::EyeDrops EyeDrops] module:\n\n=~('(?{'.('-)@.)@_*([]@!@/)(@)@-@),@(@@+@)'\n^'][)@]`}`]()`@.@]@%[`}%[@`@!#@%[').',\"})')\n\nASCII art (to make this dromedary-shaped code work, the console size needs to be set to at least 119Ã—48):Originally posted at [http://www.perlmonks.org/?node_id=528042 perlmonks.org] by user liverpole.\n\n                                                       #\n                                                   sub j(\\$){($\n                     P,$V)                     @_;while($$P\n~s:^\n                 ([()])::x){                    $V+=('('eq$1)?-32:31\n           }$V+=ord(  substr(                 $$P,0,1,\"\"))-74} sub a{\n          my($I,$K,$  J,$L)@_               ;$I\nint($I*$M/$Z);$K=int(\n         $K*$M/$Z);$Jint($J*$M             /$Z);$L\nint($L*$M/$Z); $G=$\n         J-$I;$F$L-$K;$E\n(abs($          G)>=abs($F))?$G:$F;($E{$K\n                  +int($i*$F/$E)      }->{$I+int($i*$G/$E)}1}}sub p{$D\n{};$\n                 Z$z||.01;map{    $H\n$_;$I$N\nj$H;$K$O\nj$H;while($H){$q=ord\n                substr($H,0,1,\"\" );if(42$q){$J\nj$H;$Lj$H}else{$q-\n43;$L =$q\n              %9;$J($q-$L)/9;$L\n$q-9*$J-4;$J-4}$J+\n$I;$L+=$K;a($I,$K,$J,$ L);\n              ($I,$K)($J,$L)}a($I,$K,$N,$O)}@_;my$T;map{$y\n$_;map{ $T.=$D->{$y}\n              ->{$_}?$\\:' '}(-59..59);$T.\"\\n\"}(-23..23);print\"\\e[H$T\"}$w\n eval{\n              require Win32::Console::ANSI};$b=$w?'1;7;':\"\";($j,$u,$s,$t,$a,$n,$o\n              ,$h,$c,$k,$p,$e,$r,$l,$C)=split/}/,'Tw*JSK8IAg*PJ[*J@wR}*JR]*QJ[*J'.\n               'BA*JQK8I*JC}KUz]BAIJT]*QJ[R?-R[e]\\RI'.'}Tn*JQ]wRAI*JDnR8QAU}wT8KT'.\n               ']n*JEI*EJR*QJ]*JR*DJ@IQ[}*JSe*JD[n]*JPe*'.'JBI/KI}T8@?PcdnfgVCBRcP'.\n                '?ABKV}*JWe*JD[n]*JPe*JC?8B*JE};Vq*OJQ/IP['.'wQ}*JWeOe{n*EERk8;'.\n                  'J*JC}/U*OJd[OI@*BJ*JXn*J>w]U}CWq*OJc8KJ?O[e]U/T*QJP?}*JSe*JCnTe'.\n                   'QIAKJR}*JV]wRAI*J?}T]*RJcJI[\\]3;U]Uq*PM[wV]W]WCT*DM*SJ'.  'ZP[Z'.\n                      'PZa[\\]UKVgogK9K*QJ[\\]n[RI@*EH@IddR[Q[]T]T]T3o[dk*JE'.  '[Z\\U'.\n                        '{T]*JPKTKK]*OJ[QIO[PIQIOgUKU\\k*JE+J+J5R5AI*EJ00'.  'BCB*'.\n                             'DMKKJIR[Q+*EJ0*EK';sub h{$\\ = qw(% & @ x)[int    rand\n                              4];map{printf  \"\\e[$b;%dm\",int(rand 6)+101-60*   ($w\n                               ||0);system(  \"cls\")if$w ;($A,$S)=    ($_[1],   $\n                                _[0]);($M,   @,)split  '}';for(     $z\n256\n                                ;$z>0; $z   -$S){$S*\n   $A;p @,}      sleep$_\n                                [2];while   ($_[3]&&($    z+$ S). Just another Perl hacker. http://en.wikipedia.org/?curid=16485."
  }
}
