{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=8336",
  "eid" : "e723eb20-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778467538,
  "textBody" : "In computability theory and computational complexity theory, a decision problem is a problem that can be posed as a yes-no question of the input values. Decision problems typically appear in mathematical questions of decidability, that is, the question of the existence of an effective method to determine the existence of some object or its membership in a set; some of the most important problems in mathematics are undecidable.\n\nFor example, the problem \"given two numbers x and y, does x evenly divide y?\" is a decision problem.  The answer can be either 'yes' or 'no', and depends upon the values of x and y. A method for solving a decision problem, given in the form of an algorithm, is called a decision procedure for that problem. A decision procedure for the decision problem \"given two numbers x and y, does x evenly divide y?\" would give the steps for determining whether x evenly divides y, given x and y.  One such algorithm is long division, taught to many school children. If the remainder is zero the answer produced is 'yes', otherwise it is 'no'. A decision problem which can be solved by an algorithm, such as this example, is called decidable.\n\nThe field of computational complexity categorizes decidable decision problems by how difficult they are to solve. \"Difficult\", in this sense, is described in terms of the computational resources needed by the most efficient algorithm for a certain problem. The field of recursion theory, meanwhile, categorizes undecidable decision problems by Turing degree, which is a measure of the noncomputability inherent in any solution.\n\nDefinition\n\nA decision problem is any arbitrary yes-or-no question on an infinite set of inputs. Because of this, it is traditional to define the decision problem equivalently as: the set of possible inputs together with the set of inputs for which the problem returns yes.\n\nThese inputs can be natural numbers, but may also be values of some other kind, such as strings over the binary alphabet {0,1} or over some other finite set of symbols. The subset of strings for which the problem returns \"yes\" is a formal language, and often decision problems are defined in this way as formal languages.\n\nAlternatively, using an encoding such as Gödel numberings, any string can be encoded as a natural number, via which a decision problem can be defined as a subset of the natural numbers.\n\nExamples\n\nA classic example of a decidable decision problem is the set of prime numbers. It is possible to effectively decide whether a given natural number is prime by testing every possible nontrivial factor. Although much more efficient methods of primality testing are known, the existence of any effective method is enough to establish decidability.\n\nDecidability \n\nA decision problem A is called decidable or effectively solvable if A is a recursive set.  A problem is called partially decidable, semidecidable, solvable, or provable if A is a recursively enumerable set.  Problems that are not decidable are called undecidable.\n\nThe halting problem is an important undecidable decision problem; for more examples, see list of undecidable problems.\n\nComplete problems \n\nDecision problems can be ordered according to many-one reducibility and related to feasible reductions such as polynomial-time reductions. A decision problem P is said to be complete for a set of decision problems S if P is a member of S and every problem in S can be reduced to P. Complete decision problems are used in computational complexity to characterize complexity classes of decision problems. For example, the Boolean satisfiability problem is complete for the class NP of decision problems under polynomial-time reducibility.\n\nFunction problems\n\nDecision problems are closely related to function problems, which can have answers that are more complex than a simple 'yes' or 'no'.  A corresponding function problem is \"given two numbers x and y, what is x divided by y?\".\n\nA function problem consists of a partial function f; the informal \"problem\" is to compute the values of f on the inputs for which it is defined.\n\nEvery function problem can be turned into a decision problem; the decision problem is just the graph of the associated function.   (The graph of a function f is the set of pairs (x,y) such that f(x) y.)  If this decision problem were effectively solvable then the function problem would be as well.  This reduction does not respect computational complexity, however.  For example, it is possible for the graph of a function to be decidable in polynomial time (in which case running time is computed as a function of the pair (x,y) ) when the function is not computable in polynomial time (in which case running time is computed as a function of x alone).  The function f(x) \n 2x has this property.\n\nEvery decision problem can be converted into the function problem of computing the characteristic function of the set associated to the decision problem.   If this function is computable then the associated decision problem is decidable. However, this reduction is more liberal than the standard reduction used in computational complexity (sometimes called polynomial-time many-one reduction); for example, the complexity of the characteristic functions of an NP-complete problem and its co-NP-complete complement is exactly the same even though the underlying decision problems may not be considered equivalent in some typical models of computation.\n\nOptimization problems\n\nUnlike decision problems, for which there is only one correct answer for each input, optimization problems are concerned with finding the best answer to a particular input.  Optimization problems arise naturally in many applications, such as the traveling salesman problem and many questions in linear programming.\n\nThere are standard techniques for transforming function and optimization problems into decision problems. For example, in the traveling salesman problem, the optimization problem is to produce a tour with minimal weight. The associated decision problem is: for each N, to decide whether the graph has any tour with weight less than N.  By repeatedly answering the decision problem, it is possible to find the minimal weight of a tour.\n\nBecause the theory of decision problems is very well developed, research in complexity theory has typically focused on decision problems. Optimization problems themselves are still of interest in computability theory, as well as in fields such as operations research.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Decision problem" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=8336" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In computability theory and computational complexity theory, a decision problem is a problem that can be posed as a yes-no question of the input values. Decision problems typically appear in mathematical questions of decidability, that is, the question of the existence of an effective method to determine the existence of some object or its membership in a set; some of the most important problems in mathematics are undecidable.\n\nFor example, the problem \"given two numbers x and y, does x evenly divide y?\" is a decision problem.  The answer can be either 'yes' or 'no', and depends upon the values of x and y. A method for solving a decision problem, given in the form of an algorithm, is called a decision procedure for that problem. A decision procedure for the decision problem \"given two numbers x and y, does x evenly divide y?\" would give the steps for determining whether x evenly divides y, given x and y.  One such algorithm is long division, taught to many school children. If the remainder is zero the answer produced is 'yes', otherwise it is 'no'. A decision problem which can be solved by an algorithm, such as this example, is called decidable.\n\nThe field of computational complexity categorizes decidable decision problems by how difficult they are to solve. \"Difficult\", in this sense, is described in terms of the computational resources needed by the most efficient algorithm for a certain problem. The field of recursion theory, meanwhile, categorizes undecidable decision problems by Turing degree, which is a measure of the noncomputability inherent in any solution.\n\nDefinition\n\nA decision problem is any arbitrary yes-or-no question on an infinite set of inputs. Because of this, it is traditional to define the decision problem equivalently as: the set of possible inputs together with the set of inputs for which the problem returns yes.\n\nThese inputs can be natural numbers, but may also be values of some other kind, such as strings over the binary alphabet {0,1} or over some other finite set of symbols. The subset of strings for which the problem returns \"yes\" is a formal language, and often decision problems are defined in this way as formal languages.\n\nAlternatively, using an encoding such as Gödel numberings, any string can be encoded as a natural number, via which a decision problem can be defined as a subset of the natural numbers.\n\nExamples\n\nA classic example of a decidable decision problem is the set of prime numbers. It is possible to effectively decide whether a given natural number is prime by testing every possible nontrivial factor. Although much more efficient methods of primality testing are known, the existence of any effective method is enough to establish decidability.\n\nDecidability \n\nA decision problem A is called decidable or effectively solvable if A is a recursive set.  A problem is called partially decidable, semidecidable, solvable, or provable if A is a recursively enumerable set.  Problems that are not decidable are called undecidable.\n\nThe halting problem is an important undecidable decision problem; for more examples, see list of undecidable problems.\n\nComplete problems \n\nDecision problems can be ordered according to many-one reducibility and related to feasible reductions such as polynomial-time reductions. A decision problem P is said to be complete for a set of decision problems S if P is a member of S and every problem in S can be reduced to P. Complete decision problems are used in computational complexity to characterize complexity classes of decision problems. For example, the Boolean satisfiability problem is complete for the class NP of decision problems under polynomial-time reducibility.\n\nFunction problems\n\nDecision problems are closely related to function problems, which can have answers that are more complex than a simple 'yes' or 'no'.  A corresponding function problem is \"given two numbers x and y, what is x divided by y?\".\n\nA function problem consists of a partial function f; the informal \"problem\" is to compute the values of f on the inputs for which it is defined.\n\nEvery function problem can be turned into a decision problem; the decision problem is just the graph of the associated function.   (The graph of a function f is the set of pairs (x,y) such that f(x) y.)  If this decision problem were effectively solvable then the function problem would be as well.  This reduction does not respect computational complexity, however.  For example, it is possible for the graph of a function to be decidable in polynomial time (in which case running time is computed as a function of the pair (x,y) ) when the function is not computable in polynomial time (in which case running time is computed as a function of x alone).  The function f(x) \n 2x has this property.\n\nEvery decision problem can be converted into the function problem of computing the characteristic function of the set associated to the decision problem.   If this function is computable then the associated decision problem is decidable. However, this reduction is more liberal than the standard reduction used in computational complexity (sometimes called polynomial-time many-one reduction); for example, the complexity of the characteristic functions of an NP-complete problem and its co-NP-complete complement is exactly the same even though the underlying decision problems may not be considered equivalent in some typical models of computation.\n\nOptimization problems\n\nUnlike decision problems, for which there is only one correct answer for each input, optimization problems are concerned with finding the best answer to a particular input.  Optimization problems arise naturally in many applications, such as the traveling salesman problem and many questions in linear programming.\n\nThere are standard techniques for transforming function and optimization problems into decision problems. For example, in the traveling salesman problem, the optimization problem is to produce a tour with minimal weight. The associated decision problem is: for each N, to decide whether the graph has any tour with weight less than N.  By repeatedly answering the decision problem, it is possible to find the minimal weight of a tour.\n\nBecause the theory of decision problems is very well developed, research in complexity theory has typically focused on decision problems. Optimization problems themselves are still of interest in computability theory, as well as in fields such as operations research. Decision problem. http://en.wikipedia.org/?curid=8336."
  }
}
