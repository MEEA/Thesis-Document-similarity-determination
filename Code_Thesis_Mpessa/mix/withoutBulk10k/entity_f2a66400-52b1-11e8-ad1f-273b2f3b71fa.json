{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=9914",
  "eid" : "f2a66400-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778486848,
  "textBody" : "In computing, the Executable and Linkable Format (ELF, formerly named Extensible Linking Format), is a common standard file format for executable files, object code, shared libraries, and core dumps. First published in the specification for the application binary interface (ABI) of the Unix operating system version named System V Release 4 (SVR4),[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface] Edition 4.1 (1997-03-18) and later in the Tool Interface Standard,Tool Interface Standard (TIS) [http://refspecs.linuxbase.org/elf/elf.pdf Executable and Linking Format (ELF) Specification] Version 1.2 (May 1995) it was quickly accepted among different vendors of Unix systems. In 1999, it was chosen as the standard binary file format for Unix and Unix-like systems on x86 processors by the 86open project.\n\nBy design, ELF is flexible, extensible, and cross-platform, not bound to any given central processing unit (CPU) or instruction set architecture. This has allowed it to be adopted by many different operating systems on many different hardware platforms.\n\nFile layout \n\nEach ELF file is made up of one ELF header, followed by file data. The data can include:\n* Program header table, describing zero or more memory segments\n* Section header table, describing zero or more sections\n* Data referred to by entries in the program header table or section header table\n\nThe segments contain information that is needed for run time execution of the file, while sections contain important data for linking and relocation. Any byte in the entire file can be owned by one section at most, and orphan bytes can occur which are unowned by any section.\n\nFile header \n\nThe ELF header defines whether to use 32- or 64-bit addresses. The header contains three fields that are affected by this setting and offset other fields that follow them. The ELF header is 52 or 64 bytes long for 32-bit and 64-bit binaries respectively.\n\nProgram header \n\nThe program header table tells the system how to create a process image.  It is found at file offset e_phoff, and consists of e_phnum entries, each with size e_phentsize.  The layout is slightly different in 32-bit ELF vs 64-bit ELF, because the p_flags are in a different structure location for alignment reasons.  Each entry is structured as:\n\nSection header \n\nTools \n\n* readelf is a Unix binary utility that displays information about one or more ELF files. A free software implementation is provided by GNU Binutils.\n* elfutils provides alternative tools to GNU Binutils purely for Linux.\n* elfdump is a command for viewing ELF information in an ELF file, available under Solaris and FreeBSD.\n* objdump provides a wide range of information about ELF files and other object formats. objdump uses the Binary File Descriptor library as a back-end to structure the ELF data.\n* The Unix file utility can display some information about ELF files, including the instruction set architecture for which the code in a relocatable, executable, or shared object file is intended, or on which an ELF core dump was produced.\n\nApplications \n\nUnix-like systems \n\nThe ELF format has replaced older executable formats in various environments.\nIt has replaced a.out and COFF formats in Unix-like operating systems:\n* Linux\n* Solaris\n* IRIX\n* FreeBSD\n* NetBSD\n* OpenBSD\n* DragonFly BSD\n* Syllable\n* HP-UX (except for 32-bit PA-RISC programs which continue to use SOM)\n* QNX Neutrino\n* MINIX\n\nNon-Unix adoption \n\nELF has also seen some adoption in non-Unix operating systems, such as:\n* OpenVMS, in its Itanium and x86-64 versionshttps://vmssoftware.com/pdfs/State_of_Port_20160906.pdf\n* BeOS Revision 4 and later for x86 based computers (where it replaced the Portable Executable format; the PowerPC version stayed with Preferred Executable Format)\n* Haiku, an open source reimplementation of BeOS\n* RISC OS\n* Stratus VOS, in PA-RISC and x86 versions\n* Windows 10 Anniversary Update using the Windows Subsystem for Linux.\n* SkyOS\n* Fuchsia OS\n\nGame consoles \n\nSome game consoles also use ELF:\n* PlayStation Portable,PlayStation Portable use encrypted & relocated ELF : PSP PlayStation Vita, PlayStation 2, PlayStation 3, PlayStation 4\n* GP2X\n* Dreamcast\n* Nintendo DS, GameCube, Wii, Wii U\n\nPowerPC \n\nOther operating systems running on PowerPC that use ELF:\n* AmigaOS 4, the ELF executable has replaced the prior Extended Hunk Format (EHF) which was used on Amigas equipped with PPC processor expansion cards.\n* MorphOS\n* AROS\n\nMobile phones \n\nSome operating systems for mobile phones and mobile devices use ELF:\n* Symbian OS v9 uses E32Image[https://web.archive.org/web/20091213034509/http://wiki.forum.nokia.com/index.php/E32Image Symbian OS executable file format] format that is based on the ELF file format;\n* Sony Ericsson, for example, the W800i, W610, W300, etc.\n* Siemens, the SGOLD and SGOLD2 platforms: from Siemens C65 to S75 and BenQ-Siemens E71/EL71;\n* Motorola, for example, the E398, SLVR L7, v360, v3i (and all phone LTE2 which has the patch applied).\n* Bada, for example, the Samsung Wave S8500.\n* Nokia phones or tablets running the Maemo or the Meego OS, for example, the Nokia N900.\n* Android uses ELF .so (shared object\n\n) libraries for the Java Native Interface. With Android Runtime (ART), the default since Android 5.0 \"Lollipop\", all applications are compiled into native ELF binaries on installation.\n\nSome phones can run ELF files through the use of a patch that adds assembly code to the main firmware, which is a feature known as ELFPack in the underground modding culture. The ELF file format is also used with the Atmel AVR (8-bit), AVR32\n\nand with Texas Instruments MSP430 microcontroller architectures. Some implementations of Open Firmware can also load ELF files, most notably Apple's implementation used in almost all PowerPC machines the company produced.\n\nSpecifications \n\n* Generic:\n** [http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface] Edition 4.1 (1997-03-18)\n** [http://www.sco.com/developers/gabi/latest/contents.html System V ABI Update] (October 2009)\n* AMD64:\n** [http://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf System V ABI, AMD64 Supplement]\n* ARM:\n** [http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044b/IHI0044B_aaelf.pdf ELF for the ARM Architecture]\n* IA-32:\n** [http://www.sco.com/developers/devspecs/abi386-4.pdf System V ABI, Intel386 Architecture Processor Supplement]\n* IA-64:\n** [http://refspecs.linux-foundation.org/IA64conventions.pdf Itanium Software Conventions and Runtime Guide] (September 2000)\n* M32R:\n** [http://www.linux-m32r.org/cmn/m32r/M32R-elf-abi.pdf M32R ELF ABI Supplement] Version 1.2 (2004-08-26)\n* MIPS:\n** [http://www.sco.com/developers/devspecs/mipsabi.pdf System V ABI, MIPS RISC Processor Supplement]\n** [http://sources.redhat.com/ml/binutils/2003-06/msg00436.html MIPS EABI documentation] (2003-06-11)\n* Motorola 6800:\n** [http://uclibc.org/docs/psABI-m8-16.pdf Motorola 8- and 16- bit Embedded ABI]\n* PA-RISC:\n** [https://web.archive.org/web/20110317045038/http://refspecs.freestandards.org/elf/elf-pa.pdf ELF Supplement for PA-RISC] Version 1.43 (October 6, 1997)\n* PowerPC:\n** [https://web.archive.org/web/20070630123210/http://refspecs.freestandards.org/elf/elfspec_ppc.pdf System V ABI, PPC Supplement]\n** [https://web.archive.org/web/20110723003758/http://sources-redhat.mirrors.airband.net/binutils/ppc-docs/ppc-eabi-1995-01.pdf PowerPC Embedded Application Binary Interface] 32-Bit Implementation (1995-10-01)\n** [http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi-1.9.html 64-bit PowerPC ELF Application Binary Interface Supplement] Version 1.9 (2004)\n* SPARC:\n** [https://web.archive.org/web/20080517110249/http://www.sparc.org/standards/psABI3rd.pdf System V ABI, SPARC Supplement]\n* S/390:\n** [http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_s390.html S/390 32bit ELF ABI Supplement]\n* zSeries:\n** [http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_zSeries.html zSeries 64bit ELF ABI Supplement]\n* Symbian OS 9:\n** [https://web.archive.org/web/20080518002831/http://wiki.forum.nokia.com/index.php/E32Image_file_format_on_Symbian_OS_9 E32Image file format on Symbian OS 9]\n\nThe Linux Standard Base (LSB) supplements some of the above specifications for architectures in which it is specified. For example, that is the case for the System V ABI, AMD64 Supplement.\n\n86open \n\n86open was a project to form consensus on a common binary file format for Unix and Unix-like operating systems on the common PC compatible x86 architecture, to encourage software developers to port to the architecture. The initial idea was to standardize on a small subset of Spec 1170, a predecessor of the Single UNIX Specification, and the GNU C Library (glibc) to enable unmodified binaries to run on the x86 Unix-like operating systems. The project was originally designated \"Spec 150\".\n\nThe format eventually chosen was ELF, specifically the Linux implementation of ELF, after it had turned out to be a de facto standard supported by all involved vendors and operating systems.\n\nThe group began email discussions in 1997 and first met together at the Santa Cruz Operation offices on August 22, 1997.\n\nThe steering committee was Marc Ewing, Dion Johnson, Evan Leibovitch, Bruce Perens, Andrew Roach, Bryan Sparks and Linus Torvalds. Other people on the project were Keith Bostic, Chuck Cranor, Michael Davidson, Chris G. Demetriou, Ulrich Drepper, Don Dugger, Steve Ginzburg, Jon \"maddog\" Hall, Ron Holt, Jordan Hubbard, Dave Jensen, Kean Johnston, Andrew Josey, Robert Lipe, Bela Lubkin, Tim Marsland, Greg Page, Ronald Joe Record, Tim Ruckle, Joel Silverstein, Chia-pi Tien, and Erik Troan. Operating systems and companies represented were BeOS, BSDI, FreeBSD, Intel, Linux, NetBSD, SCO and SunSoft, Inc..\n\nThe project progressed and in mid-1998, SCO began developing lxrun, an open-source compatibility layer able to run Linux binaries on OpenServer, UnixWare, and Solaris. SCO announced official support of lxrun at LinuxWorld in March 1999. Sun Microsystems began officially supporting lxrun for Solaris in early 1999, and later moved to integrated support of the Linux binary format via Solaris Containers for Linux Applications.\n\nWith the BSDs having long supported Linux binaries (through a compatibility layer) and the main x86 Unix vendors having added support for the format, the project decided that Linux ELF was the format chosen by the industry and \"declare[d] itself dissolved\" on July 25, 1999.\n\nFatELF: universal binaries for Linux \n\nFatELF is an ELF binary-format extension that adds fat binary capabilities. It is aimed for Linux and other Unix-like operating systems. Additionally to the CPU architecture abstraction (byte order, word size, CPU instruction set etc.), there is the potential advantage of software-platform abstraction e.g., binaries which support multiple kernel ABI versions. As of 2014, support for FatELF is not integrated in the Linux kernel mainline.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Executable and Linkable Format" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=9914" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In computing, the Executable and Linkable Format (ELF, formerly named Extensible Linking Format), is a common standard file format for executable files, object code, shared libraries, and core dumps. First published in the specification for the application binary interface (ABI) of the Unix operating system version named System V Release 4 (SVR4),[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface] Edition 4.1 (1997-03-18) and later in the Tool Interface Standard,Tool Interface Standard (TIS) [http://refspecs.linuxbase.org/elf/elf.pdf Executable and Linking Format (ELF) Specification] Version 1.2 (May 1995) it was quickly accepted among different vendors of Unix systems. In 1999, it was chosen as the standard binary file format for Unix and Unix-like systems on x86 processors by the 86open project.\n\nBy design, ELF is flexible, extensible, and cross-platform, not bound to any given central processing unit (CPU) or instruction set architecture. This has allowed it to be adopted by many different operating systems on many different hardware platforms.\n\nFile layout \n\nEach ELF file is made up of one ELF header, followed by file data. The data can include:\n* Program header table, describing zero or more memory segments\n* Section header table, describing zero or more sections\n* Data referred to by entries in the program header table or section header table\n\nThe segments contain information that is needed for run time execution of the file, while sections contain important data for linking and relocation. Any byte in the entire file can be owned by one section at most, and orphan bytes can occur which are unowned by any section.\n\nFile header \n\nThe ELF header defines whether to use 32- or 64-bit addresses. The header contains three fields that are affected by this setting and offset other fields that follow them. The ELF header is 52 or 64 bytes long for 32-bit and 64-bit binaries respectively.\n\nProgram header \n\nThe program header table tells the system how to create a process image.  It is found at file offset e_phoff, and consists of e_phnum entries, each with size e_phentsize.  The layout is slightly different in 32-bit ELF vs 64-bit ELF, because the p_flags are in a different structure location for alignment reasons.  Each entry is structured as:\n\nSection header \n\nTools \n\n* readelf is a Unix binary utility that displays information about one or more ELF files. A free software implementation is provided by GNU Binutils.\n* elfutils provides alternative tools to GNU Binutils purely for Linux.\n* elfdump is a command for viewing ELF information in an ELF file, available under Solaris and FreeBSD.\n* objdump provides a wide range of information about ELF files and other object formats. objdump uses the Binary File Descriptor library as a back-end to structure the ELF data.\n* The Unix file utility can display some information about ELF files, including the instruction set architecture for which the code in a relocatable, executable, or shared object file is intended, or on which an ELF core dump was produced.\n\nApplications \n\nUnix-like systems \n\nThe ELF format has replaced older executable formats in various environments.\nIt has replaced a.out and COFF formats in Unix-like operating systems:\n* Linux\n* Solaris\n* IRIX\n* FreeBSD\n* NetBSD\n* OpenBSD\n* DragonFly BSD\n* Syllable\n* HP-UX (except for 32-bit PA-RISC programs which continue to use SOM)\n* QNX Neutrino\n* MINIX\n\nNon-Unix adoption \n\nELF has also seen some adoption in non-Unix operating systems, such as:\n* OpenVMS, in its Itanium and x86-64 versionshttps://vmssoftware.com/pdfs/State_of_Port_20160906.pdf\n* BeOS Revision 4 and later for x86 based computers (where it replaced the Portable Executable format; the PowerPC version stayed with Preferred Executable Format)\n* Haiku, an open source reimplementation of BeOS\n* RISC OS\n* Stratus VOS, in PA-RISC and x86 versions\n* Windows 10 Anniversary Update using the Windows Subsystem for Linux.\n* SkyOS\n* Fuchsia OS\n\nGame consoles \n\nSome game consoles also use ELF:\n* PlayStation Portable,PlayStation Portable use encrypted & relocated ELF : PSP PlayStation Vita, PlayStation 2, PlayStation 3, PlayStation 4\n* GP2X\n* Dreamcast\n* Nintendo DS, GameCube, Wii, Wii U\n\nPowerPC \n\nOther operating systems running on PowerPC that use ELF:\n* AmigaOS 4, the ELF executable has replaced the prior Extended Hunk Format (EHF) which was used on Amigas equipped with PPC processor expansion cards.\n* MorphOS\n* AROS\n\nMobile phones \n\nSome operating systems for mobile phones and mobile devices use ELF:\n* Symbian OS v9 uses E32Image[https://web.archive.org/web/20091213034509/http://wiki.forum.nokia.com/index.php/E32Image Symbian OS executable file format] format that is based on the ELF file format;\n* Sony Ericsson, for example, the W800i, W610, W300, etc.\n* Siemens, the SGOLD and SGOLD2 platforms: from Siemens C65 to S75 and BenQ-Siemens E71/EL71;\n* Motorola, for example, the E398, SLVR L7, v360, v3i (and all phone LTE2 which has the patch applied).\n* Bada, for example, the Samsung Wave S8500.\n* Nokia phones or tablets running the Maemo or the Meego OS, for example, the Nokia N900.\n* Android uses ELF .so (shared object\n\n) libraries for the Java Native Interface. With Android Runtime (ART), the default since Android 5.0 \"Lollipop\", all applications are compiled into native ELF binaries on installation.\n\nSome phones can run ELF files through the use of a patch that adds assembly code to the main firmware, which is a feature known as ELFPack in the underground modding culture. The ELF file format is also used with the Atmel AVR (8-bit), AVR32\n\nand with Texas Instruments MSP430 microcontroller architectures. Some implementations of Open Firmware can also load ELF files, most notably Apple's implementation used in almost all PowerPC machines the company produced.\n\nSpecifications \n\n* Generic:\n** [http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface] Edition 4.1 (1997-03-18)\n** [http://www.sco.com/developers/gabi/latest/contents.html System V ABI Update] (October 2009)\n* AMD64:\n** [http://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf System V ABI, AMD64 Supplement]\n* ARM:\n** [http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044b/IHI0044B_aaelf.pdf ELF for the ARM Architecture]\n* IA-32:\n** [http://www.sco.com/developers/devspecs/abi386-4.pdf System V ABI, Intel386 Architecture Processor Supplement]\n* IA-64:\n** [http://refspecs.linux-foundation.org/IA64conventions.pdf Itanium Software Conventions and Runtime Guide] (September 2000)\n* M32R:\n** [http://www.linux-m32r.org/cmn/m32r/M32R-elf-abi.pdf M32R ELF ABI Supplement] Version 1.2 (2004-08-26)\n* MIPS:\n** [http://www.sco.com/developers/devspecs/mipsabi.pdf System V ABI, MIPS RISC Processor Supplement]\n** [http://sources.redhat.com/ml/binutils/2003-06/msg00436.html MIPS EABI documentation] (2003-06-11)\n* Motorola 6800:\n** [http://uclibc.org/docs/psABI-m8-16.pdf Motorola 8- and 16- bit Embedded ABI]\n* PA-RISC:\n** [https://web.archive.org/web/20110317045038/http://refspecs.freestandards.org/elf/elf-pa.pdf ELF Supplement for PA-RISC] Version 1.43 (October 6, 1997)\n* PowerPC:\n** [https://web.archive.org/web/20070630123210/http://refspecs.freestandards.org/elf/elfspec_ppc.pdf System V ABI, PPC Supplement]\n** [https://web.archive.org/web/20110723003758/http://sources-redhat.mirrors.airband.net/binutils/ppc-docs/ppc-eabi-1995-01.pdf PowerPC Embedded Application Binary Interface] 32-Bit Implementation (1995-10-01)\n** [http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi-1.9.html 64-bit PowerPC ELF Application Binary Interface Supplement] Version 1.9 (2004)\n* SPARC:\n** [https://web.archive.org/web/20080517110249/http://www.sparc.org/standards/psABI3rd.pdf System V ABI, SPARC Supplement]\n* S/390:\n** [http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_s390.html S/390 32bit ELF ABI Supplement]\n* zSeries:\n** [http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_zSeries.html zSeries 64bit ELF ABI Supplement]\n* Symbian OS 9:\n** [https://web.archive.org/web/20080518002831/http://wiki.forum.nokia.com/index.php/E32Image_file_format_on_Symbian_OS_9 E32Image file format on Symbian OS 9]\n\nThe Linux Standard Base (LSB) supplements some of the above specifications for architectures in which it is specified. For example, that is the case for the System V ABI, AMD64 Supplement.\n\n86open \n\n86open was a project to form consensus on a common binary file format for Unix and Unix-like operating systems on the common PC compatible x86 architecture, to encourage software developers to port to the architecture. The initial idea was to standardize on a small subset of Spec 1170, a predecessor of the Single UNIX Specification, and the GNU C Library (glibc) to enable unmodified binaries to run on the x86 Unix-like operating systems. The project was originally designated \"Spec 150\".\n\nThe format eventually chosen was ELF, specifically the Linux implementation of ELF, after it had turned out to be a de facto standard supported by all involved vendors and operating systems.\n\nThe group began email discussions in 1997 and first met together at the Santa Cruz Operation offices on August 22, 1997.\n\nThe steering committee was Marc Ewing, Dion Johnson, Evan Leibovitch, Bruce Perens, Andrew Roach, Bryan Sparks and Linus Torvalds. Other people on the project were Keith Bostic, Chuck Cranor, Michael Davidson, Chris G. Demetriou, Ulrich Drepper, Don Dugger, Steve Ginzburg, Jon \"maddog\" Hall, Ron Holt, Jordan Hubbard, Dave Jensen, Kean Johnston, Andrew Josey, Robert Lipe, Bela Lubkin, Tim Marsland, Greg Page, Ronald Joe Record, Tim Ruckle, Joel Silverstein, Chia-pi Tien, and Erik Troan. Operating systems and companies represented were BeOS, BSDI, FreeBSD, Intel, Linux, NetBSD, SCO and SunSoft, Inc..\n\nThe project progressed and in mid-1998, SCO began developing lxrun, an open-source compatibility layer able to run Linux binaries on OpenServer, UnixWare, and Solaris. SCO announced official support of lxrun at LinuxWorld in March 1999. Sun Microsystems began officially supporting lxrun for Solaris in early 1999, and later moved to integrated support of the Linux binary format via Solaris Containers for Linux Applications.\n\nWith the BSDs having long supported Linux binaries (through a compatibility layer) and the main x86 Unix vendors having added support for the format, the project decided that Linux ELF was the format chosen by the industry and \"declare[d] itself dissolved\" on July 25, 1999.\n\nFatELF: universal binaries for Linux \n\nFatELF is an ELF binary-format extension that adds fat binary capabilities. It is aimed for Linux and other Unix-like operating systems. Additionally to the CPU architecture abstraction (byte order, word size, CPU instruction set etc.), there is the potential advantage of software-platform abstraction e.g., binaries which support multiple kernel ABI versions. As of 2014, support for FatELF is not integrated in the Linux kernel mainline. Executable and Linkable Format. http://en.wikipedia.org/?curid=9914."
  }
}
