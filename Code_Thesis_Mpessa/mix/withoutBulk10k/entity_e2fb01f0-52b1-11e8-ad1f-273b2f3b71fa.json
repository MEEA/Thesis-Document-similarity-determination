{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=7713",
  "eid" : "e2fb01f0-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778460559,
  "textBody" : "The Chinese remainder theorem is a theorem of number theory, which states that if one knows the remainders of the Euclidean division of an integer  by several integers, then one can determine uniquely the remainder of the division of  by the product of these integers, under the condition that the divisors are pairwise coprime.\n\nThe theorem was first discovered in the 3rd century AD by the Chinese mathematician Sunzi in Sunzi Suanjing.\n\nThe Chinese remainder theorem is widely used for computing with large integers, as it allows replacing a computation for which one knows a bound on the size of the result by several similar computations on small integers.\n\nThe Chinese remainder theorem (expressed in terms of congruences) is true over every principal ideal domain. It has been generalized to any commutative ring, with a formulation involving ideals.\n\nHistory\n\nThe earliest known statement of the theorem, as a problem with specific numbers, appears in the 3rd-century book Sunzi Suanjing by the Chinese mathematician Sunzi:\n\nSunzi's work contains neither a proof nor a full algorithm. What amounts to an algorithm for solving this problem was described by Aryabhata (6th century). Special cases of the Chinese remainder theorem were also known to Brahmagupta (7th century), and appear in Fibonacci's Liber Abaci (1202). The result was later generalized with a complete solution called Dayanshu () in Qin Jiushao's 1247 Mathematical Treatise in Nine Sections (, Shushu Jiuzhang).\n\nThe notion of congruences was first introduced and used by Gauss in his Disquisitiones Arithmeticae of 1801. Gauss illustrates the Chinese remainder theorem on a problem involving calendars, namely, \"to find the years that have a certain period number with respect to the solar and lunar cycle and the Roman indiction.\" Gauss introduces a procedure for solving the problem that had already been used by Euler but was in fact an ancient method that had appeared several times.\n\nTheorem statement \n\nLet  be integers greater than 1, which are often called moduli or divisors. Let us denote by  the product of the .\n\nThe Chinese remainder theorem asserts that if the  are pairwise coprime, and if  are integers such that  for every , then there is one and only one integer , such that  and the remainder of the Euclidean division of  by  is  for every .\n\nThis may be restated as follows in term of congruences:\nIf the  are pairwise coprime, and if  are any integers, then there exists an integer  such that\n\\begin{align} x \\equiv a_1 & \\pmod{n_1} \\\\ \\quad \\vdots \\\\ x \\equiv a_k &\\pmod{n_k} \\end{align},\nand any two such  are congruent modulo .\n\nIn abstract algebra, the theorem is often restated as: if the  are pairwise coprime, the map\nx \\operatorname{mod} N \\quad\\mapsto\\quad (x\\operatorname{mod}n_1, \\ldots, x\\operatorname{mod} n_k)\ndefines a ring isomorphism\n\n\\Bbb{Z}/N\\Bbb{Z} \\cong \\Bbb{Z}/n_1\\Bbb{Z} \\times \\cdots \\times \\Bbb{Z}/n_k\\Bbb{Z}\nbetween the ring of integers modulo  and the direct product of the rings of integers modulo the . This means that for doing a sequence of arithmetic operations in \\Bbb{Z}/N\\Bbb{Z}, one may do the same computation independently in each \\Bbb{Z}/n_i\\Bbb{Z} and then get the result by applying the isomorphism (from the right to the left). This may be much faster than the direct computation if  and the number of operations are large. This is widely used, under the name multi-modular computation, for linear algebra over the integers or the rational numbers.\n\nThe theorem can also be restated in the language of combinatorics as the fact that the infinite arithmetic progressions of integers form a Helly family.\n\nProof\n\nThe existence and the uniqueness of the solution may be proven independently. However, the first proof of existence, given below, uses this uniqueness.\n\nUniqueness\n\nSuppose that  and  are both solutions to all the congruences. As  and  give the same remainder, when divided by , their difference  is a multiple of each . As the  are pairwise coprime, their product  divides also , and thus  and  are congruent modulo . If  and   are supposed to be non negative and less than  (as in the first statement of the theorem), then their difference may be a multiple of  only if .\n\nExistence (first proof)\n\nThe map\nx \\mapsto (x \\operatorname{mod} n_1, \\ldots, x\\operatorname{mod} n_k)\nmaps congruence classes modulo  to sequences of congruence classes modulo . The proof of uniqueness shows that this map is injective. As the domain and the codomain of this map have the same number of elements, the map is also surjective, which proves the existence of the solution.\n\nThis proof is very simple but does not provide any direct way for computing a solution. Moreover, it cannot be generalized to other situations where the following proof can.\n\nExistence (constructive proof)\n\nExistence may be established by an explicit construction of . This construction may be split into two steps, firstly by solving the problem in the case of two moduli, and the second one by extending this solution to the general case by induction on the number of moduli.\n\nCase of two moduli\n\nWe want to solve the system\n\\begin{align}\nx &\\equiv a_1 \\pmod {n_1}\\\\\nx &\\equiv a_2 \\pmod {n_2},\n\\end{align}\nwhere n_1 and n_2 are coprime.\n\nBézout's identity asserts the existence of two integers m_1 and m_2 such that \nm_1n_1+m_2n_2=1.\nThe integers m_1 and m_2 may be computed by Extended Euclidean algorithm.\n\nA solution is given by\nx = a_1m_2n_2+a_2m_1n_1.\nIndeed, \n\\begin{align}\nx&=a_1m_2n_2+a_2m_1n_1\\\\\n&=a_1(1 - m_1n_1) + a_2m_1n_1 \\\\\n&=a_1 + (a_2 - a_1)m_1n_1,\n\\end{align}\nimplying that x \\equiv a_1 \\pmod {n_1}. The second congruence is proved similarly.\n\nGeneral case\n\nLet us consider a sequence of congruence equations\n\\begin{align} x \\equiv a_1 & \\pmod{n_1} \\\\ \\quad \\vdots \\\\ x \\equiv a_k &\\pmod{n_k} \\end{align},\nwhere the n_i are pairwise coprime. The two first equations have a solution a_{1,2} provided by the method of the previous section. The set of the solutions of these two first equations is the set of all solutions of the equation\nx \\equiv a_{1,2} \\pmod{n_1n_2}.\n\nAs the other n_i are coprime with n_1n_2, this reduces solving the initial problem of  equations to a similar problem with k-1 equations. Iterating the process, one gets eventually the solutions of the initial problem.\n\nExistence (direct construction)\n\nFor constructing a solution, it is not necessary to make an induction on the number of moduli. However, such a direct construction involves more computation with large numbers, which makes it less efficient and less used. Nevertheless, Lagrange interpolation is a special case of this construction, applied to polynomials instead of integers.\n\nLet N_i = N/n_i be the product of all moduli but one. As the n_i are pairwise coprime, N_i and n_i are coprime. Thus Bézout's identity applies, and there exist integers M_i and m_i such that\nM_iN_i + m_in_i=1.\n\nA solution of the system of congruences is\nx\\sum_{i\n1}^k a_iM_iN_i.\nIn fact, as N_j is a multiple of n_i for i\\neq j,\nwe have\nx \\equiv a_iM_iN_i \\equiv a_i(1-m_in_i) \\equiv a_i \\pmod{n_i}, \nfor every i.\n\nComputation \n\nLet us consider a system of congruences\n\\begin{align} x \\equiv a_1 & \\pmod{n_1} \\\\ \\quad \\vdots \\\\ x \\equiv a_k &\\pmod{n_k}, \\end{align}\nwhere the n_i are pairwise coprime, and let N=n_1 n_2\\cdots n_k. In this section several methods are described for computing the unique solution for x, such that 0\\le x and these methods are applied on the example\n\n\\begin{align}\n x &\\equiv 0 \\pmod{3} \\\\\n x &\\equiv 3 \\pmod{4} \\\\\n x &\\equiv 4 \\pmod{5}.\n\\end{align}\n\nSystematic search\n\nIt is easy to check whether a value of  is a solution: it suffices to compute the remainder of the Euclidean division of  by each . Thus, to find the solution, it suffices to check successively the integers from  to  until finding the solution.\n\nAlthough very simple this method is very inefficient: for the simple example considered here,  integers (including ) have to be checked for finding the solution . This is an exponential time algorithm, as the size of the input is, up to a constant factor, the number of digits of , and the average number of operations is of the order of .\n\nTherefore, this method is rarely used, for hand-written computation as well on computers.\n\nSearch by sieving\n\nThe search of the solution may be made dramatically faster by sieving. For this method, we suppose, without loss of generality, that 0\\le a_i  (if it were not the case, it would suffice to replace each a_i by the remainder of its division by n_i). This implies that the solution belongs to the arithmetic progression\na_1, a_1 + n_1, a_1+2n_1, \\ldots\nBy testing the values of these numbers modulo n_2, one eventually finds a solution x_2 of the two first congruences. Then the solution belongs to the arithmetic progression \nx_2, x_2 + n_1n_2, x_2+2n_1n_2, \\ldots\nTesting the values of these numbers modulo n_3,, and continuing until every modulus has been tested gives eventually the solution.\n\nThis method is faster if the moduli have been ordered by decreasing value, that is if n_1>n_2> \\cdots > n_k. For the example, this gives the following computation. We consider first the numbers that are congruent to 4 modulo 5 (the largest modulus), which are 4, , , ... For each of them, compute the remainder by 4 (the second largest modulus) until getting a number congruent to 3 modulo 4. Then one can proceed  by adding  at each step, and computing only the remainders by 3. This gives\n4 mod 4 → 0. Continue\n4 + 5 = 9 mod 4 →1.  Continue\n9 + 5 = 14 mod 4 → 2. Continue\n14 + 5 19 mod 4 → 3. OK, continue by considering remainders modulo 3 and adding 5×4 \n 20 each time\n19 mod 3 → 1. Continue\n19 + 20 = 39 mod 3 → 0. OK, this is the result.\n\nThis method works well for hand-written computation with a product of moduli that is not too big. However, it is much slower than other methods, for very large products of moduli. Although dramatically faster than the systematic search, this method also has an exponential time complexity and is therefore not used on computers.\n\nUsing the existence construction \n\nThe constructive existence proof shows that, in the case of two moduli, the solution may be obtained by the computation of the Bézout coefficients of the moduli, followed by a few multiplications, additions and reductions modulo n_1n_2 (for getting a result in the interval (0, n_1n_2-1)). As the Bézout's coefficients may be computed with the extended Euclidean algorithm, the whole computation, at most, has a quadratic time complexity of O((s_1+s_2)^2), where s_i denotes the number of digits of n_i.\n\nFor more than two moduli, the method for two moduli allows the replacement of any two congruences by a single congruence modulo the product of the moduli. Iterating this process provides eventually the solution with a complexity, which is quadratic in the number of digits of the product of all moduli. This quadratic time complexity does not depend on the order in which the moduli are regrouped. One may regroup the two first moduli, then regroup the resulting modulus with the next one, and so on. This strategy is the easiest to implement, but it also requires more computation involving large numbers.\n\nAnother strategy consists in partitioning the moduli in pairs whose product have comparable sizes (as much as possible), applying, in parallel, the method of two moduli to each pair, and iterating with a number of moduli approximatively divided by two. This method allows an easy parallelization of the algorithm. Also, if fast algorithms (that is algorithms working in quasilinear time) are used for the basic operations, this method provides an algorithm for the whole computation that works in quasilinear time.\n\nOn the current example (which has only three moduli), both strategies are identical and work as follows.\n\nBézout's identity for 3 and 4 is\n1\\times 4 + (-1)\\times 3 = 1.\nPutting this in the formula given for proving the existence gives \n0\\times 4 + (-3)\\times 3 =-9\nfor a solution of the two first congruences, the other solutions being obtained by adding to −9 any multiple of . One may continue with any of these solutions, but the solution  is smaller (in absolute value) and thus leads probably to an easier computation\n\nBézout identity for 5 and 3×4 = 12 is\n5\\times 5 +(-2)\\times 12 =1.\nApplying the same formula again, we get a solution of the problem:\n25\\times 3 -24\\times 4 = -21.\nThe other solutions are obtained by adding any multiple of , and the smallest positive solution is .\n\nAs a linear Diophantine system\n\nThe system of congruences solved by the Chinese remainder theorem may be rewritten as a system of simultaneous linear Diophantine equations\n\\begin{align} \nx &= a_1 +x_1n_1\\\\ \n\\quad \\vdots \\\\ \nx &=a_k+x_kn_k, \n\\end{align}\nwhere the unknown integers are x and the x_i. Therefore, every general method for solving such systems may be used for finding the solution of Chinese remainder theorem, such as the reduction of the matrix of the system to Smith normal form or Hermite normal form. However, as usual when using a general algorithm for a more specific problem, this approach is less efficient than the method of the preceding section, based on a direct use of Bézout's identity.\n\nOver principal ideal domains \n\nIn , the Chinese remainder theorem has been stated in three different ways: in terms of remainders, of congruences, and of a ring isomorphism. The statement in terms of remainders does not apply, in general, to principal ideal domains, as remainders are not defined in such rings. However, the two other versions make sense over a principal ideal domain : it suffices to replace \"integer\" by \"element of the domain\" and \\Bbb Z by  . These two versions of the theorem are true in this context, because the proofs (except for the first existence proof), are based on Euclid's lemma and Bézout's identity, which are true over every principal domain.\n\nHowever, in general, the theorem is only an existence theorem and does not provide any way for computing the solution, unless one has an algorithm for computing the coefficients of Bézout's identity.\n\nOver univariate polynomial rings and Euclidean domains\n\nThe statement in terms of remainders given in  cannot be generalized to any principal ideal domain, but its generalization to Euclidean domains is straightforward. The univariate polynomials over a field is the typical example of a Euclidean domain, which is not the integers. Therefore, we state the theorem for the case of a ring of univariate domain R=K[X] over a field K. For getting the theorem for a general Euclidean domain, it suffices to replace the degree by the Euclidean function of the Euclidean domain.\n\nThe Chinese remainder theorem for polynomials is thus: Let P_i(X) (the moduli) be,  for , pairwise coprime polynomials in RK[X]. Let d_i \n\\deg P_i be the degree of P_i(X), and D be the sum of the d_i.\nIf A_i(X), \\ldots,A_k(X) are polynomials such that A_i(X)=0 or \\deg A_i for every , then, there is one and only one polynomial P(X), such that \\deg P and the remainder of the Euclidean division of P(X) by P_i(X) isA_i(X) for every .\n\nThe construction of the solution may be done as in  or . However, the latter construction may be simplified by using, as follows, partial fraction decomposition instead of extended Euclidean algorithm.\n\nThus, we want to find a polynomial P(X), which satisfies the congruences\nP(X)\\equiv A_i(X) \\pmod {P_i(X)},\nfor i=1,\\ldots,k.\n\nLet us consider the polynomials\n\\begin{align}\n    Q(X) &\\prod_{i\n1}^{k}P_i(X) \\\\\n  Q_i(X) &= \\frac{Q(X)}{P_i(X)}.\n\\end{align}\n\nThe partial fraction decomposition of 1/Q(X) gives  polynomials S_i(X) with degrees \\deg S_i(X)  such that\n\\frac{1}{Q(X)} \\sum_{i\n1}^k \\frac{S_i(X)}{P_i(X)},\nand thus\n1 \\sum_{i\n1}^{k}S_i(X) Q_i(X).\n\nThen a solution of the simultaneous congruence system is given by the polynomial\n\\sum_{i=1}^k A_i(X) S_i(X) Q_i(X).\n\nIn fact, we have\n\\sum_{i1}^k A_i(X) S_i(X) Q_i(X)\n A_i(X)+ \\sum_{j=1}^{k}(A_j(X) - A_i(X)) S_j(X) Q_j(X) \\equiv A_i(X)\\pmod{P_i(X)},\nfor 1 \\leq i \\leq k.\n\nThis solution may have a degree larger that D\\sum_{i\n1}^k d_i. The unique solution of degree less than D may be deduced by considering the remainder B_i(X) of the Euclidean division of A_i(X)S_i(X) by P_i(X). This solution is \nP(X)\\sum_{i\n1}^k B_i(X) Q_i(X).\n\nLagrange interpolation\n\nA special case of Chinese remainder theorem for polynomials is Lagrange interpolation. For this, let us consider  monic polynomials of degree one:\n\nP_i(X)=X-x_i.\n\nThey are pairwise coprime if the x_i are all different. The remainder of the division by P_i(X) of a polynomial P(X) is P(x_i).\n\nNow, let A_1, \\ldots, A_k be constants (polynomials of degree 0) in K. Both Lagrange interpolation and Chinese remainder theorem assert the existence of a unique polynomial P(X), of degree less than k such that\n\nP(x_i)=A_i,\n\nfor every i.\n\nLagrange interpolation formula is exactly the result, in this case, of the above construction of the solution. More precisely, let \n\n\\begin{align}\n  Q(X)  &\\prod_{i\n1}^{k}(X-x_i) \\\\[6pt]\n Q_i(X) &= \\frac{Q(X)}{X-x_i}.\n\\end{align}\n\nThe partial fraction decomposition of \\tfrac{1}{Q(X)} is \n\n\\frac{1}{Q(X)} \\sum_{i\n1}^k \\frac{1}{Q_i(x_i)(X-X_i)}.\n\nIn fact, reducing the right-hand side to a common denominator one gets \n\n \\sum_{i1}^k \\frac{1}{Q_i(x_i)(X-X_i)}\n \\frac{1}{Q(X)} \\sum_{i=1}^k \\frac{Q_i(X)}{Q_i(x_i)},\n\nand the numerator is equal to one, as being a polynomial of degree less than k, which takes the value one for k different values of X.\n\nUsing the above general formula, we get the Lagrange interpolation formula:\n\nP(X)\\sum_{i\n1}^k A_i\\frac{Q_i(X)}{Q_i(x_i)}.\n\nHermite interpolation\n\nHermite interpolation is an application of Chinese remainder theorem for univariate polynomials, which may involve moduli of arbitrary degrees (Lagrange interpolation involves only moduli of degree one).\n\nThe problem consists of finding a polynomial of the least possible degree, such that the polynomial and its first derivatives take given values at some fixed points.\n\nMore precisely, let x_1, \\ldots, x_k be k elements of the ground field K, and, for i1,\\ldots, k, let a_{i,0}, a_{i,1}, \\ldots, a_{i,r_i-1} be the values of the first r_i derivatives of the sought polynomial at x_i (including the 0th derivative, which is the value of the polynomial itself). The problem is to find a polynomial P(X) such that its jth derivative takes the value a_{i,j}  at x_i, for i\n1,\\ldots,k and j=0,\\ldots,r_j.\n\nLet us consider the polynomial\nP_i(X) \\sum_{j\n0}^{r_i - 1}\\frac{a_{i,j}}{j!}(X - x_i)^j.\nThis is the Taylor polynomial   of order r_i-1 at x_i, of the unknown polynomial P(X). Therefore, we must have\nP(X)\\equiv P_i(X) \\pmod {(X-x_i)^{r_i}}.\n\nConversely, any polynomial P(X)  that satisfies these k congruences, in particular verifies, for any i=1, \\ldots, k\nP(X)= P_i(X) +o(X-x_i)^{r_i-1}  \ntherefore P_i(X) is its Taylor polynomial of order  r_i - 1 at x_i, that is, P(X) solves the initial Hermite interpolation problem.\nThe Chinese remainder theorem asserts that there exists exactly one polynomial of degree less than the sum of the r_i, which satisfies these k congruences.\n\nThere are several ways for computing the solution P(X). One may use the method described at the beginning of . One may also use the constructions given in  or .\n\nGeneralization to arbitrary rings \n\nThe Chinese remainder theorem can be generalized to any ring, by using coprime ideals (also called comaximal ideals). Two ideals  and  are coprime if there are elements i\\in I and j\\in J such that i+j=1. This relation plays the role of Bézout's identity in the proofs related to this generalization, which, otherwise are very similar. The generalization may be stated as follows.\n\nLet  be two-sided ideals of a ring R that are pairwise coprime,  and  be their intersection. Then we have the isomorphism \n\\begin{align}\n    R/I &\\to R/I_1 \\times \\cdots \\times R/I_k \\\\\n  x \\operatorname{mod} I &\\mapsto (x \\operatorname{mod} I_1, \\cdots, x\\operatorname{mod} I_k),\n\\end{align}\nbetween the quotient ring R/I and the direct product of the R/I_i,\nwhere \"x \\operatorname{mod} I\" denotes the image of the element x in the quotient ring defined by the ideal I.\nMoreover, if R is commutative, then the ideal intersection  is equal to the product of the ideals I_i:\nII_1\\cap I_2 \\cap\\ldots\\cap I_k\n I_1I_2\\cdots I_k\n\nApplications \n\nSequence numbering\n\nThe Chinese remainder theorem has been used to construct a Gödel numbering for sequences, which is involved in the proof of Gödel's incompleteness theorems.\n\nFast Fourier transform\n\nThe prime-factor FFT algorithm (also called Good-Thomas algorithm) uses the Chinese remainder theorem for reducing the computation of a fast Fourier transform of size n_1n_2 to the computation of two fast Fourier transforms of smaller sizes n_1 and n_2 (providing that n_1 and n_2 are coprime).\n\nEncryption\n\nMost implementations of RSA use the Chinese remainder theorem during signing of HTTPS certificates and during decryption.\n\nThe Chinese remainder theorem can also be used in secret sharing, which consists of distributing a set of shares among a group of people who, all together (but no one alone), can recover a certain secret from the given set of shares. Each of the shares is represented in a congruence, and the solution of the system of congruences using the Chinese remainder theorem is the secret to be recovered. Secret sharing using the Chinese remainder theorem uses, along with the Chinese remainder theorem, special sequences of integers that guarantee the impossibility of recovering the secret from a set of shares with less than a certain cardinality.\n\nRange ambiguity resolution \n\nThe range ambiguity resolution techniques used with medium pulse repetition frequency radar can be seen as a special case of the Chinese remainder theorem.\n\nDedekind's theorem\n\nDedekind's theorem on the linear independence of characters. Let  be a monoid and  an integral domain, viewed as a monoid by considering the multiplication on . Then any finite family  of distinct monoid homomorphisms  is linearly independent. In other words, every family  of elements  satisfying \n\\sum_{i \\in I}\\alpha_i f_i = 0\n\nmust be equal to the family .\n\nProof. First assume that  is a field, otherwise, replace the integral domain  by its quotient field, and nothing will change. We can linearly extend the monoid homomorphisms  to -algebra homomorphisms , where  is the monoid ring of  over . Then, by linearity, the condition\n\\sum_{i\\in I}\\alpha_i f_i = 0,\n\nyields\n\\sum_{i \\in I}\\alpha_i F_i = 0.\n\nNext, for  the two -linear maps  and  are not proportional to each other. Otherwise  and  would also be proportional, and thus equal since as monoid homomorphisms they satisfy: , which contradicts the assumption that they are distinct.\n\nTherefore, the kernels  and  are distinct. Since  is a field,  is a maximal ideal of  for every . Because they are distinct and maximal the ideals  and  are coprime whenever . The Chinese Remainder Theorem (for general rings) yields an isomorphism:\n\\begin{align}\n  \\phi: k[M] / K &\\to \\prod_{i \\in I}k[M] / \\mathrm{Ker} F_i \\\\\n     \\phi(x + K) &= \\left(x + \\mathrm{Ker} F_i\\right)_{i \\in I}\n\\end{align}\n\nwhere\nK \\prod_{i \\in I}\\mathrm{Ker} F_i \n \\bigcap_{i \\in I}\\mathrm{Ker} F_i.\n\nConsequently, the map\n\\begin{align}\n  \\Phi: k[M] &\\to \\prod_{i \\in I}k[M]/ \\mathrm{Ker} F_i \\\\\n     \\Phi(x) &= \\left(x + \\mathrm{Ker} F_i\\right)_{i \\in I}\n\\end{align}\n\nis surjective. Under the isomorphisms  the map  corresponds to:\n\\begin{align}\n  \\psi: k[M] &\\to \\prod_{i \\in I}k \\\\\n     \\psi(x) &= \\left[F_i(x)\\right]_{i \\in I}\n\\end{align}\n\nNow,\n\\sum_{i \\in I}\\alpha_i F_i = 0\n\nyields\n\\sum_{i \\in I}\\alpha_i u_i = 0\n\nfor every vector  in the image of the map . Since  is surjective, this means that\n\\sum_{i \\in I}\\alpha_i u_i = 0\n\nfor every vector\n\\left(u_i\\right)_{i \\in I} \\in \\prod_{i \\in I}k.\n\nConsequently, . QED.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Chinese remainder theorem" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=7713" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The Chinese remainder theorem is a theorem of number theory, which states that if one knows the remainders of the Euclidean division of an integer  by several integers, then one can determine uniquely the remainder of the division of  by the product of these integers, under the condition that the divisors are pairwise coprime.\n\nThe theorem was first discovered in the 3rd century AD by the Chinese mathematician Sunzi in Sunzi Suanjing.\n\nThe Chinese remainder theorem is widely used for computing with large integers, as it allows replacing a computation for which one knows a bound on the size of the result by several similar computations on small integers.\n\nThe Chinese remainder theorem (expressed in terms of congruences) is true over every principal ideal domain. It has been generalized to any commutative ring, with a formulation involving ideals.\n\nHistory\n\nThe earliest known statement of the theorem, as a problem with specific numbers, appears in the 3rd-century book Sunzi Suanjing by the Chinese mathematician Sunzi:\n\nSunzi's work contains neither a proof nor a full algorithm. What amounts to an algorithm for solving this problem was described by Aryabhata (6th century). Special cases of the Chinese remainder theorem were also known to Brahmagupta (7th century), and appear in Fibonacci's Liber Abaci (1202). The result was later generalized with a complete solution called Dayanshu () in Qin Jiushao's 1247 Mathematical Treatise in Nine Sections (, Shushu Jiuzhang).\n\nThe notion of congruences was first introduced and used by Gauss in his Disquisitiones Arithmeticae of 1801. Gauss illustrates the Chinese remainder theorem on a problem involving calendars, namely, \"to find the years that have a certain period number with respect to the solar and lunar cycle and the Roman indiction.\" Gauss introduces a procedure for solving the problem that had already been used by Euler but was in fact an ancient method that had appeared several times.\n\nTheorem statement \n\nLet  be integers greater than 1, which are often called moduli or divisors. Let us denote by  the product of the .\n\nThe Chinese remainder theorem asserts that if the  are pairwise coprime, and if  are integers such that  for every , then there is one and only one integer , such that  and the remainder of the Euclidean division of  by  is  for every .\n\nThis may be restated as follows in term of congruences:\nIf the  are pairwise coprime, and if  are any integers, then there exists an integer  such that\n\\begin{align} x \\equiv a_1 & \\pmod{n_1} \\\\ \\quad \\vdots \\\\ x \\equiv a_k &\\pmod{n_k} \\end{align},\nand any two such  are congruent modulo .\n\nIn abstract algebra, the theorem is often restated as: if the  are pairwise coprime, the map\nx \\operatorname{mod} N \\quad\\mapsto\\quad (x\\operatorname{mod}n_1, \\ldots, x\\operatorname{mod} n_k)\ndefines a ring isomorphism\n\n\\Bbb{Z}/N\\Bbb{Z} \\cong \\Bbb{Z}/n_1\\Bbb{Z} \\times \\cdots \\times \\Bbb{Z}/n_k\\Bbb{Z}\nbetween the ring of integers modulo  and the direct product of the rings of integers modulo the . This means that for doing a sequence of arithmetic operations in \\Bbb{Z}/N\\Bbb{Z}, one may do the same computation independently in each \\Bbb{Z}/n_i\\Bbb{Z} and then get the result by applying the isomorphism (from the right to the left). This may be much faster than the direct computation if  and the number of operations are large. This is widely used, under the name multi-modular computation, for linear algebra over the integers or the rational numbers.\n\nThe theorem can also be restated in the language of combinatorics as the fact that the infinite arithmetic progressions of integers form a Helly family.\n\nProof\n\nThe existence and the uniqueness of the solution may be proven independently. However, the first proof of existence, given below, uses this uniqueness.\n\nUniqueness\n\nSuppose that  and  are both solutions to all the congruences. As  and  give the same remainder, when divided by , their difference  is a multiple of each . As the  are pairwise coprime, their product  divides also , and thus  and  are congruent modulo . If  and   are supposed to be non negative and less than  (as in the first statement of the theorem), then their difference may be a multiple of  only if .\n\nExistence (first proof)\n\nThe map\nx \\mapsto (x \\operatorname{mod} n_1, \\ldots, x\\operatorname{mod} n_k)\nmaps congruence classes modulo  to sequences of congruence classes modulo . The proof of uniqueness shows that this map is injective. As the domain and the codomain of this map have the same number of elements, the map is also surjective, which proves the existence of the solution.\n\nThis proof is very simple but does not provide any direct way for computing a solution. Moreover, it cannot be generalized to other situations where the following proof can.\n\nExistence (constructive proof)\n\nExistence may be established by an explicit construction of . This construction may be split into two steps, firstly by solving the problem in the case of two moduli, and the second one by extending this solution to the general case by induction on the number of moduli.\n\nCase of two moduli\n\nWe want to solve the system\n\\begin{align}\nx &\\equiv a_1 \\pmod {n_1}\\\\\nx &\\equiv a_2 \\pmod {n_2},\n\\end{align}\nwhere n_1 and n_2 are coprime.\n\nBézout's identity asserts the existence of two integers m_1 and m_2 such that \nm_1n_1+m_2n_2=1.\nThe integers m_1 and m_2 may be computed by Extended Euclidean algorithm.\n\nA solution is given by\nx = a_1m_2n_2+a_2m_1n_1.\nIndeed, \n\\begin{align}\nx&=a_1m_2n_2+a_2m_1n_1\\\\\n&=a_1(1 - m_1n_1) + a_2m_1n_1 \\\\\n&=a_1 + (a_2 - a_1)m_1n_1,\n\\end{align}\nimplying that x \\equiv a_1 \\pmod {n_1}. The second congruence is proved similarly.\n\nGeneral case\n\nLet us consider a sequence of congruence equations\n\\begin{align} x \\equiv a_1 & \\pmod{n_1} \\\\ \\quad \\vdots \\\\ x \\equiv a_k &\\pmod{n_k} \\end{align},\nwhere the n_i are pairwise coprime. The two first equations have a solution a_{1,2} provided by the method of the previous section. The set of the solutions of these two first equations is the set of all solutions of the equation\nx \\equiv a_{1,2} \\pmod{n_1n_2}.\n\nAs the other n_i are coprime with n_1n_2, this reduces solving the initial problem of  equations to a similar problem with k-1 equations. Iterating the process, one gets eventually the solutions of the initial problem.\n\nExistence (direct construction)\n\nFor constructing a solution, it is not necessary to make an induction on the number of moduli. However, such a direct construction involves more computation with large numbers, which makes it less efficient and less used. Nevertheless, Lagrange interpolation is a special case of this construction, applied to polynomials instead of integers.\n\nLet N_i = N/n_i be the product of all moduli but one. As the n_i are pairwise coprime, N_i and n_i are coprime. Thus Bézout's identity applies, and there exist integers M_i and m_i such that\nM_iN_i + m_in_i=1.\n\nA solution of the system of congruences is\nx\\sum_{i\n1}^k a_iM_iN_i.\nIn fact, as N_j is a multiple of n_i for i\\neq j,\nwe have\nx \\equiv a_iM_iN_i \\equiv a_i(1-m_in_i) \\equiv a_i \\pmod{n_i}, \nfor every i.\n\nComputation \n\nLet us consider a system of congruences\n\\begin{align} x \\equiv a_1 & \\pmod{n_1} \\\\ \\quad \\vdots \\\\ x \\equiv a_k &\\pmod{n_k}, \\end{align}\nwhere the n_i are pairwise coprime, and let N=n_1 n_2\\cdots n_k. In this section several methods are described for computing the unique solution for x, such that 0\\le x and these methods are applied on the example\n\n\\begin{align}\n x &\\equiv 0 \\pmod{3} \\\\\n x &\\equiv 3 \\pmod{4} \\\\\n x &\\equiv 4 \\pmod{5}.\n\\end{align}\n\nSystematic search\n\nIt is easy to check whether a value of  is a solution: it suffices to compute the remainder of the Euclidean division of  by each . Thus, to find the solution, it suffices to check successively the integers from  to  until finding the solution.\n\nAlthough very simple this method is very inefficient: for the simple example considered here,  integers (including ) have to be checked for finding the solution . This is an exponential time algorithm, as the size of the input is, up to a constant factor, the number of digits of , and the average number of operations is of the order of .\n\nTherefore, this method is rarely used, for hand-written computation as well on computers.\n\nSearch by sieving\n\nThe search of the solution may be made dramatically faster by sieving. For this method, we suppose, without loss of generality, that 0\\le a_i  (if it were not the case, it would suffice to replace each a_i by the remainder of its division by n_i). This implies that the solution belongs to the arithmetic progression\na_1, a_1 + n_1, a_1+2n_1, \\ldots\nBy testing the values of these numbers modulo n_2, one eventually finds a solution x_2 of the two first congruences. Then the solution belongs to the arithmetic progression \nx_2, x_2 + n_1n_2, x_2+2n_1n_2, \\ldots\nTesting the values of these numbers modulo n_3,, and continuing until every modulus has been tested gives eventually the solution.\n\nThis method is faster if the moduli have been ordered by decreasing value, that is if n_1>n_2> \\cdots > n_k. For the example, this gives the following computation. We consider first the numbers that are congruent to 4 modulo 5 (the largest modulus), which are 4, , , ... For each of them, compute the remainder by 4 (the second largest modulus) until getting a number congruent to 3 modulo 4. Then one can proceed  by adding  at each step, and computing only the remainders by 3. This gives\n4 mod 4 → 0. Continue\n4 + 5 = 9 mod 4 →1.  Continue\n9 + 5 = 14 mod 4 → 2. Continue\n14 + 5 19 mod 4 → 3. OK, continue by considering remainders modulo 3 and adding 5×4 \n 20 each time\n19 mod 3 → 1. Continue\n19 + 20 = 39 mod 3 → 0. OK, this is the result.\n\nThis method works well for hand-written computation with a product of moduli that is not too big. However, it is much slower than other methods, for very large products of moduli. Although dramatically faster than the systematic search, this method also has an exponential time complexity and is therefore not used on computers.\n\nUsing the existence construction \n\nThe constructive existence proof shows that, in the case of two moduli, the solution may be obtained by the computation of the Bézout coefficients of the moduli, followed by a few multiplications, additions and reductions modulo n_1n_2 (for getting a result in the interval (0, n_1n_2-1)). As the Bézout's coefficients may be computed with the extended Euclidean algorithm, the whole computation, at most, has a quadratic time complexity of O((s_1+s_2)^2), where s_i denotes the number of digits of n_i.\n\nFor more than two moduli, the method for two moduli allows the replacement of any two congruences by a single congruence modulo the product of the moduli. Iterating this process provides eventually the solution with a complexity, which is quadratic in the number of digits of the product of all moduli. This quadratic time complexity does not depend on the order in which the moduli are regrouped. One may regroup the two first moduli, then regroup the resulting modulus with the next one, and so on. This strategy is the easiest to implement, but it also requires more computation involving large numbers.\n\nAnother strategy consists in partitioning the moduli in pairs whose product have comparable sizes (as much as possible), applying, in parallel, the method of two moduli to each pair, and iterating with a number of moduli approximatively divided by two. This method allows an easy parallelization of the algorithm. Also, if fast algorithms (that is algorithms working in quasilinear time) are used for the basic operations, this method provides an algorithm for the whole computation that works in quasilinear time.\n\nOn the current example (which has only three moduli), both strategies are identical and work as follows.\n\nBézout's identity for 3 and 4 is\n1\\times 4 + (-1)\\times 3 = 1.\nPutting this in the formula given for proving the existence gives \n0\\times 4 + (-3)\\times 3 =-9\nfor a solution of the two first congruences, the other solutions being obtained by adding to −9 any multiple of . One may continue with any of these solutions, but the solution  is smaller (in absolute value) and thus leads probably to an easier computation\n\nBézout identity for 5 and 3×4 = 12 is\n5\\times 5 +(-2)\\times 12 =1.\nApplying the same formula again, we get a solution of the problem:\n25\\times 3 -24\\times 4 = -21.\nThe other solutions are obtained by adding any multiple of , and the smallest positive solution is .\n\nAs a linear Diophantine system\n\nThe system of congruences solved by the Chinese remainder theorem may be rewritten as a system of simultaneous linear Diophantine equations\n\\begin{align} \nx &= a_1 +x_1n_1\\\\ \n\\quad \\vdots \\\\ \nx &=a_k+x_kn_k, \n\\end{align}\nwhere the unknown integers are x and the x_i. Therefore, every general method for solving such systems may be used for finding the solution of Chinese remainder theorem, such as the reduction of the matrix of the system to Smith normal form or Hermite normal form. However, as usual when using a general algorithm for a more specific problem, this approach is less efficient than the method of the preceding section, based on a direct use of Bézout's identity.\n\nOver principal ideal domains \n\nIn , the Chinese remainder theorem has been stated in three different ways: in terms of remainders, of congruences, and of a ring isomorphism. The statement in terms of remainders does not apply, in general, to principal ideal domains, as remainders are not defined in such rings. However, the two other versions make sense over a principal ideal domain : it suffices to replace \"integer\" by \"element of the domain\" and \\Bbb Z by  . These two versions of the theorem are true in this context, because the proofs (except for the first existence proof), are based on Euclid's lemma and Bézout's identity, which are true over every principal domain.\n\nHowever, in general, the theorem is only an existence theorem and does not provide any way for computing the solution, unless one has an algorithm for computing the coefficients of Bézout's identity.\n\nOver univariate polynomial rings and Euclidean domains\n\nThe statement in terms of remainders given in  cannot be generalized to any principal ideal domain, but its generalization to Euclidean domains is straightforward. The univariate polynomials over a field is the typical example of a Euclidean domain, which is not the integers. Therefore, we state the theorem for the case of a ring of univariate domain R=K[X] over a field K. For getting the theorem for a general Euclidean domain, it suffices to replace the degree by the Euclidean function of the Euclidean domain.\n\nThe Chinese remainder theorem for polynomials is thus: Let P_i(X) (the moduli) be,  for , pairwise coprime polynomials in RK[X]. Let d_i \n\\deg P_i be the degree of P_i(X), and D be the sum of the d_i.\nIf A_i(X), \\ldots,A_k(X) are polynomials such that A_i(X)=0 or \\deg A_i for every , then, there is one and only one polynomial P(X), such that \\deg P and the remainder of the Euclidean division of P(X) by P_i(X) isA_i(X) for every .\n\nThe construction of the solution may be done as in  or . However, the latter construction may be simplified by using, as follows, partial fraction decomposition instead of extended Euclidean algorithm.\n\nThus, we want to find a polynomial P(X), which satisfies the congruences\nP(X)\\equiv A_i(X) \\pmod {P_i(X)},\nfor i=1,\\ldots,k.\n\nLet us consider the polynomials\n\\begin{align}\n    Q(X) &\\prod_{i\n1}^{k}P_i(X) \\\\\n  Q_i(X) &= \\frac{Q(X)}{P_i(X)}.\n\\end{align}\n\nThe partial fraction decomposition of 1/Q(X) gives  polynomials S_i(X) with degrees \\deg S_i(X)  such that\n\\frac{1}{Q(X)} \\sum_{i\n1}^k \\frac{S_i(X)}{P_i(X)},\nand thus\n1 \\sum_{i\n1}^{k}S_i(X) Q_i(X).\n\nThen a solution of the simultaneous congruence system is given by the polynomial\n\\sum_{i=1}^k A_i(X) S_i(X) Q_i(X).\n\nIn fact, we have\n\\sum_{i1}^k A_i(X) S_i(X) Q_i(X)\n A_i(X)+ \\sum_{j=1}^{k}(A_j(X) - A_i(X)) S_j(X) Q_j(X) \\equiv A_i(X)\\pmod{P_i(X)},\nfor 1 \\leq i \\leq k.\n\nThis solution may have a degree larger that D\\sum_{i\n1}^k d_i. The unique solution of degree less than D may be deduced by considering the remainder B_i(X) of the Euclidean division of A_i(X)S_i(X) by P_i(X). This solution is \nP(X)\\sum_{i\n1}^k B_i(X) Q_i(X).\n\nLagrange interpolation\n\nA special case of Chinese remainder theorem for polynomials is Lagrange interpolation. For this, let us consider  monic polynomials of degree one:\n\nP_i(X)=X-x_i.\n\nThey are pairwise coprime if the x_i are all different. The remainder of the division by P_i(X) of a polynomial P(X) is P(x_i).\n\nNow, let A_1, \\ldots, A_k be constants (polynomials of degree 0) in K. Both Lagrange interpolation and Chinese remainder theorem assert the existence of a unique polynomial P(X), of degree less than k such that\n\nP(x_i)=A_i,\n\nfor every i.\n\nLagrange interpolation formula is exactly the result, in this case, of the above construction of the solution. More precisely, let \n\n\\begin{align}\n  Q(X)  &\\prod_{i\n1}^{k}(X-x_i) \\\\[6pt]\n Q_i(X) &= \\frac{Q(X)}{X-x_i}.\n\\end{align}\n\nThe partial fraction decomposition of \\tfrac{1}{Q(X)} is \n\n\\frac{1}{Q(X)} \\sum_{i\n1}^k \\frac{1}{Q_i(x_i)(X-X_i)}.\n\nIn fact, reducing the right-hand side to a common denominator one gets \n\n \\sum_{i1}^k \\frac{1}{Q_i(x_i)(X-X_i)}\n \\frac{1}{Q(X)} \\sum_{i=1}^k \\frac{Q_i(X)}{Q_i(x_i)},\n\nand the numerator is equal to one, as being a polynomial of degree less than k, which takes the value one for k different values of X.\n\nUsing the above general formula, we get the Lagrange interpolation formula:\n\nP(X)\\sum_{i\n1}^k A_i\\frac{Q_i(X)}{Q_i(x_i)}.\n\nHermite interpolation\n\nHermite interpolation is an application of Chinese remainder theorem for univariate polynomials, which may involve moduli of arbitrary degrees (Lagrange interpolation involves only moduli of degree one).\n\nThe problem consists of finding a polynomial of the least possible degree, such that the polynomial and its first derivatives take given values at some fixed points.\n\nMore precisely, let x_1, \\ldots, x_k be k elements of the ground field K, and, for i1,\\ldots, k, let a_{i,0}, a_{i,1}, \\ldots, a_{i,r_i-1} be the values of the first r_i derivatives of the sought polynomial at x_i (including the 0th derivative, which is the value of the polynomial itself). The problem is to find a polynomial P(X) such that its jth derivative takes the value a_{i,j}  at x_i, for i\n1,\\ldots,k and j=0,\\ldots,r_j.\n\nLet us consider the polynomial\nP_i(X) \\sum_{j\n0}^{r_i - 1}\\frac{a_{i,j}}{j!}(X - x_i)^j.\nThis is the Taylor polynomial   of order r_i-1 at x_i, of the unknown polynomial P(X). Therefore, we must have\nP(X)\\equiv P_i(X) \\pmod {(X-x_i)^{r_i}}.\n\nConversely, any polynomial P(X)  that satisfies these k congruences, in particular verifies, for any i=1, \\ldots, k\nP(X)= P_i(X) +o(X-x_i)^{r_i-1}  \ntherefore P_i(X) is its Taylor polynomial of order  r_i - 1 at x_i, that is, P(X) solves the initial Hermite interpolation problem.\nThe Chinese remainder theorem asserts that there exists exactly one polynomial of degree less than the sum of the r_i, which satisfies these k congruences.\n\nThere are several ways for computing the solution P(X). One may use the method described at the beginning of . One may also use the constructions given in  or .\n\nGeneralization to arbitrary rings \n\nThe Chinese remainder theorem can be generalized to any ring, by using coprime ideals (also called comaximal ideals). Two ideals  and  are coprime if there are elements i\\in I and j\\in J such that i+j=1. This relation plays the role of Bézout's identity in the proofs related to this generalization, which, otherwise are very similar. The generalization may be stated as follows.\n\nLet  be two-sided ideals of a ring R that are pairwise coprime,  and  be their intersection. Then we have the isomorphism \n\\begin{align}\n    R/I &\\to R/I_1 \\times \\cdots \\times R/I_k \\\\\n  x \\operatorname{mod} I &\\mapsto (x \\operatorname{mod} I_1, \\cdots, x\\operatorname{mod} I_k),\n\\end{align}\nbetween the quotient ring R/I and the direct product of the R/I_i,\nwhere \"x \\operatorname{mod} I\" denotes the image of the element x in the quotient ring defined by the ideal I.\nMoreover, if R is commutative, then the ideal intersection  is equal to the product of the ideals I_i:\nII_1\\cap I_2 \\cap\\ldots\\cap I_k\n I_1I_2\\cdots I_k\n\nApplications \n\nSequence numbering\n\nThe Chinese remainder theorem has been used to construct a Gödel numbering for sequences, which is involved in the proof of Gödel's incompleteness theorems.\n\nFast Fourier transform\n\nThe prime-factor FFT algorithm (also called Good-Thomas algorithm) uses the Chinese remainder theorem for reducing the computation of a fast Fourier transform of size n_1n_2 to the computation of two fast Fourier transforms of smaller sizes n_1 and n_2 (providing that n_1 and n_2 are coprime).\n\nEncryption\n\nMost implementations of RSA use the Chinese remainder theorem during signing of HTTPS certificates and during decryption.\n\nThe Chinese remainder theorem can also be used in secret sharing, which consists of distributing a set of shares among a group of people who, all together (but no one alone), can recover a certain secret from the given set of shares. Each of the shares is represented in a congruence, and the solution of the system of congruences using the Chinese remainder theorem is the secret to be recovered. Secret sharing using the Chinese remainder theorem uses, along with the Chinese remainder theorem, special sequences of integers that guarantee the impossibility of recovering the secret from a set of shares with less than a certain cardinality.\n\nRange ambiguity resolution \n\nThe range ambiguity resolution techniques used with medium pulse repetition frequency radar can be seen as a special case of the Chinese remainder theorem.\n\nDedekind's theorem\n\nDedekind's theorem on the linear independence of characters. Let  be a monoid and  an integral domain, viewed as a monoid by considering the multiplication on . Then any finite family  of distinct monoid homomorphisms  is linearly independent. In other words, every family  of elements  satisfying \n\\sum_{i \\in I}\\alpha_i f_i = 0\n\nmust be equal to the family .\n\nProof. First assume that  is a field, otherwise, replace the integral domain  by its quotient field, and nothing will change. We can linearly extend the monoid homomorphisms  to -algebra homomorphisms , where  is the monoid ring of  over . Then, by linearity, the condition\n\\sum_{i\\in I}\\alpha_i f_i = 0,\n\nyields\n\\sum_{i \\in I}\\alpha_i F_i = 0.\n\nNext, for  the two -linear maps  and  are not proportional to each other. Otherwise  and  would also be proportional, and thus equal since as monoid homomorphisms they satisfy: , which contradicts the assumption that they are distinct.\n\nTherefore, the kernels  and  are distinct. Since  is a field,  is a maximal ideal of  for every . Because they are distinct and maximal the ideals  and  are coprime whenever . The Chinese Remainder Theorem (for general rings) yields an isomorphism:\n\\begin{align}\n  \\phi: k[M] / K &\\to \\prod_{i \\in I}k[M] / \\mathrm{Ker} F_i \\\\\n     \\phi(x + K) &= \\left(x + \\mathrm{Ker} F_i\\right)_{i \\in I}\n\\end{align}\n\nwhere\nK \\prod_{i \\in I}\\mathrm{Ker} F_i \n \\bigcap_{i \\in I}\\mathrm{Ker} F_i.\n\nConsequently, the map\n\\begin{align}\n  \\Phi: k[M] &\\to \\prod_{i \\in I}k[M]/ \\mathrm{Ker} F_i \\\\\n     \\Phi(x) &= \\left(x + \\mathrm{Ker} F_i\\right)_{i \\in I}\n\\end{align}\n\nis surjective. Under the isomorphisms  the map  corresponds to:\n\\begin{align}\n  \\psi: k[M] &\\to \\prod_{i \\in I}k \\\\\n     \\psi(x) &= \\left[F_i(x)\\right]_{i \\in I}\n\\end{align}\n\nNow,\n\\sum_{i \\in I}\\alpha_i F_i = 0\n\nyields\n\\sum_{i \\in I}\\alpha_i u_i = 0\n\nfor every vector  in the image of the map . Since  is surjective, this means that\n\\sum_{i \\in I}\\alpha_i u_i = 0\n\nfor every vector\n\\left(u_i\\right)_{i \\in I} \\in \\prod_{i \\in I}k.\n\nConsequently, . QED. Chinese remainder theorem. http://en.wikipedia.org/?curid=7713."
  }
}
