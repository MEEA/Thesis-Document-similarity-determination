{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=20036",
  "eid" : "3f6eea50-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778615669,
  "textBody" : "A metasyntactic variable is a specific word or set of words identified as a placeholder in computer science and specifically computer programming. These words are commonly found in source code and are intended to be modified or substituted to be applicable to the specific usage before compilation (translation to an executable). The words foo and bar are good examples as they are used in over 330 Internet Engineering Task Force Requests for Comments, which are documents explaining foundational internet technologies like HTTP (websites), TCP/IP, and email protocols.[https://www.ietf.org/rfc/rfc3092.txt RFC 3092 (rfc3092) - Etymology of \"Foo\"][http://www.rfc-editor.org/download.html RFC-Editor.org]\n\nBy mathematical analogy, a metasyntactic variable is a word that is a variable for other words, just as in algebra letters are used as variables for numbers.\n\nMetasyntactic variables are used to name entities such as variables, functions, and commands whose exact identity is unimportant and serve only to demonstrate a concept, which is useful for teaching programming.\n\nCommon metasyntactic variables\n\nDue to English being the foundation-language, or lingua franca, of most computer programming languages these variables are commonly seen even in programs and examples of programs written for other spoken-language audiences.\n\nThe typical names may depend however on the subculture that has developed around a given programming language.\n\nGeneral usage\n\nMetasyntactic variables used commonly across all programming languages: foobar, foo, bar, baz, qux, quux, quuz, corge, grault, garply, waldo, fred, plugh, xyzzy, and thud.quuz. Retrieved November 18, 2016, from [https://www.progclub.org/pipermail/programming/2016-November/002305.html programming@ProgClub] Wibble, wobble, wubble, and flob are used in the UK.wibble. (n.d.). Jargon File 4.4.7. Retrieved February 23, 2010, from [http://catb.org/jargon/html/W/wibble.html] And there are a reported blep, blah, and boop from Australia.blep. Retrieved November 18, 2016, from [https://www.progclub.org/pipermail/programming/2016-November/002301.html programming@ProgClub]blah, boop. Retrieved November 19, 2016, from [https://www.progclub.org/pipermail/programming/2016-November/002309.html programming@ProgClub]\n\nA complete reference can be found in a MIT Press book titled: The Hacker's Dictionary.\n\nPython\n\nspam, ham, and eggs are the principal metasyntactic variables used in the Python programming language.[https://docs.python.org/tut/ Python Tutorial] This is a reference to the comedy sketch Spam by Monty Python, the eponym of the language.[https://www.python.org/doc/faq/general/#why-is-it-called-python General Python FAQ]\n\nR\n\nThe R programming language often adds norf to the list.http://use-r.com/coursera-r-programming-week-2/\n\nJapanese\n\nIn Japanese, the words hoge (ほげ)http://ejje.weblio.jp/content/hoge and piyo (ぴよ) are commonly used, with other common words and variants being fuga (ふが), hogera (ほげら), and hogehoge (ほげほげ).メタ構文変数  Note that -ra is a pluralizing ending in Japanese, and reduplication is also used for pluralizing. The origin of hoge as a metasyntactic variable is not known, but it is believed to date to the early 1980s.\n\nUsage examples \n \n\nC\n\nIn the following example the function name foo and the variable name bar are both metasyntactic variables. Lines beginning with // are comments.\n\n// The function named foo\nint foo(void)\n{\n   // Declare the variable bar and set the value to 1\n   int bar = 1;\n\n   return bar;\n}\n\nPython\n\nSpam, ham, and eggs are the principal metasyntactic variables used in the Python programming language.[http://docs.python.org/tut/ Python Tutorial] This is a reference to the famous comedy sketch, \"Spam\", by Monty Python, the eponym of the language.[http://www.python.org/doc/faq/general/#why-is-it-called-python General Python FAQ]\nIn the following example spam, ham, and eggs are metasyntactic variables and lines beginning with # are comments.\n\n# Define a function named spam\ndef spam():\n\n    # Define the variable ham\n    ham = \"Hello World!\"\n\n    # Define the variable eggs\n    eggs = 1\n\n    return\n\nRuby\n\nIn the following example the baz, foo, and bar are metasyntactic variables and lines beginning with # are comments.\n# Declare the variable foo and set equal to 1\nfoo = 1\n\n# Declare the variable bar and set equal to 2\nbar = 2\n\n# Declare the method (function) named baz, which prints the text 'Hello world'\ndef baz\n   puts 'Hello world'\nend \n\nIETF Requests for Comments\n\nBoth the IETF RFCs and computer programming languages are rendered in plain text, making it necessary to distinguish metasyntactic variables by a naming convention, since it would not be obvious from context. \n\nPlain text example:\n\nRFC 772 (cited in RFC 3092) contains for instance:\n  All is well; now the recipients can be specified.\n \n      S: MRCP TO: \n      R: 200 OK\n \n      S: MRCP TO: \n      R: 553  No such user here\n \n      S: MRCP TO: \n      R: 200 OK\n \n      S: MRCP TO: \n      R: 200 OK\n \n   Note that the failure of \"Raboof\" has no effect on the storage of\n   mail for \"Foo\", \"bar\" or the mail to be forwarded to \"fubar@Z\"\n   through host \"X\".\n\n(The documentation for texinfo emphasizes the distinction between metavariables and mere variables used in a programming language being documented in some texinfo file as: \"Use the @var command to indicate metasyntactic variables. A metasyntactic variable is something that stands for another piece of text. For example, you should use a metasyntactic variable in the documentation of a function to describe the arguments that are passed to that function. Do not use @var for the names of particular variables in programming languages. These are specific names from a program, so @code is correct for them.\")\n\nAnother point reflected in the above example is the convention that a metavariable is to be uniformly substituted with the same instance in all its appearances in a given schema. This is in contrast with nonterminal symbols in formal grammars where the nonterminals on the right of a production can be substituted by different instances.\n\nTeaching concepts\n\nThis section includes bits of code which show how metasyntactic variables are used in teaching computer programming concepts.\n\nC++\n\nFunction prototypes with  different argument passing mechanisms:\n\nvoid foo(Fruit bar);\nvoid foo(Fruit* bar);\nvoid foo(Fruit& bar);\n\nExample showing the function overloading capabilities of the C++ language\n\nvoid foo(int bar);\nvoid foo(int bar, int baz);\nvoid foo(int bar, int baz, int qux);",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Metasyntactic variable" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=20036" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "A metasyntactic variable is a specific word or set of words identified as a placeholder in computer science and specifically computer programming. These words are commonly found in source code and are intended to be modified or substituted to be applicable to the specific usage before compilation (translation to an executable). The words foo and bar are good examples as they are used in over 330 Internet Engineering Task Force Requests for Comments, which are documents explaining foundational internet technologies like HTTP (websites), TCP/IP, and email protocols.[https://www.ietf.org/rfc/rfc3092.txt RFC 3092 (rfc3092) - Etymology of \"Foo\"][http://www.rfc-editor.org/download.html RFC-Editor.org]\n\nBy mathematical analogy, a metasyntactic variable is a word that is a variable for other words, just as in algebra letters are used as variables for numbers.\n\nMetasyntactic variables are used to name entities such as variables, functions, and commands whose exact identity is unimportant and serve only to demonstrate a concept, which is useful for teaching programming.\n\nCommon metasyntactic variables\n\nDue to English being the foundation-language, or lingua franca, of most computer programming languages these variables are commonly seen even in programs and examples of programs written for other spoken-language audiences.\n\nThe typical names may depend however on the subculture that has developed around a given programming language.\n\nGeneral usage\n\nMetasyntactic variables used commonly across all programming languages: foobar, foo, bar, baz, qux, quux, quuz, corge, grault, garply, waldo, fred, plugh, xyzzy, and thud.quuz. Retrieved November 18, 2016, from [https://www.progclub.org/pipermail/programming/2016-November/002305.html programming@ProgClub] Wibble, wobble, wubble, and flob are used in the UK.wibble. (n.d.). Jargon File 4.4.7. Retrieved February 23, 2010, from [http://catb.org/jargon/html/W/wibble.html] And there are a reported blep, blah, and boop from Australia.blep. Retrieved November 18, 2016, from [https://www.progclub.org/pipermail/programming/2016-November/002301.html programming@ProgClub]blah, boop. Retrieved November 19, 2016, from [https://www.progclub.org/pipermail/programming/2016-November/002309.html programming@ProgClub]\n\nA complete reference can be found in a MIT Press book titled: The Hacker's Dictionary.\n\nPython\n\nspam, ham, and eggs are the principal metasyntactic variables used in the Python programming language.[https://docs.python.org/tut/ Python Tutorial] This is a reference to the comedy sketch Spam by Monty Python, the eponym of the language.[https://www.python.org/doc/faq/general/#why-is-it-called-python General Python FAQ]\n\nR\n\nThe R programming language often adds norf to the list.http://use-r.com/coursera-r-programming-week-2/\n\nJapanese\n\nIn Japanese, the words hoge (ほげ)http://ejje.weblio.jp/content/hoge and piyo (ぴよ) are commonly used, with other common words and variants being fuga (ふが), hogera (ほげら), and hogehoge (ほげほげ).メタ構文変数  Note that -ra is a pluralizing ending in Japanese, and reduplication is also used for pluralizing. The origin of hoge as a metasyntactic variable is not known, but it is believed to date to the early 1980s.\n\nUsage examples \n \n\nC\n\nIn the following example the function name foo and the variable name bar are both metasyntactic variables. Lines beginning with // are comments.\n\n// The function named foo\nint foo(void)\n{\n   // Declare the variable bar and set the value to 1\n   int bar = 1;\n\n   return bar;\n}\n\nPython\n\nSpam, ham, and eggs are the principal metasyntactic variables used in the Python programming language.[http://docs.python.org/tut/ Python Tutorial] This is a reference to the famous comedy sketch, \"Spam\", by Monty Python, the eponym of the language.[http://www.python.org/doc/faq/general/#why-is-it-called-python General Python FAQ]\nIn the following example spam, ham, and eggs are metasyntactic variables and lines beginning with # are comments.\n\n# Define a function named spam\ndef spam():\n\n    # Define the variable ham\n    ham = \"Hello World!\"\n\n    # Define the variable eggs\n    eggs = 1\n\n    return\n\nRuby\n\nIn the following example the baz, foo, and bar are metasyntactic variables and lines beginning with # are comments.\n# Declare the variable foo and set equal to 1\nfoo = 1\n\n# Declare the variable bar and set equal to 2\nbar = 2\n\n# Declare the method (function) named baz, which prints the text 'Hello world'\ndef baz\n   puts 'Hello world'\nend \n\nIETF Requests for Comments\n\nBoth the IETF RFCs and computer programming languages are rendered in plain text, making it necessary to distinguish metasyntactic variables by a naming convention, since it would not be obvious from context. \n\nPlain text example:\n\nRFC 772 (cited in RFC 3092) contains for instance:\n  All is well; now the recipients can be specified.\n \n      S: MRCP TO: \n      R: 200 OK\n \n      S: MRCP TO: \n      R: 553  No such user here\n \n      S: MRCP TO: \n      R: 200 OK\n \n      S: MRCP TO: \n      R: 200 OK\n \n   Note that the failure of \"Raboof\" has no effect on the storage of\n   mail for \"Foo\", \"bar\" or the mail to be forwarded to \"fubar@Z\"\n   through host \"X\".\n\n(The documentation for texinfo emphasizes the distinction between metavariables and mere variables used in a programming language being documented in some texinfo file as: \"Use the @var command to indicate metasyntactic variables. A metasyntactic variable is something that stands for another piece of text. For example, you should use a metasyntactic variable in the documentation of a function to describe the arguments that are passed to that function. Do not use @var for the names of particular variables in programming languages. These are specific names from a program, so @code is correct for them.\")\n\nAnother point reflected in the above example is the convention that a metavariable is to be uniformly substituted with the same instance in all its appearances in a given schema. This is in contrast with nonterminal symbols in formal grammars where the nonterminals on the right of a production can be substituted by different instances.\n\nTeaching concepts\n\nThis section includes bits of code which show how metasyntactic variables are used in teaching computer programming concepts.\n\nC++\n\nFunction prototypes with  different argument passing mechanisms:\n\nvoid foo(Fruit bar);\nvoid foo(Fruit* bar);\nvoid foo(Fruit& bar);\n\nExample showing the function overloading capabilities of the C++ language\n\nvoid foo(int bar);\nvoid foo(int bar, int baz);\nvoid foo(int bar, int baz, int qux);. Metasyntactic variable. http://en.wikipedia.org/?curid=20036."
  }
}
