{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=4475",
  "eid" : "ce346770-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778425703,
  "textBody" : "B is a programming language developed at Bell Labs circa 1969.  It is the work of Ken Thompson with Dennis Ritchie.\n\nB was derived from BCPL, and its name may be a contraction of BCPL.  Thompson's coworker Dennis Ritchie speculated that the name might be based on Bon, an earlier, but unrelated, programming language that Thompson designed for use on Multics.\n\nB was designed for recursive, non-numeric, machine-independent applications, such as system and language software.\n\nHistory \n\nInitially Ken Thompson and later Dennis Ritchie developed B basing it mainly on the BCPL language Thompson used in the Multics project. B was essentially the BCPL system stripped of any component Thompson felt he could do without in order to make it fit within the memory capacity of the minicomputers of the time. The BCPL to B transition also included changes made to suit Thompson's preferences (mostly along the lines of reducing the number of non-whitespace characters in a typical program). Much of the typical ALGOL-like syntax of BCPL was rather heavily changed in this process. The assignment operator :\n reverted to the  of Rutishauser's Superplan (the source of ALGOL 58's :\n), and the equality operator  was replaced by \n.\n\nThompson invented arithmetic assignment operators for B, using x + y to add y to x (in C the operator is written +\n). B also introduced the increment and decrement operators (++ and --). Their prefix or postfix position determines whether the value is taken before or after alteration of the operand. These innovations were not in the earliest versions of B. Some guess that they were created for the auto-increment and auto-decrement address modes of the DEC PDP-11. This is historically impossible as there was no PDP-11 at the time that B was developed.\n\nB is typeless, or more precisely has one data type: the computer word. Most operators (e.g. +, -, *, /) treated this as an integer, but others treated it as a memory address to be dereferenced. In many other ways it looked a lot like an early version of C. There are a few library functions, including some that vaguely resemble functions from the standard I/O library in C.\n\nEarly implementations were for the DEC PDP-7 and PDP-11 minicomputers using early Unix, and Honeywell  36-bit mainframes running the operating system GCOS. The earliest PDP-7 implementations compiled to threaded code, and Ritchie wrote a compiler using TMG which produced machine code. In 1970 a PDP-11 was acquired and threaded code was used for the port; an assembler, dc, and the B language itself were written in B to bootstrap the computer. An early version of yacc was produced with this PDP-11 configuration. Ritchie took over maintenance during this period.\n\nThe typeless nature of B made sense on the Honeywell, PDP-7 and many older computers, but was a problem on the PDP-11 because it was difficult to elegantly access the character data type that the PDP-11 and most modern computers fully support. Starting in 1971 Ritchie made changes to the language while converting its compiler to produce machine code, most notably adding data typing for variables. During 1971 and 1972 B evolved into \"New B\" (NB) and then C.\n\nB is almost extinct, having been superseded by the C language. However, it continues to see use () on GCOS mainframes, and on certain embedded systems () for a variety of reasons, including limited hardware in the small systems; extensive libraries, tools, licensing cost issues; and simply being good enough for the job on others.  The highly influential AberMUD was originally written in B.\n\nExamples \n\nThe following example is from the Users' Reference to B by Ken Thompson:\n\n/* The following function will print a non-negative number, n, to\n   the base b, where 2",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "B (programming language)" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=4475" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "B is a programming language developed at Bell Labs circa 1969.  It is the work of Ken Thompson with Dennis Ritchie.\n\nB was derived from BCPL, and its name may be a contraction of BCPL.  Thompson's coworker Dennis Ritchie speculated that the name might be based on Bon, an earlier, but unrelated, programming language that Thompson designed for use on Multics.\n\nB was designed for recursive, non-numeric, machine-independent applications, such as system and language software.\n\nHistory \n\nInitially Ken Thompson and later Dennis Ritchie developed B basing it mainly on the BCPL language Thompson used in the Multics project. B was essentially the BCPL system stripped of any component Thompson felt he could do without in order to make it fit within the memory capacity of the minicomputers of the time. The BCPL to B transition also included changes made to suit Thompson's preferences (mostly along the lines of reducing the number of non-whitespace characters in a typical program). Much of the typical ALGOL-like syntax of BCPL was rather heavily changed in this process. The assignment operator :\n reverted to the  of Rutishauser's Superplan (the source of ALGOL 58's :\n), and the equality operator  was replaced by \n.\n\nThompson invented arithmetic assignment operators for B, using x + y to add y to x (in C the operator is written +\n). B also introduced the increment and decrement operators (++ and --). Their prefix or postfix position determines whether the value is taken before or after alteration of the operand. These innovations were not in the earliest versions of B. Some guess that they were created for the auto-increment and auto-decrement address modes of the DEC PDP-11. This is historically impossible as there was no PDP-11 at the time that B was developed.\n\nB is typeless, or more precisely has one data type: the computer word. Most operators (e.g. +, -, *, /) treated this as an integer, but others treated it as a memory address to be dereferenced. In many other ways it looked a lot like an early version of C. There are a few library functions, including some that vaguely resemble functions from the standard I/O library in C.\n\nEarly implementations were for the DEC PDP-7 and PDP-11 minicomputers using early Unix, and Honeywell  36-bit mainframes running the operating system GCOS. The earliest PDP-7 implementations compiled to threaded code, and Ritchie wrote a compiler using TMG which produced machine code. In 1970 a PDP-11 was acquired and threaded code was used for the port; an assembler, dc, and the B language itself were written in B to bootstrap the computer. An early version of yacc was produced with this PDP-11 configuration. Ritchie took over maintenance during this period.\n\nThe typeless nature of B made sense on the Honeywell, PDP-7 and many older computers, but was a problem on the PDP-11 because it was difficult to elegantly access the character data type that the PDP-11 and most modern computers fully support. Starting in 1971 Ritchie made changes to the language while converting its compiler to produce machine code, most notably adding data typing for variables. During 1971 and 1972 B evolved into \"New B\" (NB) and then C.\n\nB is almost extinct, having been superseded by the C language. However, it continues to see use () on GCOS mainframes, and on certain embedded systems () for a variety of reasons, including limited hardware in the small systems; extensive libraries, tools, licensing cost issues; and simply being good enough for the job on others.  The highly influential AberMUD was originally written in B.\n\nExamples \n\nThe following example is from the Users' Reference to B by Ken Thompson:\n\n/* The following function will print a non-negative number, n, to\n   the base b, where 2. B (programming language). http://en.wikipedia.org/?curid=4475."
  }
}
