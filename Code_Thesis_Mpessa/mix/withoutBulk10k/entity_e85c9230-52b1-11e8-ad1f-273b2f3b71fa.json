{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=8506",
  "eid" : "e85c9230-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778469587,
  "textBody" : "Microsoft DirectX is a collection of application programming interfaces (APIs) for handling tasks related to multimedia, especially game programming and video, on Microsoft platforms. Originally, the names of these APIs all began with Direct, such as Direct3D, DirectDraw, DirectMusic, DirectPlay, DirectSound, and so forth. The name DirectX was coined as a shorthand term for all of these APIs (the X standing in for the particular API names) and soon became the name of the collection. When Microsoft later set out to develop a gaming console, the X was used as the basis of the name Xbox to indicate that the console was based on DirectX technology. The X initial has been carried forward in the naming of APIs designed for the Xbox such as XInput and the Cross-platform Audio Creation Tool (XACT), while the DirectX pattern has been continued for Windows APIs such as Direct2D and DirectWrite.\n\nDirect3D (the 3D graphics API within DirectX) is widely used in the development of video games for Microsoft Windows and the Xbox line of consoles. Direct3D is also used by other software applications for visualization and graphics tasks such as CAD/CAM engineering. As Direct3D is the most widely publicized component of DirectX, it is common to see the names \"DirectX\" and \"Direct3D\" used interchangeably.\n\nThe DirectX software development kit (SDK) consists of runtime libraries in redistributable binary form, along with accompanying documentation and headers for use in coding. Originally, the runtimes were only installed by games or explicitly by the user. Windows 95 did not launch with DirectX, but DirectX was included with Windows 95 OEM Service Release 2. Windows 98 and Windows NT 4.0 both shipped with DirectX, as has every version of Windows released since. The SDK is available as a free download. While the runtimes are proprietary, closed-source software, source code is provided for most of the SDK samples. Starting with the release of Windows 8 Developer Preview, DirectX SDK has been integrated into Windows SDK.\n\nDevelopment history\n\nIn late 1994, Microsoft was ready to release Windows 95, its next operating system. An important factor in the value consumers would place on it was the programs that would be able to run on it. Three Microsoft employees—Craig Eisler, Alex St. John, and Eric Engstrom—were concerned because programmers tended to see Microsoft's previous operating system, MS-DOS, as a better platform for game programming, meaning few games would be developed for Windows 95 and the operating system would not be as much of a success. This was compounded by negative reception surrounding the Windows port of the video game The Lion King. The game used WinG, which crashed on Compaq Presarios that came shipped with it following a partnership between Compaq and Disney, as the Cirrus Logic display drivers used by the Presarios were not thoroughly tested with the API.\n   \nDOS allowed direct access to video cards, keyboards, mice, sound devices, and all other parts of the system, while Windows 95 – with its protected memory model – restricted access to all of these, working on a much more standardized model. Microsoft needed a quick solution for programmers; the operating system was only months away from being released. Eisler (development lead), St. John, and Engstrom (program manager) worked together to fix this problem, with a solution that they eventually named DirectX.\n   \nThe first version of DirectX was released in September 1995 as the Windows Games SDK. It was the Win32 replacement for the DCI and WinG APIs for Windows 3.1. DirectX allowed all versions of Microsoft Windows, starting with Windows 95, to incorporate high-performance multimedia. Eisler wrote about the frenzy to build DirectX 1 through 5 in his blog.[http://craig.theeislers.com/2006/02/20/directx-then-and-now-part-1/ Craig Eisler's blog post about the frenzy to build DirectX 1 through 5] on craig.theeislers.com\n\nDirectX 2.0 became a component of Windows itself with the releases of Windows 95 OSR2 and  Windows NT 4.0 in mid-1996.  Since Windows 95 was itself still new and few games had been released for it, Microsoft engaged in heavy promotion of DirectX to developers who were generally distrustful of Microsoft's ability to build a gaming platform in Windows.  Alex St. John, the evangelist for DirectX, staged an elaborate event at the 1996 Computer   Game Developers Conference which game developer Jay Barnson described as a Roman theme, including real lions, togas, and something resembling an indoor carnival.  It was at this event that Microsoft first introduced Direct3D and DirectPlay, and demonstrated multiplayer MechWarrior 2 being played over the Internet.\n\nThe DirectX team faced the challenging task of testing each DirectX release against an array of computer hardware and software. A variety of different graphics cards, audio cards, motherboards, CPUs, input devices, games, and other multimedia applications were tested with each beta and final release. The DirectX team also built and distributed tests that allowed the hardware industry to confirm that new hardware designs and driver releases would be compatible with DirectX.\n\nPrior to DirectX, Microsoft had included OpenGL on their Windows NT platform. At the time, OpenGL required \"high-end\" hardware and was focused on engineering and CAD uses. Direct3D was intended to be a Microsoft controlled alternative to OpenGL, focused initially on game use. As 3D gaming grew, OpenGL developed to include better support for programming techniques for interactive multimedia applications like games, giving developers choice between using OpenGL or Direct3D as the 3D graphics API for their applications. At that point a \"battle\" began between supporters of the cross-platform OpenGL and the Windows-only Direct3D. Incidentally, OpenGL was supported at Microsoft by the DirectX team.  If a developer chose to use OpenGL 3D graphics API, the other APIs of DirectX are often combined with OpenGL in computer games because OpenGL does not include all of DirectX's functionality (such as sound or joystick support).\n\nIn a console-specific version, DirectX was used as a basis for Microsoft's Xbox, Xbox 360 and Xbox One console API. The API was developed jointly between Microsoft and Nvidia, which developed the custom graphics hardware used by the original Xbox. The Xbox API was similar to DirectX version 8.1, but is non-updateable like other console technologies. The Xbox was code named DirectXbox, but this was shortened to Xbox for its commercial name.J. Allard, [http://www.pcpro.co.uk/news/55995/games-interview-xbox-supremo-allard-on-the-future-of-microsofts-console-part-ii.html PC Pro Interview] , April 2004\n\nIn 2002, Microsoft released DirectX 9 with support for the use of much longer shader programs than before with pixel and vertex shader version 2.0. Microsoft has continued to update the DirectX suite since then, introducing Shader Model 3.0 in DirectX 9.0c, released in August 2004.\n\nAs of April 2005, DirectShow was removed from DirectX and moved to the Microsoft Platform SDK instead.\n\nDirectX has been confirmed to be present in Microsoft's Windows Phone 8.\n\nLogos\n\nThe original logo resembled a deformed radiation warning symbol. Controversially, the original name for the DirectX project was the \"Manhattan Project\", a reference to the US nuclear weapons initiative. Alex St. John, head of Microsoft DirectX evangelism at the time, claims that the connotation of the ultimate outcome of the Manhattan Project (the nuclear bombing of Japan) is intentional, and that DirectX and its sister project, the Xbox (which shares a similar logo), were meant to displace Japanese videogame-makers from their dominance of the video-game industry.\n However, Microsoft publicly denies this account, instead claiming that the logo is merely an artistic design.\n\nDirectX 1 logo.png|DirectX 1.0–8.2\nDirectx9.png|DirectX 9.0–11\n\nComponents\n\nDirectX is composed of multiple APIs:\n\n* Direct3D (D3D): for drawing 3D graphics.\n* DXGI: for enumerating adapters and monitors and managing swap chains for Direct3D 10 and up.\n* Direct2D: for 2D graphics.\n* DirectWrite: for fonts.\n* DirectCompute: for GPU Computing.\n* DirectX Diagnostics (DxDiag): a tool for diagnosing and generating reports on components related to DirectX, such as audio, video, and input drivers.\n* DirectX Media Objects: support for streaming objects such as encoders, decoders, and effects.\n* DirectSetup: for the installation of DirectX components, and the detection of the current DirectX version.\n* XACT3 higher-level audio API.\n* XAudio2: low-level API for audio.\n\nMicrosoft has deprecated, but still supports, these DirectX components:\n* DirectX Media: comprising DirectAnimation for 2D/3D[http://www.asahi-net.or.jp/~RB6K-IID/space.html 3D Animation of SPACE FIGHTER by DIRECT ANIMATION] web animation, DirectShow for multimedia playback and streaming media, DirectX Transform for web interactivity, and Direct3D Retained Mode for higher level 3D graphics. It also contained DirectX plugins for audio signal processing and DirectX Video Acceleration for accelerated video playback. Deprecated in favor of Media Foundation.\n* DirectDraw: for drawing 2D Graphics (raster graphics). Deprecated in favor of Direct2D, though still in use by a number of games and as a video renderer in media applications.\n* DirectInput: for interfacing with input devices including keyboards, mice, joysticks, or other game controllers. Deprecated after version 8 in favor of XInput for Xbox 360 controllers or standard WM_INPUT window message processing for keyboard and mouse input.\n* DirectPlay: for communication over a local-area or wide-area network. Deprecated after version 8 in favor of Games for Windows Live and Xbox Live.\n* DirectSound: for the playback and recording of waveform sounds. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.\n* DirectSound3D (DS3D): for the playback of 3D sounds. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.\n* DirectMusic: for playback of soundtracks authored in DirectMusic Producer. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.\n\nDirectX functionality is provided in the form of COM-style objects and interfaces. Additionally, while not DirectX components themselves, managed objects have been built on top of some parts of DirectX, such as Managed Direct3D and the XNA graphics library on top of Direct3D 9.\n\nVersions\n\nDirectX 10\n\nA major update to DirectX API, DirectX 10 ships with and is only available with Windows Vista and later; previous versions of Windows such as Windows XP are not able to run DirectX 10-exclusive applications. Rather, programs that are run on a Windows XP system with DirectX 10 hardware simply resort to the DirectX 9.0c code path, the latest available for Windows XP computers.\n\nChanges for DirectX 10 were extensive. Many former parts of DirectX API were deprecated in the latest DirectX SDK and are preserved for compatibility only: DirectInput was deprecated in favor of XInput, DirectSound was deprecated in favor of the Cross-platform Audio Creation Tool system (XACT) and additionally lost support for hardware accelerated audio, since the Vista audio stack renders sound in software on the CPU. The DirectPlay DPLAY.DLL was also removed and was replaced with dplayx.dll; games that rely on this DLL must duplicate it and rename it to dplay.dll.\n\nIn order to achieve backwards compatibility, DirectX in Windows Vista contains several versions of Direct3D:\n* Direct3D 9: emulates Direct3D 9 behavior as it was on Windows XP. Details and advantages of Vista's Windows Display Driver Model are hidden from the application if WDDM drivers are installed. This is the only API available if there are only XP graphic drivers (XDDM) installed, after an upgrade to Vista for example.\n* Direct3D 9Ex (known internally during Windows Vista development as 9.0L or 9.L): allows full access to the new capabilities of WDDM (if WDDM drivers are installed) while maintaining compatibility for existing Direct3D applications. The Windows Aero user interface relies on D3D 9Ex.\n* Direct3D 10: Designed around the new driver model in Windows Vista and featuring a number of improvements to rendering capabilities and flexibility, including Shader Model 4.\n\nDirect3D 10.1 is an incremental update of Direct3D 10.0 which shipped with, and required, Windows Vista Service Pack 1. This release mainly sets a few more image quality standards for graphics vendors, while giving developers more control over image quality. It also adds support for cube map arrays, separate blend modes per-MRT, coverage mask export from a pixel shader, ability to run pixel shader per sample, access to multi-sampled depth buffers and requires that the video card supports Shader Model 4.1 or higher and 32-bit floating-point operations. Direct3D 10.1 still fully supports Direct3D 10 hardware, but in order to utilize all of the new features, updated hardware is required.\n\nDirectX 11\n\nMicrosoft unveiled DirectX 11 at the Gamefest 08 event in Seattle, with the major scheduled features including GPGPU support (DirectCompute), and Direct3D 11 with tessellation support and improved multi-threading support to assist video game developers in developing games that better utilize multi-core processors.[http://unmashable.com/pc-hardware/graphics-cards/what-new-features-will-directx-11-bring/ Windows 7 and D3D 11 release date]  Direct3D 11 runs on Windows Vista, Windows 7, Windows 8 and Windows 10. Parts of the new API such as multi-threaded resource handling can be supported on Direct3D 9/10/10.1-class hardware. Hardware tessellation and Shader Model 5.0 require Direct3D 11 supporting hardware. Microsoft has since released the Direct3D 11 Technical Preview. Direct3D 11 is a strict superset of Direct3D 10.1 — all hardware and API features of version 10.1 are retained, and new features are added only when necessary for exposing new functionality. This helps to keep backwards compatibility with previous versions of DirectX.\n\nMicrosoft released the Final Platform Update for Windows Vista on October 27, 2009, which was 5 days after the initial release of Windows 7 (launched with Direct3D 11 as a base standard).\n\nDirectX 11.1 is included in Windows 8. It supports WDDM 1.2 for increased performance, features improved integration of Direct2D (now at version 1.1), Direct3D, and DirectCompute, and includes DirectXMath, XAudio2, and XInput libraries from the XNA framework. It also features stereoscopic 3D support for gaming and video.[http://download.microsoft.com/download/1/E/4/1E455D53-C382-4A39-BA73-55413F183333/Windows_Developer_Preview-Windows8_guide.pdf Windows 8 Developer Preview Guide]  DirectX 11.1 was also partially backported to Windows 7, via the Windows 7 platform update.\n\nDirectX 11.2 is included in Windows 8.1 (including the RT version) and Windows Server 2012 R2. It added some new features to Direct2D like geometry realizations. It also added swap chain composition, which allows some elements of the scene to be rendered at lower resolutions and then composited via hardware overlay with other parts rendered at higher resolution.\n\nDirectX 11.X is a superset of DirectX 11.2 running on the Xbox One. It actually includes some features, such as draw bundles, that were later announced as part of DirectX 12.Chris Tector's segment of http://channel9.msdn.com/Blogs/DirectX-Developer-Blog/DirectX-Evolving-Microsoft-s-Graphics-Platform (starting approx. 18 minute in.)\n\nDirectX 11.3 was announced along with DirectX 12 at GDC and released in 2015. It is meant to complement DirectX 12 as a higher-level alternative. It is included with Windows 10.\n\nDirectX 12\n\nDirectX 12 was announced by Microsoft at GDC on March 20, 2014, and was officially launched alongside Windows 10 on July 29, 2015. DirectX 12 APIs are also expected to feature on the Xbox One and Windows Phone. The version of DirectX that runs on the Xbox One, DirectX 11.X, already includes a subset of the features in DirectX 12. However, the DirectX 12 code is not intended to be directly portable between PC and Xbox One due to inherent differences between the two platforms. Microsoft has stated that the performance improvements of DirectX 12 on the Xbox One will not be as substantial as that on the PC.\n\nThe primary feature highlight for the new release of DirectX was the introduction of advanced low-level programming APIs for Direct3D 12 which can reduce driver overhead. Developers are now able to implement their own command lists and buffers to the GPU, allowing for more efficient resource utilization through parallel computation. Lead developer Max McMullen stated that the main goal of Direct3D 12 is to achieve \"console-level efficiency on phone, tablet and PC\". The release of Direct3D 12 comes alongside other initiatives for low-overhead graphics APIs including AMD's Mantle for AMD graphics cards, Apple's Metal for iOS and macOS and Khronos Group's cross-platform Vulkan.\n\nMultiadapter support will feature in DirectX 12 allowing developers to utilize multiple GPUs on a system simultaneously, multi-GPU support was previously dependent on vendor implementations such as AMD CrossFireX or NVIDIA SLI.\nImplicit Multiadapter support will work in a similar manner to previous versions of DirectX where frames are rendered alternately across linked GPUs of similar compute-power.\nExplicit Multiadapter will provide two distinct API patterns to developers. Linked GPUs will allow DirectX to view graphics cards in SLI or CrossFireX as a single GPU and use the combined resources. Whereas Unlinked GPUs will allow GPUs from different vendors to be utilized by DirectX, such as supplementing the dedicated GPU with the integrated GPU on the CPU, or combining AMD and NVIDIA cards. However, elaborate mixed multi-GPU setups requires significantly more attentive developer support.\n\nDirectX 12 is supported on all Fermi and later Nvidia GPUs, on AMD's GCN-based chips and on Intel's Haswell and later processors' graphics units.\n\nAt SIGGRAPH 2014, Intel released a demo showing a computer generated asteroid field, in which DirectX 12 was claimed to be 50%-70% more efficient than DirectX 11 in rendering speed and CPU power consumption.\n\nAshes of the Singularity was the first publicly available game to utilize DirectX 12. Testing by Ars Technica in August 2015 revealed slight performance regressions in DirectX 12 over DirectX 11 mode for the Nvidia GeForce 980 Ti, whereas the AMD Radeon R9 290x achieved consistent performance improvements of up to 70% under DirectX 12, in some scenarios the AMD outperformed the more powerful Nvidia under DirectX 12. The performance discrepancies may be due to poor Nvidia driver optimizations for DirectX 12, or even hardware limitations of the card which was optimized for DirectX 11 serial execution, however the exact cause remains unclear.\n\nRelease history\n\nThe version number as reported by Microsoft's DxDiag tool (version 4.09.0000.0900 and higher) use the x.xx.xxxx.xxxx format for version numbers. However, the DirectX and Windows XP MSDN page claims that the registry always has been in the x.xx.xx.xxxx format. Put another way, when the above table lists a version as '4.09.00.0904' Microsoft's DxDiag tool may have it as '4.09.0000.0904'.[http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/directx9_c_Dec_2004/directx/directxsdk/dxandxp.asp DirectX and Windows XP]\n\nCompatibility\n\nVarious releases of Windows have included and supported various versions of DirectX, allowing newer versions of the operating system to continue running applications designed for earlier versions of DirectX until those versions can be gradually phased out in favor of newer APIs, drivers, and hardware.\n\nAPIs such as Direct3D and DirectSound need to interact with hardware, and they do this through a device driver.  Hardware manufacturers have to write these drivers for a particular DirectX version's device driver interface (or DDI), and test each individual piece of hardware to make them DirectX compatible. Some hardware devices have only DirectX compatible drivers (in other words, one must install DirectX in order to use that hardware). Early versions of DirectX included an up-to-date library of all of the DirectX compatible drivers currently available. This practice was stopped however, in favor of the web-based Windows Update driver-update system, which allowed users to download only the drivers relevant to their hardware, rather than the entire library.\n\nPrior to DirectX 10, DirectX runtime was designed to be backward compatible with older drivers, meaning that newer versions of the APIs were designed to interoperate with older drivers written against a previous version's DDI. The application programmer had to query the available hardware capabilities using a complex system of \"cap bits\" each tied to a particular hardware feature. Direct3D 7 and earlier would work on any version of the DDI, Direct3D 8 requires a minimum DDI level of 6 and Direct3D 9 requires a minimum DDI level of 7.\nHowever, the Direct3D 10 runtime in Windows Vista cannot run on older hardware drivers due to the significantly updated DDI, which requires a unified feature set and abandons the use of \"cap bits\".\n\nDirect3D 10.1 introduces \"feature levels\" 10_0 and 10_1, which allow use of only the hardware features defined in the specified version of Direct3D API. Direct3D 11 adds level 11_0 and \"10 Level 9\" - a subset of the Direct3D 10 API designed to run on Direct3D 9 hardware, which has three feature levels (9_1, 9_2 and 9_3) grouped by common capabilities of \"low\", \"med\" and \"high-end\" video cards; the runtime directly uses Direct3D 9 DDI provided in all WDDM drivers. Feature level 11_1 has been introduced with Direct3D 11.1.\n\n.NET Framework\n\nIn 2002, Microsoft released a version of DirectX compatible with the Microsoft .NET Framework, thus allowing programmers to take advantage of DirectX functionality from within .NET applications using compatible languages such as managed C++ or the use of the C# programming language. This API was known as \"Managed DirectX\" (or MDX for short), and claimed to operate at 98% of performance of the underlying native DirectX APIs. In December 2005, February 2006, April 2006, and August 2006, Microsoft released successive updates to this library, culminating in a beta version called Managed DirectX 2.0. While Managed DirectX 2.0 consolidated functionality that had previously been scattered over multiple assemblies into a single assembly, thus simplifying dependencies on it for software developers, development on this version has subsequently been discontinued, and it is no longer supported. The Managed DirectX 2.0 library expired on October 5, 2006.\n\nDuring the GDC 2006, Microsoft presented the XNA Framework, a new managed version of DirectX (similar but not identical to Managed DirectX) that is intended to assist development of games by making it easier to integrate DirectX, High-Level Shader Language (HLSL) and other tools in one package. It also supports the execution of managed code on the Xbox 360. The XNA Game Studio Express RTM was made available on December 11, 2006, as a free download for Windows XP. Unlike the DirectX runtime, Managed DirectX, XNA Framework or the Xbox 360 APIs (XInput, XACT etc.) have not shipped as part of Windows. Developers are expected to redistribute the runtime components along with their games or applications.\n\nNo Microsoft product including the latest XNA releases provides DirectX 10 support for the .NET Framework.\n\nThe other approach for DirectX in managed languages is to use third-party libraries like:\n\n* SlimDX, an open source library for DirectX programming on the .NET Framework\n* SharpDX, which is an open source project delivering the full DirectX API for .NET on all Windows platforms, allowing the development of high performance game, 2D and 3D graphics rendering as well as real-time sound applications \n* [http://sourceforge.net/projects/directshownet DirectShow.NET] for the DirectShow subset\n* [http://code.msdn.microsoft.com/WindowsAPICodePack Windows API CodePack for .NET Framework], which is an open source library from Microsoft.\n\nAlternatives\n\nThere are alternatives to the DirectX family of APIs, with OpenGL, its successor Vulkan, Metal and Mantle having the most features comparable to Direct3D. Examples of other APIs include SDL, Allegro, OpenMAX, OpenML, OpenAL, OpenCL, FMOD, SFML etc. Many of these libraries are cross-platform or have open codebases. There are also alternative implementations that aim to provide the same API, such as the one in Wine. Furthermore, the developers of ReactOS are trying to reimplement DirectX under the name \"ReactX\".",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "DirectX" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=8506" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "Microsoft DirectX is a collection of application programming interfaces (APIs) for handling tasks related to multimedia, especially game programming and video, on Microsoft platforms. Originally, the names of these APIs all began with Direct, such as Direct3D, DirectDraw, DirectMusic, DirectPlay, DirectSound, and so forth. The name DirectX was coined as a shorthand term for all of these APIs (the X standing in for the particular API names) and soon became the name of the collection. When Microsoft later set out to develop a gaming console, the X was used as the basis of the name Xbox to indicate that the console was based on DirectX technology. The X initial has been carried forward in the naming of APIs designed for the Xbox such as XInput and the Cross-platform Audio Creation Tool (XACT), while the DirectX pattern has been continued for Windows APIs such as Direct2D and DirectWrite.\n\nDirect3D (the 3D graphics API within DirectX) is widely used in the development of video games for Microsoft Windows and the Xbox line of consoles. Direct3D is also used by other software applications for visualization and graphics tasks such as CAD/CAM engineering. As Direct3D is the most widely publicized component of DirectX, it is common to see the names \"DirectX\" and \"Direct3D\" used interchangeably.\n\nThe DirectX software development kit (SDK) consists of runtime libraries in redistributable binary form, along with accompanying documentation and headers for use in coding. Originally, the runtimes were only installed by games or explicitly by the user. Windows 95 did not launch with DirectX, but DirectX was included with Windows 95 OEM Service Release 2. Windows 98 and Windows NT 4.0 both shipped with DirectX, as has every version of Windows released since. The SDK is available as a free download. While the runtimes are proprietary, closed-source software, source code is provided for most of the SDK samples. Starting with the release of Windows 8 Developer Preview, DirectX SDK has been integrated into Windows SDK.\n\nDevelopment history\n\nIn late 1994, Microsoft was ready to release Windows 95, its next operating system. An important factor in the value consumers would place on it was the programs that would be able to run on it. Three Microsoft employees—Craig Eisler, Alex St. John, and Eric Engstrom—were concerned because programmers tended to see Microsoft's previous operating system, MS-DOS, as a better platform for game programming, meaning few games would be developed for Windows 95 and the operating system would not be as much of a success. This was compounded by negative reception surrounding the Windows port of the video game The Lion King. The game used WinG, which crashed on Compaq Presarios that came shipped with it following a partnership between Compaq and Disney, as the Cirrus Logic display drivers used by the Presarios were not thoroughly tested with the API.\n   \nDOS allowed direct access to video cards, keyboards, mice, sound devices, and all other parts of the system, while Windows 95 – with its protected memory model – restricted access to all of these, working on a much more standardized model. Microsoft needed a quick solution for programmers; the operating system was only months away from being released. Eisler (development lead), St. John, and Engstrom (program manager) worked together to fix this problem, with a solution that they eventually named DirectX.\n   \nThe first version of DirectX was released in September 1995 as the Windows Games SDK. It was the Win32 replacement for the DCI and WinG APIs for Windows 3.1. DirectX allowed all versions of Microsoft Windows, starting with Windows 95, to incorporate high-performance multimedia. Eisler wrote about the frenzy to build DirectX 1 through 5 in his blog.[http://craig.theeislers.com/2006/02/20/directx-then-and-now-part-1/ Craig Eisler's blog post about the frenzy to build DirectX 1 through 5] on craig.theeislers.com\n\nDirectX 2.0 became a component of Windows itself with the releases of Windows 95 OSR2 and  Windows NT 4.0 in mid-1996.  Since Windows 95 was itself still new and few games had been released for it, Microsoft engaged in heavy promotion of DirectX to developers who were generally distrustful of Microsoft's ability to build a gaming platform in Windows.  Alex St. John, the evangelist for DirectX, staged an elaborate event at the 1996 Computer   Game Developers Conference which game developer Jay Barnson described as a Roman theme, including real lions, togas, and something resembling an indoor carnival.  It was at this event that Microsoft first introduced Direct3D and DirectPlay, and demonstrated multiplayer MechWarrior 2 being played over the Internet.\n\nThe DirectX team faced the challenging task of testing each DirectX release against an array of computer hardware and software. A variety of different graphics cards, audio cards, motherboards, CPUs, input devices, games, and other multimedia applications were tested with each beta and final release. The DirectX team also built and distributed tests that allowed the hardware industry to confirm that new hardware designs and driver releases would be compatible with DirectX.\n\nPrior to DirectX, Microsoft had included OpenGL on their Windows NT platform. At the time, OpenGL required \"high-end\" hardware and was focused on engineering and CAD uses. Direct3D was intended to be a Microsoft controlled alternative to OpenGL, focused initially on game use. As 3D gaming grew, OpenGL developed to include better support for programming techniques for interactive multimedia applications like games, giving developers choice between using OpenGL or Direct3D as the 3D graphics API for their applications. At that point a \"battle\" began between supporters of the cross-platform OpenGL and the Windows-only Direct3D. Incidentally, OpenGL was supported at Microsoft by the DirectX team.  If a developer chose to use OpenGL 3D graphics API, the other APIs of DirectX are often combined with OpenGL in computer games because OpenGL does not include all of DirectX's functionality (such as sound or joystick support).\n\nIn a console-specific version, DirectX was used as a basis for Microsoft's Xbox, Xbox 360 and Xbox One console API. The API was developed jointly between Microsoft and Nvidia, which developed the custom graphics hardware used by the original Xbox. The Xbox API was similar to DirectX version 8.1, but is non-updateable like other console technologies. The Xbox was code named DirectXbox, but this was shortened to Xbox for its commercial name.J. Allard, [http://www.pcpro.co.uk/news/55995/games-interview-xbox-supremo-allard-on-the-future-of-microsofts-console-part-ii.html PC Pro Interview] , April 2004\n\nIn 2002, Microsoft released DirectX 9 with support for the use of much longer shader programs than before with pixel and vertex shader version 2.0. Microsoft has continued to update the DirectX suite since then, introducing Shader Model 3.0 in DirectX 9.0c, released in August 2004.\n\nAs of April 2005, DirectShow was removed from DirectX and moved to the Microsoft Platform SDK instead.\n\nDirectX has been confirmed to be present in Microsoft's Windows Phone 8.\n\nLogos\n\nThe original logo resembled a deformed radiation warning symbol. Controversially, the original name for the DirectX project was the \"Manhattan Project\", a reference to the US nuclear weapons initiative. Alex St. John, head of Microsoft DirectX evangelism at the time, claims that the connotation of the ultimate outcome of the Manhattan Project (the nuclear bombing of Japan) is intentional, and that DirectX and its sister project, the Xbox (which shares a similar logo), were meant to displace Japanese videogame-makers from their dominance of the video-game industry.\n However, Microsoft publicly denies this account, instead claiming that the logo is merely an artistic design.\n\nDirectX 1 logo.png|DirectX 1.0–8.2\nDirectx9.png|DirectX 9.0–11\n\nComponents\n\nDirectX is composed of multiple APIs:\n\n* Direct3D (D3D): for drawing 3D graphics.\n* DXGI: for enumerating adapters and monitors and managing swap chains for Direct3D 10 and up.\n* Direct2D: for 2D graphics.\n* DirectWrite: for fonts.\n* DirectCompute: for GPU Computing.\n* DirectX Diagnostics (DxDiag): a tool for diagnosing and generating reports on components related to DirectX, such as audio, video, and input drivers.\n* DirectX Media Objects: support for streaming objects such as encoders, decoders, and effects.\n* DirectSetup: for the installation of DirectX components, and the detection of the current DirectX version.\n* XACT3 higher-level audio API.\n* XAudio2: low-level API for audio.\n\nMicrosoft has deprecated, but still supports, these DirectX components:\n* DirectX Media: comprising DirectAnimation for 2D/3D[http://www.asahi-net.or.jp/~RB6K-IID/space.html 3D Animation of SPACE FIGHTER by DIRECT ANIMATION] web animation, DirectShow for multimedia playback and streaming media, DirectX Transform for web interactivity, and Direct3D Retained Mode for higher level 3D graphics. It also contained DirectX plugins for audio signal processing and DirectX Video Acceleration for accelerated video playback. Deprecated in favor of Media Foundation.\n* DirectDraw: for drawing 2D Graphics (raster graphics). Deprecated in favor of Direct2D, though still in use by a number of games and as a video renderer in media applications.\n* DirectInput: for interfacing with input devices including keyboards, mice, joysticks, or other game controllers. Deprecated after version 8 in favor of XInput for Xbox 360 controllers or standard WM_INPUT window message processing for keyboard and mouse input.\n* DirectPlay: for communication over a local-area or wide-area network. Deprecated after version 8 in favor of Games for Windows Live and Xbox Live.\n* DirectSound: for the playback and recording of waveform sounds. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.\n* DirectSound3D (DS3D): for the playback of 3D sounds. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.\n* DirectMusic: for playback of soundtracks authored in DirectMusic Producer. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.\n\nDirectX functionality is provided in the form of COM-style objects and interfaces. Additionally, while not DirectX components themselves, managed objects have been built on top of some parts of DirectX, such as Managed Direct3D and the XNA graphics library on top of Direct3D 9.\n\nVersions\n\nDirectX 10\n\nA major update to DirectX API, DirectX 10 ships with and is only available with Windows Vista and later; previous versions of Windows such as Windows XP are not able to run DirectX 10-exclusive applications. Rather, programs that are run on a Windows XP system with DirectX 10 hardware simply resort to the DirectX 9.0c code path, the latest available for Windows XP computers.\n\nChanges for DirectX 10 were extensive. Many former parts of DirectX API were deprecated in the latest DirectX SDK and are preserved for compatibility only: DirectInput was deprecated in favor of XInput, DirectSound was deprecated in favor of the Cross-platform Audio Creation Tool system (XACT) and additionally lost support for hardware accelerated audio, since the Vista audio stack renders sound in software on the CPU. The DirectPlay DPLAY.DLL was also removed and was replaced with dplayx.dll; games that rely on this DLL must duplicate it and rename it to dplay.dll.\n\nIn order to achieve backwards compatibility, DirectX in Windows Vista contains several versions of Direct3D:\n* Direct3D 9: emulates Direct3D 9 behavior as it was on Windows XP. Details and advantages of Vista's Windows Display Driver Model are hidden from the application if WDDM drivers are installed. This is the only API available if there are only XP graphic drivers (XDDM) installed, after an upgrade to Vista for example.\n* Direct3D 9Ex (known internally during Windows Vista development as 9.0L or 9.L): allows full access to the new capabilities of WDDM (if WDDM drivers are installed) while maintaining compatibility for existing Direct3D applications. The Windows Aero user interface relies on D3D 9Ex.\n* Direct3D 10: Designed around the new driver model in Windows Vista and featuring a number of improvements to rendering capabilities and flexibility, including Shader Model 4.\n\nDirect3D 10.1 is an incremental update of Direct3D 10.0 which shipped with, and required, Windows Vista Service Pack 1. This release mainly sets a few more image quality standards for graphics vendors, while giving developers more control over image quality. It also adds support for cube map arrays, separate blend modes per-MRT, coverage mask export from a pixel shader, ability to run pixel shader per sample, access to multi-sampled depth buffers and requires that the video card supports Shader Model 4.1 or higher and 32-bit floating-point operations. Direct3D 10.1 still fully supports Direct3D 10 hardware, but in order to utilize all of the new features, updated hardware is required.\n\nDirectX 11\n\nMicrosoft unveiled DirectX 11 at the Gamefest 08 event in Seattle, with the major scheduled features including GPGPU support (DirectCompute), and Direct3D 11 with tessellation support and improved multi-threading support to assist video game developers in developing games that better utilize multi-core processors.[http://unmashable.com/pc-hardware/graphics-cards/what-new-features-will-directx-11-bring/ Windows 7 and D3D 11 release date]  Direct3D 11 runs on Windows Vista, Windows 7, Windows 8 and Windows 10. Parts of the new API such as multi-threaded resource handling can be supported on Direct3D 9/10/10.1-class hardware. Hardware tessellation and Shader Model 5.0 require Direct3D 11 supporting hardware. Microsoft has since released the Direct3D 11 Technical Preview. Direct3D 11 is a strict superset of Direct3D 10.1 — all hardware and API features of version 10.1 are retained, and new features are added only when necessary for exposing new functionality. This helps to keep backwards compatibility with previous versions of DirectX.\n\nMicrosoft released the Final Platform Update for Windows Vista on October 27, 2009, which was 5 days after the initial release of Windows 7 (launched with Direct3D 11 as a base standard).\n\nDirectX 11.1 is included in Windows 8. It supports WDDM 1.2 for increased performance, features improved integration of Direct2D (now at version 1.1), Direct3D, and DirectCompute, and includes DirectXMath, XAudio2, and XInput libraries from the XNA framework. It also features stereoscopic 3D support for gaming and video.[http://download.microsoft.com/download/1/E/4/1E455D53-C382-4A39-BA73-55413F183333/Windows_Developer_Preview-Windows8_guide.pdf Windows 8 Developer Preview Guide]  DirectX 11.1 was also partially backported to Windows 7, via the Windows 7 platform update.\n\nDirectX 11.2 is included in Windows 8.1 (including the RT version) and Windows Server 2012 R2. It added some new features to Direct2D like geometry realizations. It also added swap chain composition, which allows some elements of the scene to be rendered at lower resolutions and then composited via hardware overlay with other parts rendered at higher resolution.\n\nDirectX 11.X is a superset of DirectX 11.2 running on the Xbox One. It actually includes some features, such as draw bundles, that were later announced as part of DirectX 12.Chris Tector's segment of http://channel9.msdn.com/Blogs/DirectX-Developer-Blog/DirectX-Evolving-Microsoft-s-Graphics-Platform (starting approx. 18 minute in.)\n\nDirectX 11.3 was announced along with DirectX 12 at GDC and released in 2015. It is meant to complement DirectX 12 as a higher-level alternative. It is included with Windows 10.\n\nDirectX 12\n\nDirectX 12 was announced by Microsoft at GDC on March 20, 2014, and was officially launched alongside Windows 10 on July 29, 2015. DirectX 12 APIs are also expected to feature on the Xbox One and Windows Phone. The version of DirectX that runs on the Xbox One, DirectX 11.X, already includes a subset of the features in DirectX 12. However, the DirectX 12 code is not intended to be directly portable between PC and Xbox One due to inherent differences between the two platforms. Microsoft has stated that the performance improvements of DirectX 12 on the Xbox One will not be as substantial as that on the PC.\n\nThe primary feature highlight for the new release of DirectX was the introduction of advanced low-level programming APIs for Direct3D 12 which can reduce driver overhead. Developers are now able to implement their own command lists and buffers to the GPU, allowing for more efficient resource utilization through parallel computation. Lead developer Max McMullen stated that the main goal of Direct3D 12 is to achieve \"console-level efficiency on phone, tablet and PC\". The release of Direct3D 12 comes alongside other initiatives for low-overhead graphics APIs including AMD's Mantle for AMD graphics cards, Apple's Metal for iOS and macOS and Khronos Group's cross-platform Vulkan.\n\nMultiadapter support will feature in DirectX 12 allowing developers to utilize multiple GPUs on a system simultaneously, multi-GPU support was previously dependent on vendor implementations such as AMD CrossFireX or NVIDIA SLI.\nImplicit Multiadapter support will work in a similar manner to previous versions of DirectX where frames are rendered alternately across linked GPUs of similar compute-power.\nExplicit Multiadapter will provide two distinct API patterns to developers. Linked GPUs will allow DirectX to view graphics cards in SLI or CrossFireX as a single GPU and use the combined resources. Whereas Unlinked GPUs will allow GPUs from different vendors to be utilized by DirectX, such as supplementing the dedicated GPU with the integrated GPU on the CPU, or combining AMD and NVIDIA cards. However, elaborate mixed multi-GPU setups requires significantly more attentive developer support.\n\nDirectX 12 is supported on all Fermi and later Nvidia GPUs, on AMD's GCN-based chips and on Intel's Haswell and later processors' graphics units.\n\nAt SIGGRAPH 2014, Intel released a demo showing a computer generated asteroid field, in which DirectX 12 was claimed to be 50%-70% more efficient than DirectX 11 in rendering speed and CPU power consumption.\n\nAshes of the Singularity was the first publicly available game to utilize DirectX 12. Testing by Ars Technica in August 2015 revealed slight performance regressions in DirectX 12 over DirectX 11 mode for the Nvidia GeForce 980 Ti, whereas the AMD Radeon R9 290x achieved consistent performance improvements of up to 70% under DirectX 12, in some scenarios the AMD outperformed the more powerful Nvidia under DirectX 12. The performance discrepancies may be due to poor Nvidia driver optimizations for DirectX 12, or even hardware limitations of the card which was optimized for DirectX 11 serial execution, however the exact cause remains unclear.\n\nRelease history\n\nThe version number as reported by Microsoft's DxDiag tool (version 4.09.0000.0900 and higher) use the x.xx.xxxx.xxxx format for version numbers. However, the DirectX and Windows XP MSDN page claims that the registry always has been in the x.xx.xx.xxxx format. Put another way, when the above table lists a version as '4.09.00.0904' Microsoft's DxDiag tool may have it as '4.09.0000.0904'.[http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/directx9_c_Dec_2004/directx/directxsdk/dxandxp.asp DirectX and Windows XP]\n\nCompatibility\n\nVarious releases of Windows have included and supported various versions of DirectX, allowing newer versions of the operating system to continue running applications designed for earlier versions of DirectX until those versions can be gradually phased out in favor of newer APIs, drivers, and hardware.\n\nAPIs such as Direct3D and DirectSound need to interact with hardware, and they do this through a device driver.  Hardware manufacturers have to write these drivers for a particular DirectX version's device driver interface (or DDI), and test each individual piece of hardware to make them DirectX compatible. Some hardware devices have only DirectX compatible drivers (in other words, one must install DirectX in order to use that hardware). Early versions of DirectX included an up-to-date library of all of the DirectX compatible drivers currently available. This practice was stopped however, in favor of the web-based Windows Update driver-update system, which allowed users to download only the drivers relevant to their hardware, rather than the entire library.\n\nPrior to DirectX 10, DirectX runtime was designed to be backward compatible with older drivers, meaning that newer versions of the APIs were designed to interoperate with older drivers written against a previous version's DDI. The application programmer had to query the available hardware capabilities using a complex system of \"cap bits\" each tied to a particular hardware feature. Direct3D 7 and earlier would work on any version of the DDI, Direct3D 8 requires a minimum DDI level of 6 and Direct3D 9 requires a minimum DDI level of 7.\nHowever, the Direct3D 10 runtime in Windows Vista cannot run on older hardware drivers due to the significantly updated DDI, which requires a unified feature set and abandons the use of \"cap bits\".\n\nDirect3D 10.1 introduces \"feature levels\" 10_0 and 10_1, which allow use of only the hardware features defined in the specified version of Direct3D API. Direct3D 11 adds level 11_0 and \"10 Level 9\" - a subset of the Direct3D 10 API designed to run on Direct3D 9 hardware, which has three feature levels (9_1, 9_2 and 9_3) grouped by common capabilities of \"low\", \"med\" and \"high-end\" video cards; the runtime directly uses Direct3D 9 DDI provided in all WDDM drivers. Feature level 11_1 has been introduced with Direct3D 11.1.\n\n.NET Framework\n\nIn 2002, Microsoft released a version of DirectX compatible with the Microsoft .NET Framework, thus allowing programmers to take advantage of DirectX functionality from within .NET applications using compatible languages such as managed C++ or the use of the C# programming language. This API was known as \"Managed DirectX\" (or MDX for short), and claimed to operate at 98% of performance of the underlying native DirectX APIs. In December 2005, February 2006, April 2006, and August 2006, Microsoft released successive updates to this library, culminating in a beta version called Managed DirectX 2.0. While Managed DirectX 2.0 consolidated functionality that had previously been scattered over multiple assemblies into a single assembly, thus simplifying dependencies on it for software developers, development on this version has subsequently been discontinued, and it is no longer supported. The Managed DirectX 2.0 library expired on October 5, 2006.\n\nDuring the GDC 2006, Microsoft presented the XNA Framework, a new managed version of DirectX (similar but not identical to Managed DirectX) that is intended to assist development of games by making it easier to integrate DirectX, High-Level Shader Language (HLSL) and other tools in one package. It also supports the execution of managed code on the Xbox 360. The XNA Game Studio Express RTM was made available on December 11, 2006, as a free download for Windows XP. Unlike the DirectX runtime, Managed DirectX, XNA Framework or the Xbox 360 APIs (XInput, XACT etc.) have not shipped as part of Windows. Developers are expected to redistribute the runtime components along with their games or applications.\n\nNo Microsoft product including the latest XNA releases provides DirectX 10 support for the .NET Framework.\n\nThe other approach for DirectX in managed languages is to use third-party libraries like:\n\n* SlimDX, an open source library for DirectX programming on the .NET Framework\n* SharpDX, which is an open source project delivering the full DirectX API for .NET on all Windows platforms, allowing the development of high performance game, 2D and 3D graphics rendering as well as real-time sound applications \n* [http://sourceforge.net/projects/directshownet DirectShow.NET] for the DirectShow subset\n* [http://code.msdn.microsoft.com/WindowsAPICodePack Windows API CodePack for .NET Framework], which is an open source library from Microsoft.\n\nAlternatives\n\nThere are alternatives to the DirectX family of APIs, with OpenGL, its successor Vulkan, Metal and Mantle having the most features comparable to Direct3D. Examples of other APIs include SDL, Allegro, OpenMAX, OpenML, OpenAL, OpenCL, FMOD, SFML etc. Many of these libraries are cross-platform or have open codebases. There are also alternative implementations that aim to provide the same API, such as the one in Wine. Furthermore, the developers of ReactOS are trying to reimplement DirectX under the name \"ReactX\". DirectX. http://en.wikipedia.org/?curid=8506."
  }
}
