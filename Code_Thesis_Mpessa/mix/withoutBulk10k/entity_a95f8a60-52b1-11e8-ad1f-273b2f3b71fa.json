{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=1063",
  "eid" : "a95f8a60-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778363910,
  "textBody" : "Algorithms for calculating variance play a major role in computational statistics. A key difficulty in the design of good algorithms for this problem is that formulas for the variance may involve sums of squares, which can lead to numerical instability as well as to arithmetic overflow when dealing with large values.\n\nNaïve algorithm\n\nA formula for calculating the variance of an entire population of size N is:\n\n\\sigma^2 \\bar{(x^2)} - \\bar x^2 \n \\displaystyle\\frac {\\sum_{i1}^N x_i^2 - (\\sum_{i\n1}^N x_i)^2/N}{N}. \\!\n\nUsing Bessel's correction to calculate an unbiased estimate of the population variance from a finite sample of n observations, the formula is:\n\ns^2 \\displaystyle\\frac {\\sum_{i\n1}^n x_i^2 - (\\sum_{i=1}^n x_i)^2/n}{n-1}. \\!\n\nTherefore, a naive algorithm to calculate the estimated variance is given by the following:\n\n* Let \n* For each datum :\n** \n** \n** \n* \n\nThis algorithm can easily be adapted to compute the variance of a finite population: simply divide by N instead of n − 1 on the last line.\n\nBecause  and  can be very similar numbers, cancellation can lead to the precision of the result to be much less than the inherent precision of the floating-point arithmetic used to perform the computation.  Thus this algorithm should not be used in practice. This is particularly bad if the standard deviation is small relative to the mean. However, the algorithm can be improved by adopting the method of the assumed mean.\n\nComputing shifted data\n\nWe can use a property of the variance to avoid the catastrophic cancellation in this formula,\nnamely the variance is invariant with respect to changes in a location parameter\n\n\\operatorname{Var}(X-K)=\\operatorname{Var}(X).\n\nwith K any constant, which leads to the new formula\n\ns^2 \\displaystyle\\frac {\\sum_{i\n1}^n (x_i-K)^2 - (\\sum_{i=1}^n (x_i-K))^2/n}{n-1}. \\!\n\nthe closer K is to the mean value the more accurate the result will be, but just choosing a value inside the\nsamples range will guarantee the desired stability. If the values (x_i - K) are small then there are no problems with the sum of its squares, on the contrary, if they are large it necessarily means that the variance is large as well. In any case the second term in the formula is always smaller than the first one therefore no cancellation may occur.\n\nIf we take just the first sample as K the algorithm can be written in Python programming language as\n\ndef shifted_data_variance(data):\n   if len(data) \nthis formula facilitates as well the incremental computation, that can be expressed as\n\nK n \n Ex Ex2 \n 0.0\n\ndef add_variable(x):\n    if (n \n 0):\n      K = x\n    n = n + 1\n    Ex += x - K\n    Ex2 += (x - K) * (x - K)\n\ndef remove_variable(x):\n    n = n - 1\n    Ex -= (x - K)\n    Ex2 -= (x - K) * (x - K)\n\ndef get_meanvalue():\n    return K + Ex / n\n\ndef get_variance():\n    return (Ex2 - (Ex*Ex)/n) / (n-1)\n\nTwo-pass algorithm\n\nAn alternative approach, using a different formula for the variance, first computes the sample mean,\n\\bar x \\displaystyle \\frac {\\sum_{j\n1}^n x_j}{n},\nand then computes the sum of the squares of the differences from the mean,\n\\mathrm{variance} s^2 \n \\displaystyle\\frac {\\sum_{i=1}^n (x_i - \\bar x)^2}{n-1} \\!,\nwhere s is the standard deviation.  This is given by the following pseudocode:\n\ndef two_pass_variance(data):\n    n sum1 \n sum2 = 0\n\n    for x in data:\n        n += 1\n        sum1 += x\n\n    mean = sum1 / n\n\n    for x in data:\n        sum2 += (x - mean)*(x - mean)\n\n    variance = sum2 / (n - 1)\n    return variance\n\nThis algorithm is numerically stable if n is small. However, the results of both of these simple algorithms (\"Naïve\" and \"Two-pass\") can depend inordinately on the ordering of the data and can give poor results for very large data sets due to repeated roundoff error in the accumulation of the sums. Techniques such as compensated summation can be used to combat this error to a degree.\n\nOnline algorithm\n\nIt is often useful to be able to compute the variance in a single pass, inspecting each value x_i only once; for example, when the data are being collected without enough storage to keep all the values, or when costs of memory access dominate those of computation.  For such an online algorithm, a recurrence relation is required between quantities from which the required statistics can be calculated in a numerically stable fashion.\n\nThe following formulas can be used to update the mean and (estimated) variance of the sequence, for an additional element xn. Here, n denotes the sample mean of the first n samples (x1, ..., xn), s2n their sample variance, and σ2n their population variance.\n\n\\bar x_n \\frac{(n-1) \\, \\bar x_{n-1} + x_n}{n} \n \\bar x_{n-1} + \\frac{x_n - \\bar x_{n-1}}{n} \\!\n\ns^2_n = \\frac{(n-2)}{(n-1)} \\, s^2_{n-1} + \\frac{(x_n - \\bar x_{n-1})^2}{n}, \\quad n>1 \n\n\\sigma^2_n = \\frac{(n-1) \\, \\sigma^2_{n-1} + (x_n - \\bar x_{n-1})(x_n - \\bar x_{n})}{n}.\n\nThese formulas suffer from numerical instability, as we are repeatedly subtracting a small number from a big number which scales with n. A better quantity for updating is the sum of squares of differences from the current mean, \\textstyle\\sum_{i=1}^n (x_i - \\bar x_n)^2, here denoted M_{2,n}:\n\nM_{2,n}\\! = M_{2,n-1} + (x_n - \\bar x_{n-1})(x_n - \\bar x_n)\ns^2_n = \\frac{M_{2,n}}{n-1}\n\\sigma^2_n = \\frac{M_{2,n}}{n}\n\nA numerically stable algorithm for the sample variance is given below.  It also computes the mean.\nThis algorithm was found by Welford,B. P. Welford (1962).[https://www.jstor.org/stable/1266577 \"Note on a method for calculating corrected sums of squares and products\"]. Technometrics 4(3):419–420.Donald E. Knuth (1998). The Art of Computer Programming, volume 2: Seminumerical Algorithms, 3rd edn., p. 232. Boston: Addison-Wesley. and it has been thoroughly analyzed.Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for Computing the Sample Variance: Analysis and Recommendations. The American Statistician 37, 242-247. https://www.jstor.org/stable/2683386Ling, Robert F. (1974). Comparison of Several Algorithms for Computing Sample Means and Variances. Journal of the American Statistical Association, Vol. 69, No. 348, 859-866.  It is also common to denote M_k \\bar x_k and S_k \n M_{2,k}.http://www.johndcook.com/standard_deviation.html\n\n# for a new value newValue, compute the new count, new mean, the new M2.\n# mean accumulates the mean of the entire dataset\n# M2 aggregates the squared distance from the mean\n# count aggregates the number of samples seen so far\ndef update(existingAggregate, newValue):\n    (count, mean, M2) = existingAggregate\n    count = count + 1 \n    delta = newValue - mean\n    mean = mean + delta / count\n    delta2 = newValue - mean\n    M2 = M2 + delta * delta2\n\n    return (count, mean, M2)\n\n# retrieve the mean and variance from an aggregate\ndef finalize(existingAggregate):\n    (count, mean, M2) = existingAggregate\n    (mean, variance) = (mean, M2/(count - 1)) \n    if count \n\nThis algorithm is much less prone to loss of precision due to catastrophic cancellation, but might not be as efficient because of the division operation inside the loop.  For a particularly robust two-pass algorithm for computing the variance, one can first compute and subtract an estimate of the mean, and then use this algorithm on the residuals.\n\nThe parallel algorithm below illustrates how to merge multiple sets of statistics calculated online.\n\nWeighted incremental algorithm\n\nThe algorithm can be extended to handle unequal sample weights, replacing the simple counter n with the sum of weights seen so far.  West (1979)D. H. D. West (1979). Communications of the ACM, 22, 9, 532-535: Updating Mean and Variance Estimates: An Improved Method suggests this incremental algorithm:\n\ndef weighted_incremental_variance(dataWeightPairs):\n    wSum wSum2 \n mean S \n 0\n\n   update(existingAggregate, newValue):\n    (count, mean, M2) = existingAggregate\n    count = count + 1 \n    delta = newValue - mean\n    mean = mean + delta / count\n    delta2 = newValue - mean\n    M2 = M2 + delta * delta2\n\n    return existingAggregate\n    population_variance = S / wSum\n    # Bessel's correction for weighted samples\n    # Frequency weights\n    sample_frequency_variance = S / (wSum - 1)\n    # Reliability weights\n    sample_reliability_variance = S / (wSum - wSum2/wSum)\n\nParallel algorithm\n\nChan et al.. note that the above \"On-line\" algorithm is a special case of an algorithm that works for any partition of the sample X into sets X_A, X_B:\n\\delta\\! = \\bar x_B - \\bar x_A\n\\bar x_X = \\bar x_A + \\delta\\cdot\\frac{n_B}{n_X}\nM_{2,X} = M_{2,A} + M_{2,B} + \\delta^2\\cdot\\frac{n_A n_B}{n_X}.\nThis may be useful when, for example, multiple processing units may be assigned to discrete parts of the input.\n\nChan's method for estimating the mean is numerically unstable when n_A \\approx n_B and both are large, because the numerical error in \\bar x_B - \\bar x_A is not scaled down in the way that it is in the n_B 1 case. In such cases, prefer \\bar x_X \n \\frac{n_A \\bar x_A + n_B \\bar x_B}{n_A + n_B}.\ndef parallel_variance(avg_a, count_a, var_a, avg_b, count_b, var_b):\n    delta = avg_b - avg_a\n    m_a = var_a * (count_a - 1)\n    m_b = var_b * (count_b - 1)\n    M2 = m_a + m_b + delta ** 2 * count_a * count_b / (count_a + count_b)\n    return M2 / (count_a + count_b - 1)\n\nExample\n\nAssume that all floating point operations use standard IEEE 754 double-precision arithmetic. Consider the sample (4, 7, 13, 16) from an infinite population. Based on this sample, the estimated population mean is 10, and the unbiased estimate of population variance is 30.  Both the naïve algorithm and two-pass algorithm compute these values correctly.\n\nNext consider the sample (, , , ), which gives rise to the same estimated variance as the first sample.  The two-pass algorithm computes this variance estimate correctly, but the naïve algorithm returns 29.333333333333332 instead of 30.\n\nWhile this loss of precision may be tolerable and viewed as a minor flaw of the naïve algorithm, further increasing the offset makes the error catastrophic.  Consider the sample (, , , ).  Again the estimated population variance of 30 is computed correctly by the two-pass algorithm, but the naïve algorithm now computes it as −170.66666666666666.  This is a serious problem with naïve algorithm and is due to catastrophic cancellation in the subtraction of two similar numbers at the final stage of the algorithm.\n\nHigher-order statistics\n\nTerriberry extends Chan's formulae to calculating the third and fourth central moments, needed for example when estimating skewness and kurtosis:\nM_{3,X} = M_{3,A} + M_{3,B} + \\delta^3\\frac{n_A n_B (n_A - n_B)}{n_X^2} + 3\\delta\\frac{n_AM_{2,B} - n_BM_{2,A}}{n_X}\n\\begin{align}\nM_{4,X} = M_{4,A} + M_{4,B} & {} + \\delta^4\\frac{n_A n_B \\left(n_A^2 - n_A n_B + n_B^2\\right)}{n_X^3} \\\\\n                    & {} + 6\\delta^2\\frac{n_A^2 M_{2,B} + n_B^2 M_{2,A}}{n_X^2} + 4\\delta\\frac{n_AM_{3,B} - n_BM_{3,A}}{n_X} \\\\\n\\end{align}\n\nHere the M_k are again the sums of powers of differences from the mean \\Sigma(x - \\overline{x})^k, giving\nskewness: g_1 = \\frac{\\sqrt{n} M_3}{M_2^{3/2}},\nkurtosis: g_2 = \\frac{n M_4}{M_2^2}-3.\n\nFor the incremental case (i.e., B = \\{x\\}), this simplifies to:\n\\delta\\! = x - m\nm' = m + \\frac{\\delta}{n}\nM_2' = M_2 + \\delta^2 \\frac{ n-1}{n}\n\nM_3' = M_3 + \\delta^3 \\frac{ (n - 1) (n - 2)}{n^2} - \\frac{3\\delta M_2}{n}\n\nM_4' = M_4 + \\frac{\\delta^4 (n - 1) (n^2 - 3n + 3)}{n^3} + \\frac{6\\delta^2 M_2}{n^2} - \\frac{4\\delta M_3}{n}\n\nBy preserving the value \\delta / n, only one division operation is needed and the higher-order statistics can thus be calculated for little incremental cost.\n\nAn example of the online algorithm for kurtosis implemented as described is:\n\ndef online_kurtosis(data):\n    n mean \n M2 M3 \n M4 = 0\n\n    for x in data:\n        n1 = n\n        n = n + 1\n        delta = x - mean\n        delta_n = delta / n\n        delta_n2 = delta_n * delta_n\n        term1 = delta * delta_n * n1\n        mean = mean + delta_n\n        M4 = M4 + term1 * delta_n2 * (n*n - 3*n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3\n        M3 = M3 + term1 * delta_n * (n - 2) - 3 * delta_n * M2\n        M2 = M2 + term1\n\n    kurtosis = (n*M4) / (M2*M2) - 3\n    return kurtosis\n\nPébaÿ\nfurther extends these results to arbitrary-order central moments, for the incremental and the pairwise cases, and subsequently Pébaÿ et al.\nfor weighted and compound moments. One can also find there similar formulas for covariance.\n\nChoi and Sweetman\n\noffer two alternative methods to compute the skewness and kurtosis, each of which can save substantial computer memory requirements and CPU time in certain applications. The first approach is to compute the statistical moments by separating the data into bins and then computing the moments from the geometry of the resulting histogram, which effectively becomes a one-pass algorithm for higher moments. One benefit is that the statistical moment calculations can be carried out to arbitrary accuracy such that the computations can be tuned to the precision of, e.g., the data storage format or the original measurement hardware.  A relative histogram of a random variable can be constructed in\nthe conventional way: the range of potential values is\ndivided into bins and the number of occurrences within each bin are\ncounted and plotted such that the area of each rectangle equals\nthe portion of the sample values within that bin:\n\n H(x_k)=\\frac{h(x_k)}{A}\n\nwhere h(x_k) and H(x_k) represent the frequency and\nthe relative frequency at bin x_k and A\\sum_{k\n1}^{K} h(x_k)\n\\,\\Delta x_k is the total area of the histogram. After this\nnormalization, the n raw moments and central moments of x(t)\ncan be calculated from the relative histogram:\n\n m_n^{(h)} \\sum_{k\n1}^{K}  x_k^n \\, H(x_k) \\Delta x_k\n            \\frac{1}{A} \\sum_{k\n1}^{K}  x_k^n \\, h(x_k) \\Delta x_k\n\n \\theta_n^{(h)}\\sum_{k\n1}^{K} \\Big(x_k-m_1^{(h)}\\Big)^n \\, H(x_k)\\Delta x_k\n               \\frac{1}{A} \\sum_{k\n1}^{K} \\Big(x_k-m_1^{(h)}\\Big)^n \\, h(x_k) \\Delta x_k\n\nwhere the superscript ^{(h)} indicates the moments are\ncalculated from the histogram. For constant bin width \\Delta\nx_k\\Delta x these two expressions can be simplified using I\n A/\\Delta x:\n\n m_n^{(h)}\\frac{1}{I} {\\sum_{k\n1}^{K} x_k^n \\, h(x_k)}\n\n \\theta_n^{(h)}\\frac{1}{I}{\\sum_{k\n1}^{K} \\Big(x_k-m_1^{(h)}\\Big)^n \\, h(x_k)}\n\nThe second approach from Choi and Sweetman\n\nis an analytical methodology to combine statistical moments from individual segments of a time-history such that the resulting overall moments are those of the complete time-history. This methodology could be used for parallel computation of statistical moments with subsequent combination of those moments, or for combination of statistical moments computed at sequential times.\n\nIf Q sets of statistical moments are known:\n(\\gamma_{0,q},\\mu_{q},\\sigma^2_{q},\\alpha_{3,q},\\alpha_{4,q})\n\\quad  for q=1,2,\\ldots,Q , then each \\gamma_n can\nbe expressed in terms of the equivalent n raw moments:\n\n\\gamma_{n,q}m_{n,q} \\gamma_{0,q} \\qquad \\quad \\textrm{for} \\quad n\n1,2,3,4  \\quad \\text{ and } \\quad q = 1,2, \\dots ,Q\n\nwhere \\gamma_{0,q} is generally taken to be the duration of the q^{th} time-history, or the number of points if \\Delta t is constant.\n\nThe benefit of expressing the statistical moments in terms of \\gamma is that the Q sets can be combined by addition, and there is no upper limit on the value of Q.\n\n \\gamma_{n,c}\\sum_{q\n1}^Q \\gamma_{n,q} \\quad \\quad \\textrm{for} \\quad n=0,1,2,3,4\n\nwhere the subscript _c represents the concatenated time-history or combined \\gamma. These combined values of \\gamma can then be inversely transformed into raw moments representing the complete concatenated time-history\n\n m_{n,c}\\frac{\\gamma_{n,c}}{\\gamma_{0,c}} \\quad \\textrm{for} \\quad n\n1,2,3,4\n\nKnown relationships between the raw moments (m_n) and the central moments  ( \\theta_n = E[(x-\\mu)^n]))\nare then used to compute the central moments of the concatenated time-history.  Finally, the statistical moments of the concatenated history are computed from the central moments:\n\n \\mu_c=m_{1,c}\n \\qquad \\sigma^2_c=\\theta_{2,c}\n \\qquad \\alpha_{3,c}=\\frac{\\theta_{3,c}}{\\sigma_c^3}\n \\qquad \\alpha_{4,c}={\\frac{\\theta_{4,c}}{\\sigma_c^4}}-3\n\nCovariance\n\nVery similar algorithms can be used to compute the covariance.  \n\nNaïve algorithm\n\nThe naïve algorithm is:\n\\operatorname{Cov}(X,Y) \\displaystyle\\frac {\\sum_{i\n1}^n x_i y_i - (\\sum_{i1}^n x_i)(\\sum_{i\n1}^n y_i)/n}{n}. \\!\n\nFor the algorithm above, one could use the following Python code:\n\ndef naive_covariance(data1, data2):\n    n = len(data1)\n    sum12 = 0\n    sum1 = sum(data1)\n    sum2 = sum(data2)\n\n    for i1, i2 in zip(data1, data2):\n        sum12 += i1*i2\n\n    covariance = (sum12 - sum1*sum2 / n) / n\n    return covariance\n\nWith estimate of the mean\n\nAs for the variance, the covariance of two random variables is also shift-invariant, so given that  k_x and k_y are whatever two constant values it can be written:\n\n\\operatorname{Cov}(X,Y) \\operatorname{Cov}(X-k_x,Y-k_y) \n \\displaystyle\\frac {\\sum_{i1}^n (x_i-k_x) (y_i-k_y) - (\\sum_{i\n1}^n (x_i-K_x))(\\sum_{i=1}^n (y_i-K_y))/n}{n}. \\!\n\nand again choosing a value inside the range of values will stabilize the formula against catastrophic cancellation as well as make it more robust against big sums. Taking the first value of each data set, the algorithm can be written as:\n\ndef shifted_data_covariance(dataX, dataY):\n   n = len(dataX)\n   if (n \n\nTwo-pass\n\nThe two-pass algorithm first computes the sample means, and then the covariance:\n\\bar x \\displaystyle \\sum_{i\n1}^n x_i/n\n\\bar y \\displaystyle \\sum_{i\n1}^n y_i/n\n\\operatorname{Cov}(X,Y) \\displaystyle\\frac {\\sum_{i\n1}^n (x_i - \\bar x)(y_i - \\bar y)}{n}. \\!\n\nThe two-pass algorithm may be written as:\n\ndef two_pass_covariance(data1, data2):\n    n = len(data1)\n\n    mean1 = sum(data1) / n\n    mean2 = sum(data2) / n\n\n    covariance = 0\n\n    for i1, i2 in zip(data1, data2):\n        a = i1 - mean1\n        b = i2 - mean2\n        covariance += a*b / n\n    return covariance\n\nA slightly more accurate compensated version performs the full naive algorithm on the residuals.  The final sums \\textstyle\\sum x_i and \\textstyle\\sum y_i should be zero, but the second pass compensates for any small error.\n\nOnline\n\nA stable one-pass algorithm exists, similar to the online algorithm for computing the variance, that computes co-moment \\textstyle C_n \\sum_{i\n1}^n (x_i - \\bar x_n)(y_i - \\bar y_n):\n\\begin{alignat}{2}\n\\bar x_n &= \\bar x_{n-1} &\\,+\\,& \\frac{x_n - \\bar x_{n-1}}{n} \\\\\n\\bar y_n &= \\bar y_{n-1} &\\,+\\,& \\frac{y_n - \\bar y_{n-1}}{n} \\\\\nC_n      &= C_{n-1}      &\\,+\\,& (x_n - \\bar x_n)(y_n - \\bar y_{n-1}) \\\\\n         &= C_{n-1}      &\\,+\\,& (x_n - \\bar x_{n-1})(y_n - \\bar y_n) \\\\\n\\end{alignat}\nThe apparent asymmetry in that last equation is due to the fact that \\textstyle (x_n - \\bar x_n) = \\frac{n-1}{n}(x_n - \\bar x_{n-1}), so both update terms are equal to \\textstyle \\frac{n-1}{n}(x_n - \\bar x_{n-1})(y_n - \\bar y_{n-1}).  Even greater accuracy can be achieved by first computing the means, then using the stable one-pass algorithm on the residuals.\n\nThus we can compute the covariance as\n\\begin{align}\n\\operatorname{Cov}_N(X,Y) \\frac{C_N}{N} &\n \\frac{\\operatorname{Cov}_{N-1}(X,Y)\\cdot(N-1) + (x_n - \\bar x_n)(y_n - \\bar y_{n-1})}{N}\\\\\n   &= \\frac{\\operatorname{Cov}_{N-1}(X,Y)\\cdot(N-1) + (y_n - \\bar y_n)(x_n - \\bar x_{n-1})}{N}\\\\\n   &= \\frac{\\operatorname{Cov}_{N-1}(X,Y)\\cdot(N-1) + \\frac{N-1}{N}(x_n - \\bar x_{n-1})(y_n - \\bar y_{n-1})}{N}.\n\\end{align}\n\ndef online_covariance(data1, data2):\n    meanx meany \n C n \n 0\n    for x, y in zip(data1, data2):\n        n += 1\n        dx = x - meanx\n        meanx += dx / n\n        meany += (y - meany) / n\n        C += dx * (y - meany)\n\n    population_covar = C / n\n    # Bessel's correction for sample variance\n    sample_covar = C / (n - 1)\n\nWe can also make a small modification to compute the weighted covariance:\n\ndef online_weighted_covariance(data1, data2, data3):\n    meanx meany \n 0\n    wsum wsum2 \n 0\n    C = 0\n    for x, y, w in zip(data1, data2, data3):\n        wsum += w\n        wsum2 += w*w\n        dx = x - meanx\n        meanx += (w / wsum) * dx\n        meany += (w / wsum) * (y - meany)\n        C += w * dx * (y - meany)\n\n    population_covar = C / wsum\n    # Bessel's correction for sample variance\n    # Frequency weights\n    sample_frequency_covar = C / (wsum - 1)\n    # Reliability weights\n    sample_reliability_covar = C / (wsum - wsum2 / wsum)\n\nLikewise, there is a formula for combining the covariances of two sets that can be used to parallelize the computation:\nC_X = C_A + C_B + (\\bar x_A - \\bar x_B)(\\bar y_A - \\bar y_B)\\cdot\\frac{n_A n_B}{n_X}.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Algorithms for calculating variance" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=1063" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "Algorithms for calculating variance play a major role in computational statistics. A key difficulty in the design of good algorithms for this problem is that formulas for the variance may involve sums of squares, which can lead to numerical instability as well as to arithmetic overflow when dealing with large values.\n\nNaïve algorithm\n\nA formula for calculating the variance of an entire population of size N is:\n\n\\sigma^2 \\bar{(x^2)} - \\bar x^2 \n \\displaystyle\\frac {\\sum_{i1}^N x_i^2 - (\\sum_{i\n1}^N x_i)^2/N}{N}. \\!\n\nUsing Bessel's correction to calculate an unbiased estimate of the population variance from a finite sample of n observations, the formula is:\n\ns^2 \\displaystyle\\frac {\\sum_{i\n1}^n x_i^2 - (\\sum_{i=1}^n x_i)^2/n}{n-1}. \\!\n\nTherefore, a naive algorithm to calculate the estimated variance is given by the following:\n\n* Let \n* For each datum :\n** \n** \n** \n* \n\nThis algorithm can easily be adapted to compute the variance of a finite population: simply divide by N instead of n − 1 on the last line.\n\nBecause  and  can be very similar numbers, cancellation can lead to the precision of the result to be much less than the inherent precision of the floating-point arithmetic used to perform the computation.  Thus this algorithm should not be used in practice. This is particularly bad if the standard deviation is small relative to the mean. However, the algorithm can be improved by adopting the method of the assumed mean.\n\nComputing shifted data\n\nWe can use a property of the variance to avoid the catastrophic cancellation in this formula,\nnamely the variance is invariant with respect to changes in a location parameter\n\n\\operatorname{Var}(X-K)=\\operatorname{Var}(X).\n\nwith K any constant, which leads to the new formula\n\ns^2 \\displaystyle\\frac {\\sum_{i\n1}^n (x_i-K)^2 - (\\sum_{i=1}^n (x_i-K))^2/n}{n-1}. \\!\n\nthe closer K is to the mean value the more accurate the result will be, but just choosing a value inside the\nsamples range will guarantee the desired stability. If the values (x_i - K) are small then there are no problems with the sum of its squares, on the contrary, if they are large it necessarily means that the variance is large as well. In any case the second term in the formula is always smaller than the first one therefore no cancellation may occur.\n\nIf we take just the first sample as K the algorithm can be written in Python programming language as\n\ndef shifted_data_variance(data):\n   if len(data) \nthis formula facilitates as well the incremental computation, that can be expressed as\n\nK n \n Ex Ex2 \n 0.0\n\ndef add_variable(x):\n    if (n \n 0):\n      K = x\n    n = n + 1\n    Ex += x - K\n    Ex2 += (x - K) * (x - K)\n\ndef remove_variable(x):\n    n = n - 1\n    Ex -= (x - K)\n    Ex2 -= (x - K) * (x - K)\n\ndef get_meanvalue():\n    return K + Ex / n\n\ndef get_variance():\n    return (Ex2 - (Ex*Ex)/n) / (n-1)\n\nTwo-pass algorithm\n\nAn alternative approach, using a different formula for the variance, first computes the sample mean,\n\\bar x \\displaystyle \\frac {\\sum_{j\n1}^n x_j}{n},\nand then computes the sum of the squares of the differences from the mean,\n\\mathrm{variance} s^2 \n \\displaystyle\\frac {\\sum_{i=1}^n (x_i - \\bar x)^2}{n-1} \\!,\nwhere s is the standard deviation.  This is given by the following pseudocode:\n\ndef two_pass_variance(data):\n    n sum1 \n sum2 = 0\n\n    for x in data:\n        n += 1\n        sum1 += x\n\n    mean = sum1 / n\n\n    for x in data:\n        sum2 += (x - mean)*(x - mean)\n\n    variance = sum2 / (n - 1)\n    return variance\n\nThis algorithm is numerically stable if n is small. However, the results of both of these simple algorithms (\"Naïve\" and \"Two-pass\") can depend inordinately on the ordering of the data and can give poor results for very large data sets due to repeated roundoff error in the accumulation of the sums. Techniques such as compensated summation can be used to combat this error to a degree.\n\nOnline algorithm\n\nIt is often useful to be able to compute the variance in a single pass, inspecting each value x_i only once; for example, when the data are being collected without enough storage to keep all the values, or when costs of memory access dominate those of computation.  For such an online algorithm, a recurrence relation is required between quantities from which the required statistics can be calculated in a numerically stable fashion.\n\nThe following formulas can be used to update the mean and (estimated) variance of the sequence, for an additional element xn. Here, n denotes the sample mean of the first n samples (x1, ..., xn), s2n their sample variance, and σ2n their population variance.\n\n\\bar x_n \\frac{(n-1) \\, \\bar x_{n-1} + x_n}{n} \n \\bar x_{n-1} + \\frac{x_n - \\bar x_{n-1}}{n} \\!\n\ns^2_n = \\frac{(n-2)}{(n-1)} \\, s^2_{n-1} + \\frac{(x_n - \\bar x_{n-1})^2}{n}, \\quad n>1 \n\n\\sigma^2_n = \\frac{(n-1) \\, \\sigma^2_{n-1} + (x_n - \\bar x_{n-1})(x_n - \\bar x_{n})}{n}.\n\nThese formulas suffer from numerical instability, as we are repeatedly subtracting a small number from a big number which scales with n. A better quantity for updating is the sum of squares of differences from the current mean, \\textstyle\\sum_{i=1}^n (x_i - \\bar x_n)^2, here denoted M_{2,n}:\n\nM_{2,n}\\! = M_{2,n-1} + (x_n - \\bar x_{n-1})(x_n - \\bar x_n)\ns^2_n = \\frac{M_{2,n}}{n-1}\n\\sigma^2_n = \\frac{M_{2,n}}{n}\n\nA numerically stable algorithm for the sample variance is given below.  It also computes the mean.\nThis algorithm was found by Welford,B. P. Welford (1962).[https://www.jstor.org/stable/1266577 \"Note on a method for calculating corrected sums of squares and products\"]. Technometrics 4(3):419–420.Donald E. Knuth (1998). The Art of Computer Programming, volume 2: Seminumerical Algorithms, 3rd edn., p. 232. Boston: Addison-Wesley. and it has been thoroughly analyzed.Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for Computing the Sample Variance: Analysis and Recommendations. The American Statistician 37, 242-247. https://www.jstor.org/stable/2683386Ling, Robert F. (1974). Comparison of Several Algorithms for Computing Sample Means and Variances. Journal of the American Statistical Association, Vol. 69, No. 348, 859-866.  It is also common to denote M_k \\bar x_k and S_k \n M_{2,k}.http://www.johndcook.com/standard_deviation.html\n\n# for a new value newValue, compute the new count, new mean, the new M2.\n# mean accumulates the mean of the entire dataset\n# M2 aggregates the squared distance from the mean\n# count aggregates the number of samples seen so far\ndef update(existingAggregate, newValue):\n    (count, mean, M2) = existingAggregate\n    count = count + 1 \n    delta = newValue - mean\n    mean = mean + delta / count\n    delta2 = newValue - mean\n    M2 = M2 + delta * delta2\n\n    return (count, mean, M2)\n\n# retrieve the mean and variance from an aggregate\ndef finalize(existingAggregate):\n    (count, mean, M2) = existingAggregate\n    (mean, variance) = (mean, M2/(count - 1)) \n    if count \n\nThis algorithm is much less prone to loss of precision due to catastrophic cancellation, but might not be as efficient because of the division operation inside the loop.  For a particularly robust two-pass algorithm for computing the variance, one can first compute and subtract an estimate of the mean, and then use this algorithm on the residuals.\n\nThe parallel algorithm below illustrates how to merge multiple sets of statistics calculated online.\n\nWeighted incremental algorithm\n\nThe algorithm can be extended to handle unequal sample weights, replacing the simple counter n with the sum of weights seen so far.  West (1979)D. H. D. West (1979). Communications of the ACM, 22, 9, 532-535: Updating Mean and Variance Estimates: An Improved Method suggests this incremental algorithm:\n\ndef weighted_incremental_variance(dataWeightPairs):\n    wSum wSum2 \n mean S \n 0\n\n   update(existingAggregate, newValue):\n    (count, mean, M2) = existingAggregate\n    count = count + 1 \n    delta = newValue - mean\n    mean = mean + delta / count\n    delta2 = newValue - mean\n    M2 = M2 + delta * delta2\n\n    return existingAggregate\n    population_variance = S / wSum\n    # Bessel's correction for weighted samples\n    # Frequency weights\n    sample_frequency_variance = S / (wSum - 1)\n    # Reliability weights\n    sample_reliability_variance = S / (wSum - wSum2/wSum)\n\nParallel algorithm\n\nChan et al.. note that the above \"On-line\" algorithm is a special case of an algorithm that works for any partition of the sample X into sets X_A, X_B:\n\\delta\\! = \\bar x_B - \\bar x_A\n\\bar x_X = \\bar x_A + \\delta\\cdot\\frac{n_B}{n_X}\nM_{2,X} = M_{2,A} + M_{2,B} + \\delta^2\\cdot\\frac{n_A n_B}{n_X}.\nThis may be useful when, for example, multiple processing units may be assigned to discrete parts of the input.\n\nChan's method for estimating the mean is numerically unstable when n_A \\approx n_B and both are large, because the numerical error in \\bar x_B - \\bar x_A is not scaled down in the way that it is in the n_B 1 case. In such cases, prefer \\bar x_X \n \\frac{n_A \\bar x_A + n_B \\bar x_B}{n_A + n_B}.\ndef parallel_variance(avg_a, count_a, var_a, avg_b, count_b, var_b):\n    delta = avg_b - avg_a\n    m_a = var_a * (count_a - 1)\n    m_b = var_b * (count_b - 1)\n    M2 = m_a + m_b + delta ** 2 * count_a * count_b / (count_a + count_b)\n    return M2 / (count_a + count_b - 1)\n\nExample\n\nAssume that all floating point operations use standard IEEE 754 double-precision arithmetic. Consider the sample (4, 7, 13, 16) from an infinite population. Based on this sample, the estimated population mean is 10, and the unbiased estimate of population variance is 30.  Both the naïve algorithm and two-pass algorithm compute these values correctly.\n\nNext consider the sample (, , , ), which gives rise to the same estimated variance as the first sample.  The two-pass algorithm computes this variance estimate correctly, but the naïve algorithm returns 29.333333333333332 instead of 30.\n\nWhile this loss of precision may be tolerable and viewed as a minor flaw of the naïve algorithm, further increasing the offset makes the error catastrophic.  Consider the sample (, , , ).  Again the estimated population variance of 30 is computed correctly by the two-pass algorithm, but the naïve algorithm now computes it as −170.66666666666666.  This is a serious problem with naïve algorithm and is due to catastrophic cancellation in the subtraction of two similar numbers at the final stage of the algorithm.\n\nHigher-order statistics\n\nTerriberry extends Chan's formulae to calculating the third and fourth central moments, needed for example when estimating skewness and kurtosis:\nM_{3,X} = M_{3,A} + M_{3,B} + \\delta^3\\frac{n_A n_B (n_A - n_B)}{n_X^2} + 3\\delta\\frac{n_AM_{2,B} - n_BM_{2,A}}{n_X}\n\\begin{align}\nM_{4,X} = M_{4,A} + M_{4,B} & {} + \\delta^4\\frac{n_A n_B \\left(n_A^2 - n_A n_B + n_B^2\\right)}{n_X^3} \\\\\n                    & {} + 6\\delta^2\\frac{n_A^2 M_{2,B} + n_B^2 M_{2,A}}{n_X^2} + 4\\delta\\frac{n_AM_{3,B} - n_BM_{3,A}}{n_X} \\\\\n\\end{align}\n\nHere the M_k are again the sums of powers of differences from the mean \\Sigma(x - \\overline{x})^k, giving\nskewness: g_1 = \\frac{\\sqrt{n} M_3}{M_2^{3/2}},\nkurtosis: g_2 = \\frac{n M_4}{M_2^2}-3.\n\nFor the incremental case (i.e., B = \\{x\\}), this simplifies to:\n\\delta\\! = x - m\nm' = m + \\frac{\\delta}{n}\nM_2' = M_2 + \\delta^2 \\frac{ n-1}{n}\n\nM_3' = M_3 + \\delta^3 \\frac{ (n - 1) (n - 2)}{n^2} - \\frac{3\\delta M_2}{n}\n\nM_4' = M_4 + \\frac{\\delta^4 (n - 1) (n^2 - 3n + 3)}{n^3} + \\frac{6\\delta^2 M_2}{n^2} - \\frac{4\\delta M_3}{n}\n\nBy preserving the value \\delta / n, only one division operation is needed and the higher-order statistics can thus be calculated for little incremental cost.\n\nAn example of the online algorithm for kurtosis implemented as described is:\n\ndef online_kurtosis(data):\n    n mean \n M2 M3 \n M4 = 0\n\n    for x in data:\n        n1 = n\n        n = n + 1\n        delta = x - mean\n        delta_n = delta / n\n        delta_n2 = delta_n * delta_n\n        term1 = delta * delta_n * n1\n        mean = mean + delta_n\n        M4 = M4 + term1 * delta_n2 * (n*n - 3*n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3\n        M3 = M3 + term1 * delta_n * (n - 2) - 3 * delta_n * M2\n        M2 = M2 + term1\n\n    kurtosis = (n*M4) / (M2*M2) - 3\n    return kurtosis\n\nPébaÿ\nfurther extends these results to arbitrary-order central moments, for the incremental and the pairwise cases, and subsequently Pébaÿ et al.\nfor weighted and compound moments. One can also find there similar formulas for covariance.\n\nChoi and Sweetman\n\noffer two alternative methods to compute the skewness and kurtosis, each of which can save substantial computer memory requirements and CPU time in certain applications. The first approach is to compute the statistical moments by separating the data into bins and then computing the moments from the geometry of the resulting histogram, which effectively becomes a one-pass algorithm for higher moments. One benefit is that the statistical moment calculations can be carried out to arbitrary accuracy such that the computations can be tuned to the precision of, e.g., the data storage format or the original measurement hardware.  A relative histogram of a random variable can be constructed in\nthe conventional way: the range of potential values is\ndivided into bins and the number of occurrences within each bin are\ncounted and plotted such that the area of each rectangle equals\nthe portion of the sample values within that bin:\n\n H(x_k)=\\frac{h(x_k)}{A}\n\nwhere h(x_k) and H(x_k) represent the frequency and\nthe relative frequency at bin x_k and A\\sum_{k\n1}^{K} h(x_k)\n\\,\\Delta x_k is the total area of the histogram. After this\nnormalization, the n raw moments and central moments of x(t)\ncan be calculated from the relative histogram:\n\n m_n^{(h)} \\sum_{k\n1}^{K}  x_k^n \\, H(x_k) \\Delta x_k\n            \\frac{1}{A} \\sum_{k\n1}^{K}  x_k^n \\, h(x_k) \\Delta x_k\n\n \\theta_n^{(h)}\\sum_{k\n1}^{K} \\Big(x_k-m_1^{(h)}\\Big)^n \\, H(x_k)\\Delta x_k\n               \\frac{1}{A} \\sum_{k\n1}^{K} \\Big(x_k-m_1^{(h)}\\Big)^n \\, h(x_k) \\Delta x_k\n\nwhere the superscript ^{(h)} indicates the moments are\ncalculated from the histogram. For constant bin width \\Delta\nx_k\\Delta x these two expressions can be simplified using I\n A/\\Delta x:\n\n m_n^{(h)}\\frac{1}{I} {\\sum_{k\n1}^{K} x_k^n \\, h(x_k)}\n\n \\theta_n^{(h)}\\frac{1}{I}{\\sum_{k\n1}^{K} \\Big(x_k-m_1^{(h)}\\Big)^n \\, h(x_k)}\n\nThe second approach from Choi and Sweetman\n\nis an analytical methodology to combine statistical moments from individual segments of a time-history such that the resulting overall moments are those of the complete time-history. This methodology could be used for parallel computation of statistical moments with subsequent combination of those moments, or for combination of statistical moments computed at sequential times.\n\nIf Q sets of statistical moments are known:\n(\\gamma_{0,q},\\mu_{q},\\sigma^2_{q},\\alpha_{3,q},\\alpha_{4,q})\n\\quad  for q=1,2,\\ldots,Q , then each \\gamma_n can\nbe expressed in terms of the equivalent n raw moments:\n\n\\gamma_{n,q}m_{n,q} \\gamma_{0,q} \\qquad \\quad \\textrm{for} \\quad n\n1,2,3,4  \\quad \\text{ and } \\quad q = 1,2, \\dots ,Q\n\nwhere \\gamma_{0,q} is generally taken to be the duration of the q^{th} time-history, or the number of points if \\Delta t is constant.\n\nThe benefit of expressing the statistical moments in terms of \\gamma is that the Q sets can be combined by addition, and there is no upper limit on the value of Q.\n\n \\gamma_{n,c}\\sum_{q\n1}^Q \\gamma_{n,q} \\quad \\quad \\textrm{for} \\quad n=0,1,2,3,4\n\nwhere the subscript _c represents the concatenated time-history or combined \\gamma. These combined values of \\gamma can then be inversely transformed into raw moments representing the complete concatenated time-history\n\n m_{n,c}\\frac{\\gamma_{n,c}}{\\gamma_{0,c}} \\quad \\textrm{for} \\quad n\n1,2,3,4\n\nKnown relationships between the raw moments (m_n) and the central moments  ( \\theta_n = E[(x-\\mu)^n]))\nare then used to compute the central moments of the concatenated time-history.  Finally, the statistical moments of the concatenated history are computed from the central moments:\n\n \\mu_c=m_{1,c}\n \\qquad \\sigma^2_c=\\theta_{2,c}\n \\qquad \\alpha_{3,c}=\\frac{\\theta_{3,c}}{\\sigma_c^3}\n \\qquad \\alpha_{4,c}={\\frac{\\theta_{4,c}}{\\sigma_c^4}}-3\n\nCovariance\n\nVery similar algorithms can be used to compute the covariance.  \n\nNaïve algorithm\n\nThe naïve algorithm is:\n\\operatorname{Cov}(X,Y) \\displaystyle\\frac {\\sum_{i\n1}^n x_i y_i - (\\sum_{i1}^n x_i)(\\sum_{i\n1}^n y_i)/n}{n}. \\!\n\nFor the algorithm above, one could use the following Python code:\n\ndef naive_covariance(data1, data2):\n    n = len(data1)\n    sum12 = 0\n    sum1 = sum(data1)\n    sum2 = sum(data2)\n\n    for i1, i2 in zip(data1, data2):\n        sum12 += i1*i2\n\n    covariance = (sum12 - sum1*sum2 / n) / n\n    return covariance\n\nWith estimate of the mean\n\nAs for the variance, the covariance of two random variables is also shift-invariant, so given that  k_x and k_y are whatever two constant values it can be written:\n\n\\operatorname{Cov}(X,Y) \\operatorname{Cov}(X-k_x,Y-k_y) \n \\displaystyle\\frac {\\sum_{i1}^n (x_i-k_x) (y_i-k_y) - (\\sum_{i\n1}^n (x_i-K_x))(\\sum_{i=1}^n (y_i-K_y))/n}{n}. \\!\n\nand again choosing a value inside the range of values will stabilize the formula against catastrophic cancellation as well as make it more robust against big sums. Taking the first value of each data set, the algorithm can be written as:\n\ndef shifted_data_covariance(dataX, dataY):\n   n = len(dataX)\n   if (n \n\nTwo-pass\n\nThe two-pass algorithm first computes the sample means, and then the covariance:\n\\bar x \\displaystyle \\sum_{i\n1}^n x_i/n\n\\bar y \\displaystyle \\sum_{i\n1}^n y_i/n\n\\operatorname{Cov}(X,Y) \\displaystyle\\frac {\\sum_{i\n1}^n (x_i - \\bar x)(y_i - \\bar y)}{n}. \\!\n\nThe two-pass algorithm may be written as:\n\ndef two_pass_covariance(data1, data2):\n    n = len(data1)\n\n    mean1 = sum(data1) / n\n    mean2 = sum(data2) / n\n\n    covariance = 0\n\n    for i1, i2 in zip(data1, data2):\n        a = i1 - mean1\n        b = i2 - mean2\n        covariance += a*b / n\n    return covariance\n\nA slightly more accurate compensated version performs the full naive algorithm on the residuals.  The final sums \\textstyle\\sum x_i and \\textstyle\\sum y_i should be zero, but the second pass compensates for any small error.\n\nOnline\n\nA stable one-pass algorithm exists, similar to the online algorithm for computing the variance, that computes co-moment \\textstyle C_n \\sum_{i\n1}^n (x_i - \\bar x_n)(y_i - \\bar y_n):\n\\begin{alignat}{2}\n\\bar x_n &= \\bar x_{n-1} &\\,+\\,& \\frac{x_n - \\bar x_{n-1}}{n} \\\\\n\\bar y_n &= \\bar y_{n-1} &\\,+\\,& \\frac{y_n - \\bar y_{n-1}}{n} \\\\\nC_n      &= C_{n-1}      &\\,+\\,& (x_n - \\bar x_n)(y_n - \\bar y_{n-1}) \\\\\n         &= C_{n-1}      &\\,+\\,& (x_n - \\bar x_{n-1})(y_n - \\bar y_n) \\\\\n\\end{alignat}\nThe apparent asymmetry in that last equation is due to the fact that \\textstyle (x_n - \\bar x_n) = \\frac{n-1}{n}(x_n - \\bar x_{n-1}), so both update terms are equal to \\textstyle \\frac{n-1}{n}(x_n - \\bar x_{n-1})(y_n - \\bar y_{n-1}).  Even greater accuracy can be achieved by first computing the means, then using the stable one-pass algorithm on the residuals.\n\nThus we can compute the covariance as\n\\begin{align}\n\\operatorname{Cov}_N(X,Y) \\frac{C_N}{N} &\n \\frac{\\operatorname{Cov}_{N-1}(X,Y)\\cdot(N-1) + (x_n - \\bar x_n)(y_n - \\bar y_{n-1})}{N}\\\\\n   &= \\frac{\\operatorname{Cov}_{N-1}(X,Y)\\cdot(N-1) + (y_n - \\bar y_n)(x_n - \\bar x_{n-1})}{N}\\\\\n   &= \\frac{\\operatorname{Cov}_{N-1}(X,Y)\\cdot(N-1) + \\frac{N-1}{N}(x_n - \\bar x_{n-1})(y_n - \\bar y_{n-1})}{N}.\n\\end{align}\n\ndef online_covariance(data1, data2):\n    meanx meany \n C n \n 0\n    for x, y in zip(data1, data2):\n        n += 1\n        dx = x - meanx\n        meanx += dx / n\n        meany += (y - meany) / n\n        C += dx * (y - meany)\n\n    population_covar = C / n\n    # Bessel's correction for sample variance\n    sample_covar = C / (n - 1)\n\nWe can also make a small modification to compute the weighted covariance:\n\ndef online_weighted_covariance(data1, data2, data3):\n    meanx meany \n 0\n    wsum wsum2 \n 0\n    C = 0\n    for x, y, w in zip(data1, data2, data3):\n        wsum += w\n        wsum2 += w*w\n        dx = x - meanx\n        meanx += (w / wsum) * dx\n        meany += (w / wsum) * (y - meany)\n        C += w * dx * (y - meany)\n\n    population_covar = C / wsum\n    # Bessel's correction for sample variance\n    # Frequency weights\n    sample_frequency_covar = C / (wsum - 1)\n    # Reliability weights\n    sample_reliability_covar = C / (wsum - wsum2 / wsum)\n\nLikewise, there is a formula for combining the covariances of two sets that can be used to parallelize the computation:\nC_X = C_A + C_B + (\\bar x_A - \\bar x_B)(\\bar y_A - \\bar y_B)\\cdot\\frac{n_A n_B}{n_X}. Algorithms for calculating variance. http://en.wikipedia.org/?curid=1063."
  }
}
