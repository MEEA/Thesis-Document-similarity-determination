{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=12727",
  "eid" : "046563d0-52b2-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778516621,
  "textBody" : "The proof of Gödel's completeness theorem given by Kurt Gödel in his doctoral dissertation of 1929 (and a rewritten version of the dissertation, published as an article in 1930) is not easy to read today; it uses concepts and formalism that are no longer used and terminology that is often obscure. The version given below attempts to represent all the steps in the proof and all the important ideas faithfully, while restating the proof in the modern language of mathematical logic. This outline should not be considered a rigorous proof of the theorem.\n\nAssumptions \n\nWe work with first-order predicate calculus. Our languages allow constant, function and relation symbols. Structures consist of (non-empty) domains and interpretations of the relevant symbols as constant members, functions or relations over that domain.\n\nWe assume classical logic (as opposed to intuitionistic logic for example).\n\nWe fix some axiomatization (i.e. a syntax-based, machine-manageable proof system) of the predicate calculus: logical axioms and rules of inference. Any of the several well-known equivalent axiomatizations will do. Gödel's original proof assumed the Hilbert-Ackermann proof system.\n\nWe assume without proof all the basic well-known results about our formalism that we need, such as the normal form theorem or the soundness theorem.\n\nWe axiomatize predicate calculus without equality (sometimes confusingly called without identity), i.e. there are no special axioms expressing the properties of (object) equality as a special relation symbol. After the basic form of the theorem has been proved, it will be easy to extend it to the case of predicate calculus with equality.\n\nStatement of the theorem and its proof\n\nIn the following, we state two equivalent forms of the theorem, and show their equivalence.\n\nLater, we prove the theorem. This is done in the following steps:\n\n# Reducing the theorem to sentences (formulas with no free variables) in prenex form, i.e. with all quantifiers ( and ) at the beginning. Furthermore, we reduce it to formulas whose first quantifier is . This is possible because for every sentence, there is an equivalent one in prenex form whose first quantifier is .\n# Reducing the theorem to sentences of the form . While we cannot do this by simply rearranging the quantifiers, we show that it is yet enough to prove the theorem for sentences of that form.\n# Finally we prove the theorem for sentences of that form.\n#* This is done by first noting that a sentence such as  is either refutable (its negation is always true) or satisfiable, i.e. there is some model in which it holds (it might even be always true, i.e. a tautology); this model is simply assigning truth values to the subpropositions from which B is built.  The reason for that is the completeness of propositional logic, with the existential quantifiers playing no role.\n#* We extend this result to more and more complex and lengthy sentences, Dn (n=1,2...), built out from B, so that either any of them is refutable and therefore so is φ, or all of them are not refutable and therefore each holds in some model.\n#* We finally use the models in which the Dn hold (in case all are not refutable) in order to build a model in which φ holds.\n\nTheorem 1. Every valid formula (true in all structures) is provable.\n\nThis is the most basic form of the completeness theorem. We immediately restate it in a form more convenient for our purposes:\nWhen we say \"all structures\", it is important to specify that the structures involved are classical (Tarskian) interpretations I, where I= (U is a non-empty (possibly infinite) set of objects, whereas F is a set of functions from expressions of the interpreted symbolism into U). [By contrast, so-called \"free logics\" countenance possibly empty sets for U. For more regarding free logics, see the work of Karel Lambert.]\n\nTheorem 2. Every formula φ is either refutable or satisfiable in some structure.\n\n\"φ is refutable\" means by definition \"¬φ is provable\".\n\nEquivalence of both theorems\n\nTo see the equivalence, note first that if Theorem 1 holds, and φ is not satisfiable in any structure, then ¬φ is valid in all structures and therefore provable, thus φ is refutable and Theorem 2 holds. If on the other hand Theorem 2 holds and φ is valid in all structures, then ¬φ is not satisfiable in any structure and therefore refutable; then ¬¬φ is provable and then so is φ, thus Theorem 1 holds.\n\nProof of theorem 2: first step\n\nWe approach the proof of Theorem 2 by successively restricting the class of all formulas φ for which we need to prove \"φ is either refutable or satisfiable\". At the beginning we need to prove this for all possible formulas φ in our language. However, suppose that for every formula φ there is some formula ψ taken from a more restricted class of formulas C, such that \"ψ is either refutable or satisfiable\" → \"φ is either refutable or satisfiable\". Then, once this claim (expressed in the previous sentence) is proved, it will suffice to prove \"φ is either refutable or satisfiable\" only for φ's belonging to the class C. Note also that if φ is provably equivalent to ψ (i.e., (φ≡ψ) is provable), then it is indeed the case that \"ψ is either refutable or satisfiable\"  → \"φ is either refutable or satisfiable\" (the soundness theorem is needed to show this).\n\nThere are standard techniques for rewriting an arbitrary formula into one that does not use function or constant symbols, at the cost of introducing additional quantifiers; we will therefore assume that all formulas are free of such symbols. Gödel's paper uses a version of first-order predicate calculus that has no function or constant symbols to begin with.\n\nNext we consider a generic formula φ (which no longer uses function or constant symbols) and apply the prenex form theorem to find a formula ψ in normal form such that φ≡ψ (ψ being in normal form means that all the quantifiers in ψ, if there are any, are found at the very beginning of ψ). It follows now that we need only prove Theorem 2 for formulas φ in normal form.\n\nNext, we eliminate all free variables from φ by quantifying them existentially: if, say, x1...xn are free in φ, we form \\psi\\exists x_1 ... \\exists x_n \\phi. If ψ is satisfiable in a structure M, then certainly so is φ and if ψ is refutable, then \\neg \\psi \n \\forall x_1 ... \\forall x_n \\neg \\phi is provable, and then so is ¬φ, thus φ is refutable. We see that we can restrict φ to be a sentence, that is, a formula with no free variables.\n\nFinally, we would like, for reasons of technical convenience, that the prefix of φ (that is, the string of quantifiers at the beginning of φ, which is in normal form)  begin with a universal quantifier and end with an existential quantifier. To achieve this for a generic φ (subject to restrictions we have already proved), we take some one-place relation symbol F unused in φ, and two new variables y and z.. If φ (P)Φ, where (P) stands for the prefix of φ and Φ for the matrix (the remaining, quantifier-free part of φ) we form \\psi \n \\forall y (P) \\exists z ( \\Phi \\wedge [ F(y) \\vee \\neg F(z) ] ). Since \\forall y \\exists z ( F(y) \\vee \\neg F(z) ) is clearly provable, it is easy to see that \\phi=\\psi is provable.\n\nReducing the theorem to formulas of degree 1\n\nOur generic formula φ now is a sentence, in normal form, and its prefix starts with a universal quantifier and ends with an existential quantifier. Let us call the class of all such formulas R. We are faced with proving that every formula in R is either refutable or satisfiable. Given our formula φ, we group strings of quantifiers of one kind together in blocks:\n\n\\phi = (\\forall x_1 ... \\forall x_{k_1})(\\exists x_{k_1+1} ... \\exists x_{k_2}).......(\\forall x_{k_{n-2}+1} ... \\forall x_{k_{n-1}})(\\exists x_{k_{n-1}+1} ... \\exists x_{k_n}) (\\Phi)\n\nWe define the degree of \\phi to be the number of universal quantifier blocks, separated by existential quantifier blocks as shown above, in the prefix of \\phi. The following lemma, which Gödel adapted from Skolem's proof of the Löwenheim–Skolem theorem, lets us sharply reduce the complexity of the generic formula \\phi we need to prove the theorem for:\n\nLemma. Let k>=1. If every formula in R of degree k is either refutable or satisfiable, then so is every formula in R of degree k+1.\n\nComment: Take a formula φ of degree k+1 of the form \\phi = (\\forall x)(\\exists y)(\\forall u)(\\exist v) (P) \\psi, where (P)\\psi is the remainder of \\phi (it is thus of degree k-1). φ states that for every x there is a y such that... (something). It would have been nice to have a predicate Q'  so that for every x, Q'(x,y) would be true if and only if y is the required one to make (something) true. Then we could have written a formula of degree k, which is equivalent to φ, namely (\\forall x')(\\forall x)(\\forall y)(\\forall u)(\\exist v)(\\exist y') (P) Q'(x',y') \\wedge (Q'(x,y) \\rightarrow \\psi). This formula is indeed equivalent to φ because it states that for every x, if there is a y thatsatisfies Q'(x,y), then (something) holds, and furthermore, we know that there is such a y, because for every x', there is a y' that satisfies Q'(x',y'). Therefore φ follows from this formula. It is also easy to show that if the formula is false, then so is φ. Unfortunately, in general there is no such predicate Q'. However, this idea can be understood as a basis for the following proof of the Lemma.\n\nProof. Let φ be a formula of degree k+1; then we can write it as\n\n\\phi = (\\forall x)(\\exists y)(\\forall u)(\\exist v) (P) \\psi\n\nwhere (P) is the remainder of the prefix of \\phi (it is thus of degree k-1) and \\psi is the quantifier-free matrix of \\phi. x, y, u and v denote here tuples of variables rather than single variables; e.g. (\\forall x) really stands for  \\forall x_1 \\forall x_2 ... \\forall x_n where x_1 ... x_n are some distinct variables.\n\nLet now x' and y' be tuples of previously unused variables of the same length as x and y respectively, and let Q be a previously unused relation symbol that takes as many arguments as the sum of lengths of x and y; we consider the formula\n\n\\Phi = (\\forall x')(\\exists y') Q(x',y') \\wedge (\\forall x)(\\forall y)( Q(x,y) \\rightarrow (\\forall u)(\\exist v)(P)\\psi )\n\nClearly, \\Phi \\rightarrow \\phi is provable.\n\nNow since the string of quantifiers (\\forall u)(\\exists v)(P) does not contain variables from x or y, the following equivalence is easily provable with the help of whatever formalism we're using:\n\n( Q(x,y) \\rightarrow (\\forall u )(\\exists v)(P) \\psi) \\equiv (\\forall u)(\\exists v)(P) ( Q(x,y) \\rightarrow \\psi )\n\nAnd since these two formulas are equivalent, if we replace the first with the second inside Φ, we obtain the formula Φ' such that Φ≡Φ':\n\n\\Phi' = (\\forall x')(\\exist y') Q(x',y') \\wedge (\\forall x)(\\forall y) (\\forall u)(\\exists v)(P) ( Q(x,y) \\rightarrow \\psi )\n\nNow Φ' has the form (S)\\rho \\wedge (S')\\rho', where (S) and (S') are some quantifier strings, ρ and ρ' are quantifier-free, and, furthermore, no variable of (S) occurs in ρ' and no variable of (S') occurs in ρ. Under such conditions every formula of the form (T)(\\rho \\wedge \\rho'), where (T) is a string of quantifiers containing all quantifiers in (S) and (S') interleaved among themselves in any fashion, but maintaining the relative order inside (S) and (S'), will be equivalent to the original formula Φ'(this is yet another basic result in first-order predicate calculus that we rely on). To wit, we form Ψ as follows:\n\\Psi = (\\forall x')(\\forall x)(\\forall y) (\\forall u)(\\exists y')(\\exists v)(P)Q(x',y') \\wedge (Q(x,y) \\rightarrow \\psi )\n\nand we have \\Phi' \\equiv \\Psi.\n\nNow \\Psi is a formula of degree k and therefore by assumption either refutable or satisfiable.\nIf \\Psi is satisfiable in a structure M, then, considering \\Psi \\equiv \\Phi' \\equiv \\Phi \\wedge \\Phi \\rightarrow \\phi, we see that \\phi is satisfiable as well.\nIf \\Psi is refutable, then so is \\Phi, which is equivalent to it; thus \\neg \\Phi is provable.\nNow we can replace all occurrences of Q inside the provable formula \\neg \\Phi by some other formula dependent on the same variables, and we will still get a provable formula.\n(This is yet another basic result of first-order predicate calculus. Depending on the particular formalism adopted for the calculus, it may be seen as a simple application of a \"functional substitution\" rule of inference, as in Gödel's paper, or it may be proved by considering the formal proof of \\neg \\Phi, replacing in it all occurrences of Q by some other formula with the same free variables, and noting that all logical axioms in the formal proof remain logical axioms after the substitution, and all rules of inference still apply in the same way.)\n\nIn this particular case, we replace Q(x',y') in \\neg \\Phi with the formula (\\forall u)(\\exists v)(P)\\psi(x,y|x',y'). Here (x,y|x',y') means that instead of ψ we are writing a different formula, in which x and y are replaced with x' and y'. Note that Q(x,y) is simply replaced by (\\forall u)(\\exists v)(P)\\psi.\n\n\\neg \\Phi then becomes\n\n\\neg ( (\\forall x')(\\exists y') (\\forall u)(\\exists v)(P)\\psi(x,y|x',y') \\wedge (\\forall x)(\\forall y) ( (\\forall u)(\\exists v)(P)\\psi \\rightarrow (\\forall u)(\\exists v)(P) \\psi ) )\n\nand this formula is provable; since the part under negation and after the \\wedge sign is obviously provable, and the part under negation and before the \\wedge sign is obviously φ, just with x and y replaced by x' and y', we see that \\neg \\phi is provable, and φ is refutable. We have proved that φ is either satisfiable or refutable, and this concludes the proof of the Lemma.\n\nNotice that we could not have used (\\forall u)(\\exists v)(P)\\psi(x,y|x',y') instead of Q(x',y') from the beginning, because \\Psi would not have been a well-formed formula in that case. This is why we cannot naively use the argument appearing at the comment that precedes the proof.\n\nProving the theorem for formulas of degree 1\n\nAs shown by the Lemma above, we only need to prove our theorem for formulas φ in R of degree 1. φ cannot be of degree 0, since formulas in R have no free variables and don't use constant symbols. So the formula φ has the general form:\n\n (\\forall x_1...x_k)(\\exists y_1...y_m) \\phi(x_1...x_k, y_1...y_m).\n\nNow we define an ordering of the k-tuples of natural numbers as follows:  (x_1...x_k)  should hold if either  \\Sigma_k (x_1...x_k) , or  \\Sigma_k (x_1...x_k) = \\Sigma_k (y_1...y_k) , and   (x_1...x_k)  precedes  (y_1...y_k)  in lexicographic order. [Here  \\Sigma_k (x_1...x_k)  denotes the sum of the terms of the tuple.] Denote the nth tuple in this order by  (a^n_1...a^n_k) .\n\nSet the formula  B_n  as  \\phi(z_{a^n_1}...z_{a^n_k}, z_{(n-1)m+2}, z_{(n-1)m+3}...z_{nm+1}) . Then put D_n as \n (\\exists z_1...z_{nm+1}) (B_1 \\wedge B_2 ... \\wedge B_n).\n\nLemma: For every n, φ \\rightarrow D_n.\n\nProof: By induction on n; we have  D_k \\Leftarrow D_{k-1} \\wedge (\\forall z_1...z_{(n-1)m+1})(\\exists z_{(n-1)m+2}...z_{nm+1}) B_n \\Leftarrow D_{k-1} \\wedge (\\forall z_{a^n_1}...z_{a^n_k})(\\exists y_1...y_m) \\phi(z_{a^n_1}...z_{a^n_k}, y_1...y_m) , where the latter implication holds by variable substitution, since the ordering of the tuples is such that (\\forall k)({a^n_1}...{a^n_k}) . But the last formula is equivalent to  D_{k-1} \\wedge φ.\n\nFor the base case,  D_1 \\equiv (\\exists z_1...z_{m+1}) \\phi(z_{a^1_1}...z_{a^1_k}, z_2, z_3...z_{m+1}) \\equiv (\\exists z_1...z_{m+1}) \\phi(z_1...z_1, z_2, z_3...z_{m+1})  is obviously a corollary of φ as well. So the Lemma is proven.\n\nNow if  D_n  is refutable for some n, it follows that φ is refutable. On the other hand, suppose that  D_n  is not refutable for any n. Then for each n there is some way of assigning truth values to the distinct subpropositions E_h (ordered by their first appearance in D_n; \"distinct\" here means either distinct predicates, or distinct bound variables) in  B_k , such that  D_n  will be true when each proposition is evaluated in this fashion. This follows from the completeness of the underlying propositional logic.\n\nWe will now show that there is such an assignment of truth values to E_h, so that all D_n will be true: The E_h appear in the same order in every  D_n ; we will inductively define a general assignment to them by a sort of \"majority vote\": Since there are infinitely many assignments (one for each  D_n ) affecting E_1, either infinitely many make E_1 true, or infinitely many make it false and only finitely many make it true. In the former case, we choose E_1 to be true in general; in the latter we take it to be false in general. Then from the infinitely many n for which E_1 through E_{h-1} are assigned the same truth value as in the general assignment, we pick a general assignment to E_h in the same fashion.\n\nThis general assignment must lead to every one of the B_k and D_k being true, since if one of the B_k were false under the general assignment, D_n would also be false for every n > k. But this contradicts the fact that for the finite collection of general E_h assignments appearing in D_k, there are infinitely many n where the assignment making D_n true matches the general assignment.\n\nFrom this general assignment, which makes all of the D_k true, we construct an interpretation of the language's predicates that makes φ true. The universe of the model will be the natural numbers. Each i-ary predicate \\Psi should be true of the naturals (u_1...u_i) precisely when the proposition \\Psi(z_{u_1}...z_{u_i}) is either true in the general assignment, or not assigned by it (because it never appears in any of the D_k).\n\nIn this model, each of the formulas  (\\exists y_1...y_m) \\phi(a^n_1...a^n_k, y_1...y_m)  is true by construction. But this implies that φ itself is true in the model, since the a^n range over all possible k-tuples of natural numbers. So φ is satisfiable, and we are done.\n\nIntuitive explanation\n\nWe may write each Bi as Φ(x1...xk,y1...ym) for some x-s, which we may call \"first arguments\" and y-s that we may call \"last arguments\".\n\nTake B1 for example. Its \"last arguments\" are z2,z3...zm+1, and for every possible combination of k of these variables there is some j so that they appear as \"first arguments\" in Bj. Thus for large enough n1, Dn1 has the property that the \"last arguments\" of B1 appear, in every possible combinations of k of them, as \"first arguments\" in other Bj-s within Dn. For every Bi there is a Dni with the corresponding property.\n\nTherefore in a model that satisfies all the Dn-s, there are objects corresponding to z1, z2... and each combination of k of these appear as \"first arguments\" in some Bj, meaning that for every k of these objects zp1...zpk there are zq1...zqm, which makes Φ(zp1...zpk,zq1...zqm) satisfied. By taking a submodel with only these z1, z2... objects, we have a model satisfying φ.\n\nExtensions\n\nExtension to first-order predicate calculus with equality\n\nGödel reduced a formula containing instances of the equality predicate to ones without it in an extended language. His method involves replacing a formula φ containing some instances of equality with the formula\n\n (\\forall x) Eq(x, x) \\wedge (\\forall x,y,z) [Eq(x, y) \\rightarrow (Eq(x, z) \\rightarrow Eq(y, z))]   \\wedge (\\forall x,y,z) [Eq(x, y) \\rightarrow (Eq(z, x) \\rightarrow Eq(z, y))]    \\wedge    (\\forall x_1...x_k, y_1...x_k) [(Eq(x_1, y_1) \\wedge ... \\wedge Eq(x_k, y_k)) \\rightarrow (A(x_1...x_k) \\equiv A(y_1...y_k))]    \\wedge  ... \\wedge    (\\forall x_1...x_m, y_1...x_m) [(Eq(x_1, y_1) \\wedge ... \\wedge Eq(x_m, y_m)) \\rightarrow (Z(x_1...x_m) \\equiv Z(y_1...y_m))]    \\wedge    \\varphi'.\n\nHere A ... Z denote the predicates appearing in φ (with k ... m their respective arities), and φ' is the formula φ with all occurrences of equality replaced with the new predicate Eq. If this new formula is refutable, the original φ was as well; the same is true of satisfiability, since we may take a quotient of satisfying model of the new formula by the equivalence relation representing Eq. This quotient is well-defined with respect to the other predicates, and therefore will satisfy the original formula φ.\n\nExtension to countable sets of formulas\n\nGödel also considered the case where there are a countably infinite collection of formulas. Using the same reductions as above, he was able to consider only those cases where each formula is of degree 1 and contains no uses of equality. For a countable collection of formulas  \\phi^i  of degree 1, we may define  B^i_k  as above; then define  D_k  to be the closure of  B^1_1...B^1_k, ..., B^k_1...B^k_k . The remainder of the proof then went through as before.\n\nExtension to arbitrary sets of formulas\n\nWhen there is an uncountably infinite collection of formulas, the Axiom of Choice (or at least some weak form of it) is needed. Using the full AC, one can well-order the formulas, and prove the uncountable case with the same argument as the countable one, except with transfinite induction. Other approaches can be used to prove that the completeness theorem in this case is equivalent to the Boolean prime ideal theorem, a weak form of AC.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Original proof of Gödel's completeness theorem" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=12727" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The proof of Gödel's completeness theorem given by Kurt Gödel in his doctoral dissertation of 1929 (and a rewritten version of the dissertation, published as an article in 1930) is not easy to read today; it uses concepts and formalism that are no longer used and terminology that is often obscure. The version given below attempts to represent all the steps in the proof and all the important ideas faithfully, while restating the proof in the modern language of mathematical logic. This outline should not be considered a rigorous proof of the theorem.\n\nAssumptions \n\nWe work with first-order predicate calculus. Our languages allow constant, function and relation symbols. Structures consist of (non-empty) domains and interpretations of the relevant symbols as constant members, functions or relations over that domain.\n\nWe assume classical logic (as opposed to intuitionistic logic for example).\n\nWe fix some axiomatization (i.e. a syntax-based, machine-manageable proof system) of the predicate calculus: logical axioms and rules of inference. Any of the several well-known equivalent axiomatizations will do. Gödel's original proof assumed the Hilbert-Ackermann proof system.\n\nWe assume without proof all the basic well-known results about our formalism that we need, such as the normal form theorem or the soundness theorem.\n\nWe axiomatize predicate calculus without equality (sometimes confusingly called without identity), i.e. there are no special axioms expressing the properties of (object) equality as a special relation symbol. After the basic form of the theorem has been proved, it will be easy to extend it to the case of predicate calculus with equality.\n\nStatement of the theorem and its proof\n\nIn the following, we state two equivalent forms of the theorem, and show their equivalence.\n\nLater, we prove the theorem. This is done in the following steps:\n\n# Reducing the theorem to sentences (formulas with no free variables) in prenex form, i.e. with all quantifiers ( and ) at the beginning. Furthermore, we reduce it to formulas whose first quantifier is . This is possible because for every sentence, there is an equivalent one in prenex form whose first quantifier is .\n# Reducing the theorem to sentences of the form . While we cannot do this by simply rearranging the quantifiers, we show that it is yet enough to prove the theorem for sentences of that form.\n# Finally we prove the theorem for sentences of that form.\n#* This is done by first noting that a sentence such as  is either refutable (its negation is always true) or satisfiable, i.e. there is some model in which it holds (it might even be always true, i.e. a tautology); this model is simply assigning truth values to the subpropositions from which B is built.  The reason for that is the completeness of propositional logic, with the existential quantifiers playing no role.\n#* We extend this result to more and more complex and lengthy sentences, Dn (n=1,2...), built out from B, so that either any of them is refutable and therefore so is φ, or all of them are not refutable and therefore each holds in some model.\n#* We finally use the models in which the Dn hold (in case all are not refutable) in order to build a model in which φ holds.\n\nTheorem 1. Every valid formula (true in all structures) is provable.\n\nThis is the most basic form of the completeness theorem. We immediately restate it in a form more convenient for our purposes:\nWhen we say \"all structures\", it is important to specify that the structures involved are classical (Tarskian) interpretations I, where I= (U is a non-empty (possibly infinite) set of objects, whereas F is a set of functions from expressions of the interpreted symbolism into U). [By contrast, so-called \"free logics\" countenance possibly empty sets for U. For more regarding free logics, see the work of Karel Lambert.]\n\nTheorem 2. Every formula φ is either refutable or satisfiable in some structure.\n\n\"φ is refutable\" means by definition \"¬φ is provable\".\n\nEquivalence of both theorems\n\nTo see the equivalence, note first that if Theorem 1 holds, and φ is not satisfiable in any structure, then ¬φ is valid in all structures and therefore provable, thus φ is refutable and Theorem 2 holds. If on the other hand Theorem 2 holds and φ is valid in all structures, then ¬φ is not satisfiable in any structure and therefore refutable; then ¬¬φ is provable and then so is φ, thus Theorem 1 holds.\n\nProof of theorem 2: first step\n\nWe approach the proof of Theorem 2 by successively restricting the class of all formulas φ for which we need to prove \"φ is either refutable or satisfiable\". At the beginning we need to prove this for all possible formulas φ in our language. However, suppose that for every formula φ there is some formula ψ taken from a more restricted class of formulas C, such that \"ψ is either refutable or satisfiable\" → \"φ is either refutable or satisfiable\". Then, once this claim (expressed in the previous sentence) is proved, it will suffice to prove \"φ is either refutable or satisfiable\" only for φ's belonging to the class C. Note also that if φ is provably equivalent to ψ (i.e., (φ≡ψ) is provable), then it is indeed the case that \"ψ is either refutable or satisfiable\"  → \"φ is either refutable or satisfiable\" (the soundness theorem is needed to show this).\n\nThere are standard techniques for rewriting an arbitrary formula into one that does not use function or constant symbols, at the cost of introducing additional quantifiers; we will therefore assume that all formulas are free of such symbols. Gödel's paper uses a version of first-order predicate calculus that has no function or constant symbols to begin with.\n\nNext we consider a generic formula φ (which no longer uses function or constant symbols) and apply the prenex form theorem to find a formula ψ in normal form such that φ≡ψ (ψ being in normal form means that all the quantifiers in ψ, if there are any, are found at the very beginning of ψ). It follows now that we need only prove Theorem 2 for formulas φ in normal form.\n\nNext, we eliminate all free variables from φ by quantifying them existentially: if, say, x1...xn are free in φ, we form \\psi\\exists x_1 ... \\exists x_n \\phi. If ψ is satisfiable in a structure M, then certainly so is φ and if ψ is refutable, then \\neg \\psi \n \\forall x_1 ... \\forall x_n \\neg \\phi is provable, and then so is ¬φ, thus φ is refutable. We see that we can restrict φ to be a sentence, that is, a formula with no free variables.\n\nFinally, we would like, for reasons of technical convenience, that the prefix of φ (that is, the string of quantifiers at the beginning of φ, which is in normal form)  begin with a universal quantifier and end with an existential quantifier. To achieve this for a generic φ (subject to restrictions we have already proved), we take some one-place relation symbol F unused in φ, and two new variables y and z.. If φ (P)Φ, where (P) stands for the prefix of φ and Φ for the matrix (the remaining, quantifier-free part of φ) we form \\psi \n \\forall y (P) \\exists z ( \\Phi \\wedge [ F(y) \\vee \\neg F(z) ] ). Since \\forall y \\exists z ( F(y) \\vee \\neg F(z) ) is clearly provable, it is easy to see that \\phi=\\psi is provable.\n\nReducing the theorem to formulas of degree 1\n\nOur generic formula φ now is a sentence, in normal form, and its prefix starts with a universal quantifier and ends with an existential quantifier. Let us call the class of all such formulas R. We are faced with proving that every formula in R is either refutable or satisfiable. Given our formula φ, we group strings of quantifiers of one kind together in blocks:\n\n\\phi = (\\forall x_1 ... \\forall x_{k_1})(\\exists x_{k_1+1} ... \\exists x_{k_2}).......(\\forall x_{k_{n-2}+1} ... \\forall x_{k_{n-1}})(\\exists x_{k_{n-1}+1} ... \\exists x_{k_n}) (\\Phi)\n\nWe define the degree of \\phi to be the number of universal quantifier blocks, separated by existential quantifier blocks as shown above, in the prefix of \\phi. The following lemma, which Gödel adapted from Skolem's proof of the Löwenheim–Skolem theorem, lets us sharply reduce the complexity of the generic formula \\phi we need to prove the theorem for:\n\nLemma. Let k>=1. If every formula in R of degree k is either refutable or satisfiable, then so is every formula in R of degree k+1.\n\nComment: Take a formula φ of degree k+1 of the form \\phi = (\\forall x)(\\exists y)(\\forall u)(\\exist v) (P) \\psi, where (P)\\psi is the remainder of \\phi (it is thus of degree k-1). φ states that for every x there is a y such that... (something). It would have been nice to have a predicate Q'  so that for every x, Q'(x,y) would be true if and only if y is the required one to make (something) true. Then we could have written a formula of degree k, which is equivalent to φ, namely (\\forall x')(\\forall x)(\\forall y)(\\forall u)(\\exist v)(\\exist y') (P) Q'(x',y') \\wedge (Q'(x,y) \\rightarrow \\psi). This formula is indeed equivalent to φ because it states that for every x, if there is a y thatsatisfies Q'(x,y), then (something) holds, and furthermore, we know that there is such a y, because for every x', there is a y' that satisfies Q'(x',y'). Therefore φ follows from this formula. It is also easy to show that if the formula is false, then so is φ. Unfortunately, in general there is no such predicate Q'. However, this idea can be understood as a basis for the following proof of the Lemma.\n\nProof. Let φ be a formula of degree k+1; then we can write it as\n\n\\phi = (\\forall x)(\\exists y)(\\forall u)(\\exist v) (P) \\psi\n\nwhere (P) is the remainder of the prefix of \\phi (it is thus of degree k-1) and \\psi is the quantifier-free matrix of \\phi. x, y, u and v denote here tuples of variables rather than single variables; e.g. (\\forall x) really stands for  \\forall x_1 \\forall x_2 ... \\forall x_n where x_1 ... x_n are some distinct variables.\n\nLet now x' and y' be tuples of previously unused variables of the same length as x and y respectively, and let Q be a previously unused relation symbol that takes as many arguments as the sum of lengths of x and y; we consider the formula\n\n\\Phi = (\\forall x')(\\exists y') Q(x',y') \\wedge (\\forall x)(\\forall y)( Q(x,y) \\rightarrow (\\forall u)(\\exist v)(P)\\psi )\n\nClearly, \\Phi \\rightarrow \\phi is provable.\n\nNow since the string of quantifiers (\\forall u)(\\exists v)(P) does not contain variables from x or y, the following equivalence is easily provable with the help of whatever formalism we're using:\n\n( Q(x,y) \\rightarrow (\\forall u )(\\exists v)(P) \\psi) \\equiv (\\forall u)(\\exists v)(P) ( Q(x,y) \\rightarrow \\psi )\n\nAnd since these two formulas are equivalent, if we replace the first with the second inside Φ, we obtain the formula Φ' such that Φ≡Φ':\n\n\\Phi' = (\\forall x')(\\exist y') Q(x',y') \\wedge (\\forall x)(\\forall y) (\\forall u)(\\exists v)(P) ( Q(x,y) \\rightarrow \\psi )\n\nNow Φ' has the form (S)\\rho \\wedge (S')\\rho', where (S) and (S') are some quantifier strings, ρ and ρ' are quantifier-free, and, furthermore, no variable of (S) occurs in ρ' and no variable of (S') occurs in ρ. Under such conditions every formula of the form (T)(\\rho \\wedge \\rho'), where (T) is a string of quantifiers containing all quantifiers in (S) and (S') interleaved among themselves in any fashion, but maintaining the relative order inside (S) and (S'), will be equivalent to the original formula Φ'(this is yet another basic result in first-order predicate calculus that we rely on). To wit, we form Ψ as follows:\n\\Psi = (\\forall x')(\\forall x)(\\forall y) (\\forall u)(\\exists y')(\\exists v)(P)Q(x',y') \\wedge (Q(x,y) \\rightarrow \\psi )\n\nand we have \\Phi' \\equiv \\Psi.\n\nNow \\Psi is a formula of degree k and therefore by assumption either refutable or satisfiable.\nIf \\Psi is satisfiable in a structure M, then, considering \\Psi \\equiv \\Phi' \\equiv \\Phi \\wedge \\Phi \\rightarrow \\phi, we see that \\phi is satisfiable as well.\nIf \\Psi is refutable, then so is \\Phi, which is equivalent to it; thus \\neg \\Phi is provable.\nNow we can replace all occurrences of Q inside the provable formula \\neg \\Phi by some other formula dependent on the same variables, and we will still get a provable formula.\n(This is yet another basic result of first-order predicate calculus. Depending on the particular formalism adopted for the calculus, it may be seen as a simple application of a \"functional substitution\" rule of inference, as in Gödel's paper, or it may be proved by considering the formal proof of \\neg \\Phi, replacing in it all occurrences of Q by some other formula with the same free variables, and noting that all logical axioms in the formal proof remain logical axioms after the substitution, and all rules of inference still apply in the same way.)\n\nIn this particular case, we replace Q(x',y') in \\neg \\Phi with the formula (\\forall u)(\\exists v)(P)\\psi(x,y|x',y'). Here (x,y|x',y') means that instead of ψ we are writing a different formula, in which x and y are replaced with x' and y'. Note that Q(x,y) is simply replaced by (\\forall u)(\\exists v)(P)\\psi.\n\n\\neg \\Phi then becomes\n\n\\neg ( (\\forall x')(\\exists y') (\\forall u)(\\exists v)(P)\\psi(x,y|x',y') \\wedge (\\forall x)(\\forall y) ( (\\forall u)(\\exists v)(P)\\psi \\rightarrow (\\forall u)(\\exists v)(P) \\psi ) )\n\nand this formula is provable; since the part under negation and after the \\wedge sign is obviously provable, and the part under negation and before the \\wedge sign is obviously φ, just with x and y replaced by x' and y', we see that \\neg \\phi is provable, and φ is refutable. We have proved that φ is either satisfiable or refutable, and this concludes the proof of the Lemma.\n\nNotice that we could not have used (\\forall u)(\\exists v)(P)\\psi(x,y|x',y') instead of Q(x',y') from the beginning, because \\Psi would not have been a well-formed formula in that case. This is why we cannot naively use the argument appearing at the comment that precedes the proof.\n\nProving the theorem for formulas of degree 1\n\nAs shown by the Lemma above, we only need to prove our theorem for formulas φ in R of degree 1. φ cannot be of degree 0, since formulas in R have no free variables and don't use constant symbols. So the formula φ has the general form:\n\n (\\forall x_1...x_k)(\\exists y_1...y_m) \\phi(x_1...x_k, y_1...y_m).\n\nNow we define an ordering of the k-tuples of natural numbers as follows:  (x_1...x_k)  should hold if either  \\Sigma_k (x_1...x_k) , or  \\Sigma_k (x_1...x_k) = \\Sigma_k (y_1...y_k) , and   (x_1...x_k)  precedes  (y_1...y_k)  in lexicographic order. [Here  \\Sigma_k (x_1...x_k)  denotes the sum of the terms of the tuple.] Denote the nth tuple in this order by  (a^n_1...a^n_k) .\n\nSet the formula  B_n  as  \\phi(z_{a^n_1}...z_{a^n_k}, z_{(n-1)m+2}, z_{(n-1)m+3}...z_{nm+1}) . Then put D_n as \n (\\exists z_1...z_{nm+1}) (B_1 \\wedge B_2 ... \\wedge B_n).\n\nLemma: For every n, φ \\rightarrow D_n.\n\nProof: By induction on n; we have  D_k \\Leftarrow D_{k-1} \\wedge (\\forall z_1...z_{(n-1)m+1})(\\exists z_{(n-1)m+2}...z_{nm+1}) B_n \\Leftarrow D_{k-1} \\wedge (\\forall z_{a^n_1}...z_{a^n_k})(\\exists y_1...y_m) \\phi(z_{a^n_1}...z_{a^n_k}, y_1...y_m) , where the latter implication holds by variable substitution, since the ordering of the tuples is such that (\\forall k)({a^n_1}...{a^n_k}) . But the last formula is equivalent to  D_{k-1} \\wedge φ.\n\nFor the base case,  D_1 \\equiv (\\exists z_1...z_{m+1}) \\phi(z_{a^1_1}...z_{a^1_k}, z_2, z_3...z_{m+1}) \\equiv (\\exists z_1...z_{m+1}) \\phi(z_1...z_1, z_2, z_3...z_{m+1})  is obviously a corollary of φ as well. So the Lemma is proven.\n\nNow if  D_n  is refutable for some n, it follows that φ is refutable. On the other hand, suppose that  D_n  is not refutable for any n. Then for each n there is some way of assigning truth values to the distinct subpropositions E_h (ordered by their first appearance in D_n; \"distinct\" here means either distinct predicates, or distinct bound variables) in  B_k , such that  D_n  will be true when each proposition is evaluated in this fashion. This follows from the completeness of the underlying propositional logic.\n\nWe will now show that there is such an assignment of truth values to E_h, so that all D_n will be true: The E_h appear in the same order in every  D_n ; we will inductively define a general assignment to them by a sort of \"majority vote\": Since there are infinitely many assignments (one for each  D_n ) affecting E_1, either infinitely many make E_1 true, or infinitely many make it false and only finitely many make it true. In the former case, we choose E_1 to be true in general; in the latter we take it to be false in general. Then from the infinitely many n for which E_1 through E_{h-1} are assigned the same truth value as in the general assignment, we pick a general assignment to E_h in the same fashion.\n\nThis general assignment must lead to every one of the B_k and D_k being true, since if one of the B_k were false under the general assignment, D_n would also be false for every n > k. But this contradicts the fact that for the finite collection of general E_h assignments appearing in D_k, there are infinitely many n where the assignment making D_n true matches the general assignment.\n\nFrom this general assignment, which makes all of the D_k true, we construct an interpretation of the language's predicates that makes φ true. The universe of the model will be the natural numbers. Each i-ary predicate \\Psi should be true of the naturals (u_1...u_i) precisely when the proposition \\Psi(z_{u_1}...z_{u_i}) is either true in the general assignment, or not assigned by it (because it never appears in any of the D_k).\n\nIn this model, each of the formulas  (\\exists y_1...y_m) \\phi(a^n_1...a^n_k, y_1...y_m)  is true by construction. But this implies that φ itself is true in the model, since the a^n range over all possible k-tuples of natural numbers. So φ is satisfiable, and we are done.\n\nIntuitive explanation\n\nWe may write each Bi as Φ(x1...xk,y1...ym) for some x-s, which we may call \"first arguments\" and y-s that we may call \"last arguments\".\n\nTake B1 for example. Its \"last arguments\" are z2,z3...zm+1, and for every possible combination of k of these variables there is some j so that they appear as \"first arguments\" in Bj. Thus for large enough n1, Dn1 has the property that the \"last arguments\" of B1 appear, in every possible combinations of k of them, as \"first arguments\" in other Bj-s within Dn. For every Bi there is a Dni with the corresponding property.\n\nTherefore in a model that satisfies all the Dn-s, there are objects corresponding to z1, z2... and each combination of k of these appear as \"first arguments\" in some Bj, meaning that for every k of these objects zp1...zpk there are zq1...zqm, which makes Φ(zp1...zpk,zq1...zqm) satisfied. By taking a submodel with only these z1, z2... objects, we have a model satisfying φ.\n\nExtensions\n\nExtension to first-order predicate calculus with equality\n\nGödel reduced a formula containing instances of the equality predicate to ones without it in an extended language. His method involves replacing a formula φ containing some instances of equality with the formula\n\n (\\forall x) Eq(x, x) \\wedge (\\forall x,y,z) [Eq(x, y) \\rightarrow (Eq(x, z) \\rightarrow Eq(y, z))]   \\wedge (\\forall x,y,z) [Eq(x, y) \\rightarrow (Eq(z, x) \\rightarrow Eq(z, y))]    \\wedge    (\\forall x_1...x_k, y_1...x_k) [(Eq(x_1, y_1) \\wedge ... \\wedge Eq(x_k, y_k)) \\rightarrow (A(x_1...x_k) \\equiv A(y_1...y_k))]    \\wedge  ... \\wedge    (\\forall x_1...x_m, y_1...x_m) [(Eq(x_1, y_1) \\wedge ... \\wedge Eq(x_m, y_m)) \\rightarrow (Z(x_1...x_m) \\equiv Z(y_1...y_m))]    \\wedge    \\varphi'.\n\nHere A ... Z denote the predicates appearing in φ (with k ... m their respective arities), and φ' is the formula φ with all occurrences of equality replaced with the new predicate Eq. If this new formula is refutable, the original φ was as well; the same is true of satisfiability, since we may take a quotient of satisfying model of the new formula by the equivalence relation representing Eq. This quotient is well-defined with respect to the other predicates, and therefore will satisfy the original formula φ.\n\nExtension to countable sets of formulas\n\nGödel also considered the case where there are a countably infinite collection of formulas. Using the same reductions as above, he was able to consider only those cases where each formula is of degree 1 and contains no uses of equality. For a countable collection of formulas  \\phi^i  of degree 1, we may define  B^i_k  as above; then define  D_k  to be the closure of  B^1_1...B^1_k, ..., B^k_1...B^k_k . The remainder of the proof then went through as before.\n\nExtension to arbitrary sets of formulas\n\nWhen there is an uncountably infinite collection of formulas, the Axiom of Choice (or at least some weak form of it) is needed. Using the full AC, one can well-order the formulas, and prove the uncountable case with the same argument as the countable one, except with transfinite induction. Other approaches can be used to prove that the completeness theorem in this case is equivalent to the Boolean prime ideal theorem, a weak form of AC. Original proof of Gödel's completeness theorem. http://en.wikipedia.org/?curid=12727."
  }
}
