{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=1635",
  "eid" : "bb0dc150-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778393573,
  "textBody" : "In algorithmic information theory (a subfield of computer science and mathematics), the Kolmogorov complexity of an object, such as a piece of text, is the length of the shortest computer program (in a predetermined programming language) that produces the object as output.\nIt is a measure of the computational resources needed to specify the object, and is also known as descriptive complexity, Kolmogorov–Chaitin complexity, algorithmic entropy, or program-size complexity. It is named after Andrey Kolmogorov, who first published on the subject in 1963.\n\nThe notion of Kolmogorov complexity can be used to state and prove impossibility results akin to Cantor's diagonal argument, Gödel's incompleteness theorem, and Turing's halting problem.\nIn particular, for almost all objects, it is not possible to compute even a lower bound for its Kolmogorov complexity (Chaitin 1964), let alone its exact value.\n\nDefinition\n\nConsider the following two strings of 32 lowercase letters and digits.\n\nExample 1: abababababababababababababababab\nExample 2: 4c1j5b2p0cv4w1x8rx2y39umgw5q85s7\n\nThe first string has a short English-language description, namely \"ab 16 times\", which consists of 11 characters. The second one has no obvious simple description (using the same character set) other than writing down the string itself, which has 32 characters.\n\nMore formally, the complexity of a string is the length of the shortest possible description of the string in some fixed universal description language (the sensitivity of complexity relative to the choice of description language is discussed below). It can be shown that the Kolmogorov complexity of any string cannot be more than a few bytes larger than the length of the string itself. Strings like the abab example above, whose Kolmogorov complexity is small relative to the string's size, are not considered to be complex.\n\nThe Kolmogorov complexity can be defined for any mathematical object, but for simplicity the scope of this article is restricted to strings. We must first specify a description language for strings.  Such a description language can be based on any computer programming language, such as Lisp, Pascal, or Java virtual machine bytecode.  If P is a program which outputs a string x, then P is a description of x. The length of the description is just the length of P as a character string, multiplied by the number of bits in a character (e.g. 7 for ASCII).\n\nWe could, alternatively, choose an encoding for Turing machines, where an encoding is a function which associates to each Turing Machine M a bitstring . If M is a Turing Machine which, on input w, outputs string x, then the concatenated string  w is a description of x. For theoretical analysis, this approach is more suited for constructing detailed formal proofs and is generally preferred in the research literature. In this article, an informal approach is discussed.\n\nAny string s has at least one description. For example, the above string is output by the program:\n\n  function GenerateExample2String()\n     return \"4c1j5b2p0cv4w1x8rx2y39umgw5q85s7\"\n\nIf a description d(s) of a string s is of minimal length (i.e. it uses the fewest bits), it is called a minimal description of s.  Thus, the length of d(s) (i.e. the number of bits in the description) is the Kolmogorov complexity of s, written K(s). Symbolically,\n\nK(s) = |d(s)|.\n\nThe length of the shortest description will depend on the choice of description language; but the effect of changing languages is bounded (a result called the invariance theorem). The standard textbook is authored by Ming Li and Paul Vitanyi  \nin the references.\n\nInvariance theorem\n\nInformal treatment\n\nThere are some description languages which are optimal, in the following sense: given any description of an object in a description language, said description may be used in the optimal description language with a constant overhead. The constant depends only on the languages involved, not on the description of the object, nor the object being described.\n\nHere is an example of an optimal description language. A description will have two parts:\n\n* The first part describes another description language.\n* The second part is a description of the object in that language.\n\nIn more technical terms, the first part of a description is a computer program, with the second part being the input to that computer program which produces the object as output.\n\nThe invariance theorem follows: Given any description language L, the optimal description language is at least as efficient as L, with some constant overhead.\n\nProof: Any description D in L can be converted into a description in the optimal language by first describing L as a computer program P (part 1), and then using the original description D as input to that program (part 2). The\ntotal length of this new description D′ is (approximately):\n\n|D′| = |P| + |D|\n\nThe length of P is a constant that doesn't depend on D. So, there is at most a constant overhead, regardless of the object described. Therefore, the optimal language is universal up to this additive constant.\n\nA more formal treatment\n\nTheorem: If K1 and K2 are the complexity functions relative to Turing complete description languages L1 and L2, then there is a constant c – which depends only on the languages L1 and L2 chosen – such that\n\n∀s.  -c ≤ K1(s) - K2(s) ≤ c.\n\nProof: By symmetry, it suffices to prove that there is some constant c such that for all strings s\n\nK1(s) ≤ K2(s) + c.\n\nNow, suppose there is a program in the language L1 which acts as an interpreter for L2:\n\n   function InterpretLanguage(string p)\n\nwhere p is a program in L2. The interpreter is characterized by the following property:\n\nRunning InterpretLanguage on input p returns the result of running p.\n\nThus, if P is a program in L2 which is a minimal description of s, then InterpretLanguage(P) returns the string s. The length of this description of s is the sum of\n\n# The length of the program InterpretLanguage, which we can take to be the constant c.\n# The length of P which by definition is K2(s).\n\nThis proves the desired upper bound.\n\nHistory and context\n\nAlgorithmic information theory is the area of computer science that studies Kolmogorov complexity and other complexity measures on strings (or other data structures).\n\nThe concept and theory of Kolmogorov Complexity is based on a crucial theorem first discovered by Ray Solomonoff, who published it in 1960, describing it in \"A Preliminary Report on a General Theory of Inductive Inference\" [http://world.std.com/~rjs/z138.pdf revision], Nov., 1960. as part of his invention of algorithmic probability. He gave a more complete description in his 1964 publications, \"A Formal Theory of Inductive Inference,\" Part 1 and Part 2 in Information and Control.\n\nAndrey Kolmogorov later independently published this theorem in Problems Inform. Transmission in 1965. Gregory Chaitin also presents this theorem in J. ACM – Chaitin's paper was submitted October 1966 and revised in December 1968, and cites both Solomonoff's and Kolmogorov's papers.\n\nThe theorem says that, among algorithms that decode strings from their descriptions (codes), there exists an optimal one. This algorithm, for all strings, allows codes as short as allowed by any other algorithm up to an additive constant that depends on the algorithms, but not on the strings themselves. Solomonoff used this algorithm, and the code lengths it allows, to define a \"universal probability\" of a string on which inductive inference of the subsequent digits of the string can be based. Kolmogorov used this theorem to define several functions of strings, including complexity, randomness, and information.\n\nWhen Kolmogorov became aware of Solomonoff's work, he acknowledged Solomonoff's priority. For several years, Solomonoff's work was better known in the Soviet Union than in the Western World. The general consensus in the scientific community, however, was to associate this type of complexity with Kolmogorov, who was concerned with randomness of a sequence, while Algorithmic Probability became associated with Solomonoff, who focused on prediction using his invention of the universal prior probability distribution. The broader area encompassing descriptional complexity and probability is often called Kolmogorov complexity. The computer scientist Ming Li considers this an example of the Matthew effect: \"... to everyone who has more will be given ...\"\n\nThere are several other variants of Kolmogorov complexity or algorithmic information. The most widely used one is based on self-delimiting programs, and is mainly due to Leonid Levin (1974).\n\nAn axiomatic approach to Kolmogorov complexity based on Blum axioms (Blum 1967) was introduced by Mark Burgin in the paper presented for publication by Andrey Kolmogorov (Burgin 1982).\n\nBasic results\n\nIn the following discussion, let K(s) be the complexity of the string s.\n\nIt is not hard to see that the minimal description of a string cannot be too much larger than the string itself — the program GenerateFixedString above that outputs s is a fixed amount larger than s.\n\nTheorem: There is a constant c such that\n\n∀s. K(s) ≤ |s| + c.\n\nUncomputability of Kolmogorov complexity\n\nTheorem: There exist strings of arbitrarily large Kolmogorov complexity. Formally: for each n ∈ ℕ, there is a string s with K(s) ≥ n.However, an s with K(s) \n n needn't exist for every n. For example, if n isn't a multiple of 7 bits, no ASCII program can have a length of exactly n bits.\n\nProof: Otherwise all of the infinitely many possible finite strings could be generated by the finitely manyThere are 1 + 2 + 22 + 23 + ... + 2n \n 2n+1 − 1 different program texts of length up to n bits; cf. geometric series. If program lengths are to be multiples of 7 bits, even fewer program texts exist. programs with a complexity below n bits.\n\nTheorem:  K is not a computable function. In other words, there is no program which takes a string s as input and produces the integer K(s) as output.\n\nThe following indirect proof uses a simple Pascal-like language to denote programs; for sake of proof simplicity assume its description (i.e. an interpreter) to have a length of  bits.\nAssume for contradiction there is a program\n\n   function KolmogorovComplexity(string s)\n\nwhich takes as input a string s and returns K(s); for sake of proof simplicity, assume the program's length to be  bits.\nNow, consider the following program of length  bits:\n\n   function GenerateComplexString()\n      for i = 1 to infinity:\n         for each string s of length exactly i\n            if KolmogorovComplexity(s) >= 8000000000\n               return s\n\nUsing KolmogorovComplexity as a subroutine, the program tries every string, starting with the shortest, until it returns a string with Kolmogorov complexity at least  bits,By the previous theorem, such a string exists, hence the for loop will eventually terminate. i.e. a string that cannot be produced by any program shorter than  bits. However, the overall length of the above program that produced s is only  bits,including the language interpreter and the subroutine code for KolmogorovComplexity which is a contradiction. (If the code of KolmogorovComplexity is shorter, the contradiction remains. If it is longer, the constant used in GenerateComplexString can always be changed appropriately.)If KolmogorovComplexity has length n bits, the constant m used in GenerateComplexString needs to be adapted to satisfy , which is always possible since m grows faster than log10(m).\n\nThe above proof used a contradiction similar to that of the Berry paradox: \"The smallest positive integer that cannot be defined in fewer than twenty English words\". It is also possible to show the non-computability of K by reduction from the non-computability of the halting problem H, since K and H are Turing-equivalent.Stated without proof in: [http://www.daimi.au.dk/~bromille/DC05/Kolmogorov.pdf \"Course notes for Data Compression - Kolmogorov complexity\"], 2005, P.B. Miltersen, p.7\n\nThere is a corollary, humorously called the \"full employment theorem\" in the programming language community, stating that there is no perfect size-optimizing compiler.\n\nA naive attempt at a program for K\n\nAt first glance it might seem trivial to write a program which can compute K(s) for any s (thus disproving the above theorem), such as the following:\n\n   function KolmogorovComplexity(string s)\n      for i = 1 to infinity:\n         for each string p of length exactly i\n            if isValidProgram(p) and evaluate(p) \n s\n               return i\n\nThis program iterates through all possible programs (by iterating through all possible strings and only considering those which are valid programs), starting with the shortest. Each program is executed to find the result produced by that program, comparing it to the input s. If the result matches the length of the program is returned.\n\nHowever this will not work because some of the programs p tested will not terminate, e.g. if they contain infinite loops. There is no way to avoid all of these programs by testing them in some way before executing them due to the non-computability of the halting problem.\n\nChain rule for Kolmogorov complexity\n\nThe chain rule for Kolmogorov complexity states that\n\nK(X,Y) ≤ K(X) + K(Y|X) + O(log(K(X,Y))).\n\nIt states that the shortest program that reproduces X and Y is no more than a logarithmic term larger than a program to reproduce X and a program to reproduce Y given X. Using this statement, one can define an analogue of mutual information for Kolmogorov complexity.\n\nCompression\n\nIt is straightforward to compute upper bounds for K(s) – simply compress the string s with some method, implement the corresponding decompressor in the chosen language, concatenate the decompressor to the compressed string, and measure the length of the resulting string – concretely, the size of a self-extracting archive in the given language.\n\nA string s is compressible by a number c if it has a description whose length does not exceed |s|−c bits. This is equivalent to saying that K(s) ≤ |s|-c.  Otherwise, s is incompressible by c. A string incompressible by 1 is said to be simply incompressible – by the pigeonhole principle, which applies because every compressed string maps to only one uncompressed string, incompressible strings must exist, since there are 2n bit strings of length n, but only 2n - 1 shorter strings, that is, strings of length less than n, (i.e. with length 0,1,...,n − 1).As there are  strings of length L, the number of strings of lengths  is  \n , which is a finite geometric series with sum  = \n\nFor the same reason, most strings are complex in the sense that they cannot be significantly compressed – their K(s) is not much smaller than |s|, the length of s in bits. To make this precise, fix a value of n. There are 2n bitstrings of length n. The uniform probability distribution on the space of these bitstrings assigns exactly equal weight 2−n to each string of length n.\n\nTheorem: With the uniform probability distribution on the space of bitstrings of length n, the probability that a string is incompressible by c is at least 1 - 2−c+1 + 2−n.\n\nTo prove the theorem, note that the number of descriptions of length not exceeding n-c is given by the geometric series:\n\n1 + 2 + 22 + ... + 2n-c = 2n-c+1 - 1.\n\nThere remain at least\n\n2n - 2n-c+1 + 1\n\nbitstrings of length n that are incompressible by c.  To determine the probability, divide by 2n.\n\nChaitin's incompleteness theorem\n\nWe know that, in the set of all possible strings, most strings are complex in the sense that they cannot be described in any significantly \"compressed\" way. However, it turns out that the fact that a specific string is complex cannot be formally proven, if the complexity of the string is above a certain threshold. The precise formalization is as follows. First, fix a particular axiomatic system S for the natural numbers. The axiomatic system has to be powerful enough so that, to certain assertions  A about complexity of strings, one can associate a formula FA in S. This association must have the following property:\n\nIf FA is provable from the axioms of S, then the corresponding assertion A must be true. This \"formalization\" can be achieved, either by an artificial encoding such as a Gödel numbering, or by a formalization which more clearly respects the intended interpretation of S.\n\nTheorem: There exists a constant L (which only depends on the particular axiomatic system and the choice of description language) such that there does not exist a string s for which the statement\n\nK(s) ≥  L (as formalized in S)\n\ncan be proven within the axiomatic system S.\n\nNote that, by the abundance of nearly incompressible strings, the vast majority of those statements must be true.\n\nThe proof of this result is modeled on a self-referential construction used in Berry's paradox. The proof is by contradiction. If the theorem were false, then\n\nAssumption (X): For any integer n there exists a string s for which there is a proof in S of the formula \"K(s) ≥ n\" (which we assume can be formalized in S).\n\nWe can find an effective enumeration of all the formal proofs in S by some procedure\n\n   function NthProof(int n)\nwhich takes as input n and outputs some proof. This function enumerates all proofs. Some of these are proofs for formulas we do not care about here, since every possible proof in the language of S is produced for some n. Some of these are complexity formulas of the form K(s) ≥ n where s and n are constants in the language of S. There is a program\n\n   function NthProofProvesComplexityFormula(int n)\n\nwhich determines whether the nth proof actually proves a complexity formula K(s) ≥ L. The strings s, and the integer L in turn, are computable by programs:\n\n   function StringNthProof(int n)\n\n   function ComplexityLowerBoundNthProof(int n)\n\nConsider the following program\n\n   function GenerateProvablyComplexString(int n)\n      for i = 1 to infinity:\n         if  NthProofProvesComplexityFormula(i) and ComplexityLowerBoundNthProof(i) ≥ n\n            return StringNthProof(i)\n\nGiven an n, this program tries every proof until it finds a string and a proof in the formal system S of the formula K(s) ≥ L for some L ≥ n. The program terminates by our Assumption (X). Now, this program has a length U. There is an integer n0 such that U + log2(n0) + C 0, where C is the overhead cost of\n\n    function GenerateProvablyParadoxicalString()\n       return GenerateProvablyComplexString(n0)\n\n(note that n0 is hard-coded into the above function, and the summand log2(n0) already allows for its encoding). The program GenerateProvablyParadoxicalString outputs a string s for which there exists an L such that K(s) ≥ L can be formally proved in S with L ≥ n0. In particular, K(s) ≥ n0 is true. However, s is also described by a program of length U + log2(n0) + C, so its complexity is less than n0.  This contradiction proves Assumption (X) cannot hold.\n\nSimilar ideas are used to prove the properties of Chaitin's constant.\n\nMinimum message length\n\nThe minimum message length principle of statistical and inductive inference and machine learning was developed by C.S. Wallace and D.M. Boulton in 1968. MML is Bayesian (i.e. it incorporates prior beliefs) and information-theoretic. It has the desirable properties of statistical invariance (i.e. the inference transforms with a re-parametrisation, such as from polar coordinates to Cartesian coordinates), statistical consistency (i.e. even for very hard problems, MML will converge to any underlying model) and efficiency (i.e. the MML model will converge to any true underlying model about as quickly as is possible). C.S. Wallace and D.L. Dowe (1999) showed a formal connection between MML and algorithmic information theory (or Kolmogorov complexity).\n\nKolmogorov randomness\n\nKolmogorov randomness defines a string (usually of bits) as being random if and only if it is shorter than any computer program that can produce that string.  To make this precise, a universal computer (or universal Turing machine) must be specified, so that \"program\" means a program for this universal machine. A random string in this sense is \"incompressible\" in that it is impossible to \"compress\" the string into a program whose length is shorter than the length of the string itself.  A counting argument is used to show that, for any universal computer, there is at least one algorithmically random string of each length.  Whether any particular string is random, however, depends on the specific universal computer that is chosen.\n\nThis definition can be extended to define a notion of randomness for infinite sequences from a finite alphabet. These algorithmically random sequences can be defined in three equivalent ways. One way uses an effective analogue of measure theory; another uses effective martingales.  The third way defines an infinite sequence to be random if the prefix-free Kolmogorov complexity of its initial segments grows quickly enough — there must be a constant c such that the complexity of an initial segment of length n is always at least n−c.  This definition, unlike the definition of randomness for a finite string, is not affected by which universal machine is used to define prefix-free Kolmogorov complexity.\n\nRelation to entropy\n\nFor dynamical systems, entropy rate and algorithmic complexity of the trajectories are related by a theorem of Brudno, that the equality K(x;T) =  h(T) holds for almost all x.\n\nIt can be shown that for the output of Markov information sources, Kolmogorov complexity is related to the entropy of the information source. More precisely, the Kolmogorov complexity of the output of a Markov information source, normalized by the length of the output, converges almost surely (as the length of the output goes to infinity) to the entropy of the source.\n\nConditional versions\n\nThe conditional Kolmogorov complexity of two strings K(x|y) is, roughly speaking, defined as the Kolmogorov complexity of x given y as an auxiliary input to the procedure.\n\nThere is also a length-conditional complexity K(x|L(x)), which is the complexity of x given the length of x as known/input.\n\nSubtleties and definitions are treated in P.M.B. Vitanyi (2013), Conditional Kolmogorov complexity and universal probability,\nTheoretical Computer Science, 501, 93-100[https://scholar.google.nl/scholar?hlnl&as_sdt\n0%2C5&qP.M.B.+Vitanyi%2C+Conditional+Kolmogorov+complexity+and+Universal+probability%2C+%7B%5Cem+Theoretical+Computer+Science%7D%2C+501%282013%29+93--100.&btnG\n].",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Kolmogorov complexity" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=1635" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In algorithmic information theory (a subfield of computer science and mathematics), the Kolmogorov complexity of an object, such as a piece of text, is the length of the shortest computer program (in a predetermined programming language) that produces the object as output.\nIt is a measure of the computational resources needed to specify the object, and is also known as descriptive complexity, Kolmogorov–Chaitin complexity, algorithmic entropy, or program-size complexity. It is named after Andrey Kolmogorov, who first published on the subject in 1963.\n\nThe notion of Kolmogorov complexity can be used to state and prove impossibility results akin to Cantor's diagonal argument, Gödel's incompleteness theorem, and Turing's halting problem.\nIn particular, for almost all objects, it is not possible to compute even a lower bound for its Kolmogorov complexity (Chaitin 1964), let alone its exact value.\n\nDefinition\n\nConsider the following two strings of 32 lowercase letters and digits.\n\nExample 1: abababababababababababababababab\nExample 2: 4c1j5b2p0cv4w1x8rx2y39umgw5q85s7\n\nThe first string has a short English-language description, namely \"ab 16 times\", which consists of 11 characters. The second one has no obvious simple description (using the same character set) other than writing down the string itself, which has 32 characters.\n\nMore formally, the complexity of a string is the length of the shortest possible description of the string in some fixed universal description language (the sensitivity of complexity relative to the choice of description language is discussed below). It can be shown that the Kolmogorov complexity of any string cannot be more than a few bytes larger than the length of the string itself. Strings like the abab example above, whose Kolmogorov complexity is small relative to the string's size, are not considered to be complex.\n\nThe Kolmogorov complexity can be defined for any mathematical object, but for simplicity the scope of this article is restricted to strings. We must first specify a description language for strings.  Such a description language can be based on any computer programming language, such as Lisp, Pascal, or Java virtual machine bytecode.  If P is a program which outputs a string x, then P is a description of x. The length of the description is just the length of P as a character string, multiplied by the number of bits in a character (e.g. 7 for ASCII).\n\nWe could, alternatively, choose an encoding for Turing machines, where an encoding is a function which associates to each Turing Machine M a bitstring . If M is a Turing Machine which, on input w, outputs string x, then the concatenated string  w is a description of x. For theoretical analysis, this approach is more suited for constructing detailed formal proofs and is generally preferred in the research literature. In this article, an informal approach is discussed.\n\nAny string s has at least one description. For example, the above string is output by the program:\n\n  function GenerateExample2String()\n     return \"4c1j5b2p0cv4w1x8rx2y39umgw5q85s7\"\n\nIf a description d(s) of a string s is of minimal length (i.e. it uses the fewest bits), it is called a minimal description of s.  Thus, the length of d(s) (i.e. the number of bits in the description) is the Kolmogorov complexity of s, written K(s). Symbolically,\n\nK(s) = |d(s)|.\n\nThe length of the shortest description will depend on the choice of description language; but the effect of changing languages is bounded (a result called the invariance theorem). The standard textbook is authored by Ming Li and Paul Vitanyi  \nin the references.\n\nInvariance theorem\n\nInformal treatment\n\nThere are some description languages which are optimal, in the following sense: given any description of an object in a description language, said description may be used in the optimal description language with a constant overhead. The constant depends only on the languages involved, not on the description of the object, nor the object being described.\n\nHere is an example of an optimal description language. A description will have two parts:\n\n* The first part describes another description language.\n* The second part is a description of the object in that language.\n\nIn more technical terms, the first part of a description is a computer program, with the second part being the input to that computer program which produces the object as output.\n\nThe invariance theorem follows: Given any description language L, the optimal description language is at least as efficient as L, with some constant overhead.\n\nProof: Any description D in L can be converted into a description in the optimal language by first describing L as a computer program P (part 1), and then using the original description D as input to that program (part 2). The\ntotal length of this new description D′ is (approximately):\n\n|D′| = |P| + |D|\n\nThe length of P is a constant that doesn't depend on D. So, there is at most a constant overhead, regardless of the object described. Therefore, the optimal language is universal up to this additive constant.\n\nA more formal treatment\n\nTheorem: If K1 and K2 are the complexity functions relative to Turing complete description languages L1 and L2, then there is a constant c – which depends only on the languages L1 and L2 chosen – such that\n\n∀s.  -c ≤ K1(s) - K2(s) ≤ c.\n\nProof: By symmetry, it suffices to prove that there is some constant c such that for all strings s\n\nK1(s) ≤ K2(s) + c.\n\nNow, suppose there is a program in the language L1 which acts as an interpreter for L2:\n\n   function InterpretLanguage(string p)\n\nwhere p is a program in L2. The interpreter is characterized by the following property:\n\nRunning InterpretLanguage on input p returns the result of running p.\n\nThus, if P is a program in L2 which is a minimal description of s, then InterpretLanguage(P) returns the string s. The length of this description of s is the sum of\n\n# The length of the program InterpretLanguage, which we can take to be the constant c.\n# The length of P which by definition is K2(s).\n\nThis proves the desired upper bound.\n\nHistory and context\n\nAlgorithmic information theory is the area of computer science that studies Kolmogorov complexity and other complexity measures on strings (or other data structures).\n\nThe concept and theory of Kolmogorov Complexity is based on a crucial theorem first discovered by Ray Solomonoff, who published it in 1960, describing it in \"A Preliminary Report on a General Theory of Inductive Inference\" [http://world.std.com/~rjs/z138.pdf revision], Nov., 1960. as part of his invention of algorithmic probability. He gave a more complete description in his 1964 publications, \"A Formal Theory of Inductive Inference,\" Part 1 and Part 2 in Information and Control.\n\nAndrey Kolmogorov later independently published this theorem in Problems Inform. Transmission in 1965. Gregory Chaitin also presents this theorem in J. ACM – Chaitin's paper was submitted October 1966 and revised in December 1968, and cites both Solomonoff's and Kolmogorov's papers.\n\nThe theorem says that, among algorithms that decode strings from their descriptions (codes), there exists an optimal one. This algorithm, for all strings, allows codes as short as allowed by any other algorithm up to an additive constant that depends on the algorithms, but not on the strings themselves. Solomonoff used this algorithm, and the code lengths it allows, to define a \"universal probability\" of a string on which inductive inference of the subsequent digits of the string can be based. Kolmogorov used this theorem to define several functions of strings, including complexity, randomness, and information.\n\nWhen Kolmogorov became aware of Solomonoff's work, he acknowledged Solomonoff's priority. For several years, Solomonoff's work was better known in the Soviet Union than in the Western World. The general consensus in the scientific community, however, was to associate this type of complexity with Kolmogorov, who was concerned with randomness of a sequence, while Algorithmic Probability became associated with Solomonoff, who focused on prediction using his invention of the universal prior probability distribution. The broader area encompassing descriptional complexity and probability is often called Kolmogorov complexity. The computer scientist Ming Li considers this an example of the Matthew effect: \"... to everyone who has more will be given ...\"\n\nThere are several other variants of Kolmogorov complexity or algorithmic information. The most widely used one is based on self-delimiting programs, and is mainly due to Leonid Levin (1974).\n\nAn axiomatic approach to Kolmogorov complexity based on Blum axioms (Blum 1967) was introduced by Mark Burgin in the paper presented for publication by Andrey Kolmogorov (Burgin 1982).\n\nBasic results\n\nIn the following discussion, let K(s) be the complexity of the string s.\n\nIt is not hard to see that the minimal description of a string cannot be too much larger than the string itself — the program GenerateFixedString above that outputs s is a fixed amount larger than s.\n\nTheorem: There is a constant c such that\n\n∀s. K(s) ≤ |s| + c.\n\nUncomputability of Kolmogorov complexity\n\nTheorem: There exist strings of arbitrarily large Kolmogorov complexity. Formally: for each n ∈ ℕ, there is a string s with K(s) ≥ n.However, an s with K(s) \n n needn't exist for every n. For example, if n isn't a multiple of 7 bits, no ASCII program can have a length of exactly n bits.\n\nProof: Otherwise all of the infinitely many possible finite strings could be generated by the finitely manyThere are 1 + 2 + 22 + 23 + ... + 2n \n 2n+1 − 1 different program texts of length up to n bits; cf. geometric series. If program lengths are to be multiples of 7 bits, even fewer program texts exist. programs with a complexity below n bits.\n\nTheorem:  K is not a computable function. In other words, there is no program which takes a string s as input and produces the integer K(s) as output.\n\nThe following indirect proof uses a simple Pascal-like language to denote programs; for sake of proof simplicity assume its description (i.e. an interpreter) to have a length of  bits.\nAssume for contradiction there is a program\n\n   function KolmogorovComplexity(string s)\n\nwhich takes as input a string s and returns K(s); for sake of proof simplicity, assume the program's length to be  bits.\nNow, consider the following program of length  bits:\n\n   function GenerateComplexString()\n      for i = 1 to infinity:\n         for each string s of length exactly i\n            if KolmogorovComplexity(s) >= 8000000000\n               return s\n\nUsing KolmogorovComplexity as a subroutine, the program tries every string, starting with the shortest, until it returns a string with Kolmogorov complexity at least  bits,By the previous theorem, such a string exists, hence the for loop will eventually terminate. i.e. a string that cannot be produced by any program shorter than  bits. However, the overall length of the above program that produced s is only  bits,including the language interpreter and the subroutine code for KolmogorovComplexity which is a contradiction. (If the code of KolmogorovComplexity is shorter, the contradiction remains. If it is longer, the constant used in GenerateComplexString can always be changed appropriately.)If KolmogorovComplexity has length n bits, the constant m used in GenerateComplexString needs to be adapted to satisfy , which is always possible since m grows faster than log10(m).\n\nThe above proof used a contradiction similar to that of the Berry paradox: \"The smallest positive integer that cannot be defined in fewer than twenty English words\". It is also possible to show the non-computability of K by reduction from the non-computability of the halting problem H, since K and H are Turing-equivalent.Stated without proof in: [http://www.daimi.au.dk/~bromille/DC05/Kolmogorov.pdf \"Course notes for Data Compression - Kolmogorov complexity\"], 2005, P.B. Miltersen, p.7\n\nThere is a corollary, humorously called the \"full employment theorem\" in the programming language community, stating that there is no perfect size-optimizing compiler.\n\nA naive attempt at a program for K\n\nAt first glance it might seem trivial to write a program which can compute K(s) for any s (thus disproving the above theorem), such as the following:\n\n   function KolmogorovComplexity(string s)\n      for i = 1 to infinity:\n         for each string p of length exactly i\n            if isValidProgram(p) and evaluate(p) \n s\n               return i\n\nThis program iterates through all possible programs (by iterating through all possible strings and only considering those which are valid programs), starting with the shortest. Each program is executed to find the result produced by that program, comparing it to the input s. If the result matches the length of the program is returned.\n\nHowever this will not work because some of the programs p tested will not terminate, e.g. if they contain infinite loops. There is no way to avoid all of these programs by testing them in some way before executing them due to the non-computability of the halting problem.\n\nChain rule for Kolmogorov complexity\n\nThe chain rule for Kolmogorov complexity states that\n\nK(X,Y) ≤ K(X) + K(Y|X) + O(log(K(X,Y))).\n\nIt states that the shortest program that reproduces X and Y is no more than a logarithmic term larger than a program to reproduce X and a program to reproduce Y given X. Using this statement, one can define an analogue of mutual information for Kolmogorov complexity.\n\nCompression\n\nIt is straightforward to compute upper bounds for K(s) – simply compress the string s with some method, implement the corresponding decompressor in the chosen language, concatenate the decompressor to the compressed string, and measure the length of the resulting string – concretely, the size of a self-extracting archive in the given language.\n\nA string s is compressible by a number c if it has a description whose length does not exceed |s|−c bits. This is equivalent to saying that K(s) ≤ |s|-c.  Otherwise, s is incompressible by c. A string incompressible by 1 is said to be simply incompressible – by the pigeonhole principle, which applies because every compressed string maps to only one uncompressed string, incompressible strings must exist, since there are 2n bit strings of length n, but only 2n - 1 shorter strings, that is, strings of length less than n, (i.e. with length 0,1,...,n − 1).As there are  strings of length L, the number of strings of lengths  is  \n , which is a finite geometric series with sum  = \n\nFor the same reason, most strings are complex in the sense that they cannot be significantly compressed – their K(s) is not much smaller than |s|, the length of s in bits. To make this precise, fix a value of n. There are 2n bitstrings of length n. The uniform probability distribution on the space of these bitstrings assigns exactly equal weight 2−n to each string of length n.\n\nTheorem: With the uniform probability distribution on the space of bitstrings of length n, the probability that a string is incompressible by c is at least 1 - 2−c+1 + 2−n.\n\nTo prove the theorem, note that the number of descriptions of length not exceeding n-c is given by the geometric series:\n\n1 + 2 + 22 + ... + 2n-c = 2n-c+1 - 1.\n\nThere remain at least\n\n2n - 2n-c+1 + 1\n\nbitstrings of length n that are incompressible by c.  To determine the probability, divide by 2n.\n\nChaitin's incompleteness theorem\n\nWe know that, in the set of all possible strings, most strings are complex in the sense that they cannot be described in any significantly \"compressed\" way. However, it turns out that the fact that a specific string is complex cannot be formally proven, if the complexity of the string is above a certain threshold. The precise formalization is as follows. First, fix a particular axiomatic system S for the natural numbers. The axiomatic system has to be powerful enough so that, to certain assertions  A about complexity of strings, one can associate a formula FA in S. This association must have the following property:\n\nIf FA is provable from the axioms of S, then the corresponding assertion A must be true. This \"formalization\" can be achieved, either by an artificial encoding such as a Gödel numbering, or by a formalization which more clearly respects the intended interpretation of S.\n\nTheorem: There exists a constant L (which only depends on the particular axiomatic system and the choice of description language) such that there does not exist a string s for which the statement\n\nK(s) ≥  L (as formalized in S)\n\ncan be proven within the axiomatic system S.\n\nNote that, by the abundance of nearly incompressible strings, the vast majority of those statements must be true.\n\nThe proof of this result is modeled on a self-referential construction used in Berry's paradox. The proof is by contradiction. If the theorem were false, then\n\nAssumption (X): For any integer n there exists a string s for which there is a proof in S of the formula \"K(s) ≥ n\" (which we assume can be formalized in S).\n\nWe can find an effective enumeration of all the formal proofs in S by some procedure\n\n   function NthProof(int n)\nwhich takes as input n and outputs some proof. This function enumerates all proofs. Some of these are proofs for formulas we do not care about here, since every possible proof in the language of S is produced for some n. Some of these are complexity formulas of the form K(s) ≥ n where s and n are constants in the language of S. There is a program\n\n   function NthProofProvesComplexityFormula(int n)\n\nwhich determines whether the nth proof actually proves a complexity formula K(s) ≥ L. The strings s, and the integer L in turn, are computable by programs:\n\n   function StringNthProof(int n)\n\n   function ComplexityLowerBoundNthProof(int n)\n\nConsider the following program\n\n   function GenerateProvablyComplexString(int n)\n      for i = 1 to infinity:\n         if  NthProofProvesComplexityFormula(i) and ComplexityLowerBoundNthProof(i) ≥ n\n            return StringNthProof(i)\n\nGiven an n, this program tries every proof until it finds a string and a proof in the formal system S of the formula K(s) ≥ L for some L ≥ n. The program terminates by our Assumption (X). Now, this program has a length U. There is an integer n0 such that U + log2(n0) + C 0, where C is the overhead cost of\n\n    function GenerateProvablyParadoxicalString()\n       return GenerateProvablyComplexString(n0)\n\n(note that n0 is hard-coded into the above function, and the summand log2(n0) already allows for its encoding). The program GenerateProvablyParadoxicalString outputs a string s for which there exists an L such that K(s) ≥ L can be formally proved in S with L ≥ n0. In particular, K(s) ≥ n0 is true. However, s is also described by a program of length U + log2(n0) + C, so its complexity is less than n0.  This contradiction proves Assumption (X) cannot hold.\n\nSimilar ideas are used to prove the properties of Chaitin's constant.\n\nMinimum message length\n\nThe minimum message length principle of statistical and inductive inference and machine learning was developed by C.S. Wallace and D.M. Boulton in 1968. MML is Bayesian (i.e. it incorporates prior beliefs) and information-theoretic. It has the desirable properties of statistical invariance (i.e. the inference transforms with a re-parametrisation, such as from polar coordinates to Cartesian coordinates), statistical consistency (i.e. even for very hard problems, MML will converge to any underlying model) and efficiency (i.e. the MML model will converge to any true underlying model about as quickly as is possible). C.S. Wallace and D.L. Dowe (1999) showed a formal connection between MML and algorithmic information theory (or Kolmogorov complexity).\n\nKolmogorov randomness\n\nKolmogorov randomness defines a string (usually of bits) as being random if and only if it is shorter than any computer program that can produce that string.  To make this precise, a universal computer (or universal Turing machine) must be specified, so that \"program\" means a program for this universal machine. A random string in this sense is \"incompressible\" in that it is impossible to \"compress\" the string into a program whose length is shorter than the length of the string itself.  A counting argument is used to show that, for any universal computer, there is at least one algorithmically random string of each length.  Whether any particular string is random, however, depends on the specific universal computer that is chosen.\n\nThis definition can be extended to define a notion of randomness for infinite sequences from a finite alphabet. These algorithmically random sequences can be defined in three equivalent ways. One way uses an effective analogue of measure theory; another uses effective martingales.  The third way defines an infinite sequence to be random if the prefix-free Kolmogorov complexity of its initial segments grows quickly enough — there must be a constant c such that the complexity of an initial segment of length n is always at least n−c.  This definition, unlike the definition of randomness for a finite string, is not affected by which universal machine is used to define prefix-free Kolmogorov complexity.\n\nRelation to entropy\n\nFor dynamical systems, entropy rate and algorithmic complexity of the trajectories are related by a theorem of Brudno, that the equality K(x;T) =  h(T) holds for almost all x.\n\nIt can be shown that for the output of Markov information sources, Kolmogorov complexity is related to the entropy of the information source. More precisely, the Kolmogorov complexity of the output of a Markov information source, normalized by the length of the output, converges almost surely (as the length of the output goes to infinity) to the entropy of the source.\n\nConditional versions\n\nThe conditional Kolmogorov complexity of two strings K(x|y) is, roughly speaking, defined as the Kolmogorov complexity of x given y as an auxiliary input to the procedure.\n\nThere is also a length-conditional complexity K(x|L(x)), which is the complexity of x given the length of x as known/input.\n\nSubtleties and definitions are treated in P.M.B. Vitanyi (2013), Conditional Kolmogorov complexity and universal probability,\nTheoretical Computer Science, 501, 93-100[https://scholar.google.nl/scholar?hlnl&as_sdt\n0%2C5&qP.M.B.+Vitanyi%2C+Conditional+Kolmogorov+complexity+and+Universal+probability%2C+%7B%5Cem+Theoretical+Computer+Science%7D%2C+501%282013%29+93--100.&btnG\n]. Kolmogorov complexity. http://en.wikipedia.org/?curid=1635."
  }
}
