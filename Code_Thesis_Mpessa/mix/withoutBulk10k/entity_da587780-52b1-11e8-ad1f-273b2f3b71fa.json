{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=6211",
  "eid" : "da587780-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778446072,
  "textBody" : "A context-sensitive grammar (CSG) is a formal grammar in which the left-hand sides and right-hand sides of any production rules may be surrounded by a context of terminal and nonterminal symbols. Context-sensitive grammars are more general than context-free grammars, in the sense that there are languages that can be described by CSG but not by context-free grammars. Context-sensitive grammars are less general (in the same sense) than unrestricted grammars. Thus, CSG are positioned between context-free and unrestricted grammars in the Chomsky hierarchy.\n\nA formal language that can be described by a context-sensitive grammar, or, equivalently, by a noncontracting grammar or a linear bounded automaton, is called a context-sensitive language. Some textbooks actually define CSGs as non-contracting, although this is not how Noam Chomsky defined them in 1959. This choice of definition makes no difference in terms of the languages generated (i.e. the two definitions are weakly equivalent), but it does make a difference in terms of what grammars are structurally considered context-sensitive; the latter issue was analyzed by Chomsky in 1963.\n\nChomsky introduced context-sensitive grammars as a way to describe the syntax of natural language where it is often the case that a word may or may not be appropriate in a certain place depending on the context. Walter Savitch has criticized the terminology \"context-sensitive\" as misleading and proposed \"non-erasing\" as better explaining the distinction between a CSG and an unrestricted grammar.\n\nAlthough it is well-known that certain features of languages (e.g. cross-serial dependency) are not context-free, it is an open question how much of CSG's expressive power is needed to capture the context sensitivity found in natural languages. Subsequent research in this area has focused on the more computationally tractable mildly context-sensitive languages.\n\nFormal definition\n\nA formal grammar G = (N, Σ, P, S), where N is a set of nonterminal symbols, Σ is a set of terminal symbols, P is a set of production rules, and S is the start symbol, is context-sensitive if all rules in P are of the form\nαAβ → αγβ\nwhere A ∈ N,i.e., A is a single nonterminal α,β ∈ (N∪Σ)* i.e., α and β are strings of nonterminals and terminals and γ ∈ (N∪Σ)+.i.e., γ is a nonempty string of nonterminals and terminals\n\nA string u ∈ (N∪Σ)* directly yields, or directly derives to, a string v ∈ (N∪Σ)*, denoted as u ⇒ v, if u can be written as lαAβr, and v can be written as lαγβr, for some production rule (αAβ→αγβ) ∈ P, and some context strings l, r ∈ (N∪Σ)*.\nMore generally, u is said to yield, or derive to, v, denoted as u ⇒* v, if u u1 ⇒ ... ⇒ un \n v for some n≥0 and some strings u2, ..., un-1 (N∪Σ)*. That is, the relation (⇒*) is the reflexive transitive closure of the relation (⇒).\n\nThe language of the grammar G is the set of all terminal symbol strings derivable from its start symbol, formally: L(G) = { w ∈ Σ*: S ⇒* w }.\nDerivations that do not end in a string composed of terminal symbols only are possible, but don't contribute to L(G).\n\nThe only difference between this definition of Chomsky and that of unrestricted grammars is that γ can be empty in the unrestricted case.\n\nSome definitions of a context-sensitive grammar only require that for any production rule of the form u → v, the length of u shall be less than or equal to the length of v.  This seemingly weaker requirement is in fact weakly equivalent,; p. 223–224; Exercise 9, p. 230. In the 2003 edition, the chapter on CSG has been omitted. see Noncontracting grammar#Transforming into context-sensitive grammar.\n\nIn addition, a rule of the form\nS → λ\nwhere λ represents the empty string and S does not appear on the right-hand side of any rule is permitted.  The addition of the empty string allows the statement that the context sensitive languages are a proper superset of the context-free languages, rather than having to make the weaker statement that all context-free grammars with no →λ productions are also context sensitive grammars.\n\nThe name context-sensitive is explained by the α and β that form the context of A and determine whether A can be replaced with γ or not. This is different from a context-free grammar where the context of a nonterminal is not taken into consideration. Indeed, every production of a context-free grammar is of the form V → w where V is a single nonterminal symbol, and w is a string of terminals and/or nonterminals; w can be empty.\n\nIf the possibility of adding the empty string to a language is added to the strings recognized by the noncontracting grammars (which can never include the empty string) then the languages in these two definitions are identical.\n\nThe left-context- and right-context-sensitive grammars are defined by restricting the rules to just the form αA → αγ and to just Aβ → γβ, respectively. The languages generated by these grammars are also the full class of context-sensitive languages. also at http://www.encyclopediaofmath.org/index.php/Grammar,_context-sensitive The equivalence was established by Penttonen normal form. citing \n\nExamples \n\nThe following grammar, with start symbol S, generates the canonical non-context-free language { anbncn : n ≥ 1 } :\n\nRules 1 and 2 allow for blowing-up S to anBC(BC)n-1; rules 3 to 6 allow for successively exchanging each CB to BC (four rules are needed for that since a rule CB → BC wouldn't fit into the scheme αAβ → αγβ); rules 7–10 allow replacing a non-terminals B and C with its corresponding terminals b and c respectively, provided it is in the right place.\nA generation chain for aaabbbccc is:\nS\n→2 aSBC\n→2 aaSBCBC\n→1 aaaBCBCBC\n→3 aaaBCZCBC\n→4 aaaBWZCBC\n→5 aaaBWCCBC\n→6 aaaBBCCBC\n→3 aaaBBCCZC\n→4 aaaBBCWZC\n→5 aaaBBCWCC\n→6 aaaBBCBCC\n→3 aaaBBCZCC\n→4 aaaBBWZCC\n→5 aaaBBWCCC\n→6 aaaBBBCCC\n→7 aaabBBCCC\n→8 aaabbBCCC\n→8 aaabbbCCC\n→9 aaabbbcCC\n→10 aaabbbccC\n→10 aaabbbccc\nMore complicated grammars can be used to parse { anbncndn: n ≥ 1 }, and other languages with even more letters.\n\nA context-sensitive grammar for the language { a2i : i ≥ 1 } is constructed in Example 9.5 (p. 224) of (Hopcroft, Ullman, 1979).\n\nKuroda normal form \n\nEvery context-sensitive grammar which does not generate the empty string can be transformed into a weakly equivalent one in Kuroda normal form. \"Weakly equivalent\" here means that the two grammars generate the same language. The normal form will not in general be context-sensitive, but will be a noncontracting grammar., Here: Theorem 2.2, p. 190\n\nThe Kuroda normal form is an actual normal form for non-contracting grammars.\n\nProperties and uses \n\nEquivalence to linear bounded automaton \n\nA formal language can be described by a context-sensitive grammar if and only if it is accepted by some linear bounded automaton (LBA).(Hopcroft, Ullman, 1979); Theorem 9.5, 9.6, p. 225–226 In some textbooks this result is attributed solely to Landweber and Kuroda. Others call it the Myhill-Landweber-Kuroda Theorem.http://www.cs.cmu.edu/~flac/pdf/ContSens.pdf (Myhill introduced the concept of deterministic LBA in 1960. Peter S. Landweber published in 1963 that the language accepted by a deterministic LBA is context sensitive. Kuroda introduced the notion of non-deterministic LBA and the equivalence between LBA and CSGs in 1964.)\n\n it is still an open question whether every context-sensitive language can be accepted by a deterministic LBA.\n\nClosure properties \n\nContext-sensitive languages are closed under complement. This 1988 result is known as the Immerman–Szelepcsényi theorem.\nMoreover, they are closed under union, intersection, concatenation, substitution,more formally: if L ⊆ Σ* is a context-sensitive language and f maps each a∈Σ to a context-sensitive language f(a), the f(L) is again a context-sensitive language inverse homomorphism, and Kleene plus.(Hopcroft, Ullman, 1979); Exercise S9.10, p. 230–231\n\nEvery recursively enumerable language L can be written as h(L) for some context-sensitive language L and some string homomorphism h.(Hopcroft, Ullman, 1979); Exercise S9.14, p. 230–232. h maps each symbol to itself or to the empty string.\n\nComputational problems \n\nThe decision problem that asks whether a certain string s belongs to the language of a given context-sensitive grammar G, is PSPACE-complete. Moreover, there are context-sensitive grammars whose languages are PSPACE-complete. In other words, there is a context-sensitive grammar G such that deciding whether a certain string s belongs to the language of G is PSPACE-complete (so G is fixed and only s is part of the input of the problem).An example of such a grammar, designed to solve the QSAT problem, is given in \n\nThe emptiness problem for context-sensitive grammars (given a context-sensitive grammar G, is L(G)∅ ?) is undecidable.(Hopcroft, Ullman, 1979); Exercise S9.13, p. 230–231This also follows from (1) context-free languages being also context-sensitive, (2) context-sensitive language being closed under intersection, but (3) disjointness of context-free languages being undecidable.\n\nThe LuZc parser is a working example of a program which can parse Context-sensitive grammars.\n\nAs model of natural languages \n\nSavitch has proven the following theoretical result, on which he bases his criticism of CSGs as basis for natural language: for any recursively enumerable set R, there exists a context-sensitive language/grammar G which can be used as a sort of proxy to test membership in R in the following way: given a string s, s is in R if and only if there exists a positive integer n for which scn is in G, where c is an arbitrary symbol not part of R.\n\nIt has been shown that nearly all natural languages may in general be characterized by context-sensitive grammars, but the whole class of CSG's seems to be much bigger than natural languages.  Worse yet, since the aforementioned decision problem for CSG's is PSPACE-complete, that makes them totally unworkable for practical use, as a polynomial-time algorithm for a PSPACE-complete problem would imply P\nNP.\n\nIt was proven that some natural languages are not context-free, based on identifying so-called cross-serial dependencies and unbounded scrambling phenomena. However this does not necessarily imply that all the class CSG is necessary to capture \"context sensitivity\" in the colloquial sense of these terms in natural languages. For example, the strictly weaker (than CSG) linear context-free rewriting systems (LCFRS) can account for the phenomenon of cross-serial dependencies; one can write a LCFRS grammar for {anbncndn | n ≥ 1} for example.\n\nOngoing research on computational linguistics has focused on formulating other classes of languages that are \"mildly context-sensitive\" whose decision problems are feasible, such as tree-adjoining grammars, combinatory categorial grammars, coupled context-free languages, and linear context-free rewriting systems.  The languages generated by these formalisms properly lie between the context-free and context-sensitive languages.\n\nMore recently, the class PTIME has been identified with range concatenation grammars, which are now considered to be the most expressive of the mild-context sensitive languages.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Context-sensitive grammar" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=6211" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "A context-sensitive grammar (CSG) is a formal grammar in which the left-hand sides and right-hand sides of any production rules may be surrounded by a context of terminal and nonterminal symbols. Context-sensitive grammars are more general than context-free grammars, in the sense that there are languages that can be described by CSG but not by context-free grammars. Context-sensitive grammars are less general (in the same sense) than unrestricted grammars. Thus, CSG are positioned between context-free and unrestricted grammars in the Chomsky hierarchy.\n\nA formal language that can be described by a context-sensitive grammar, or, equivalently, by a noncontracting grammar or a linear bounded automaton, is called a context-sensitive language. Some textbooks actually define CSGs as non-contracting, although this is not how Noam Chomsky defined them in 1959. This choice of definition makes no difference in terms of the languages generated (i.e. the two definitions are weakly equivalent), but it does make a difference in terms of what grammars are structurally considered context-sensitive; the latter issue was analyzed by Chomsky in 1963.\n\nChomsky introduced context-sensitive grammars as a way to describe the syntax of natural language where it is often the case that a word may or may not be appropriate in a certain place depending on the context. Walter Savitch has criticized the terminology \"context-sensitive\" as misleading and proposed \"non-erasing\" as better explaining the distinction between a CSG and an unrestricted grammar.\n\nAlthough it is well-known that certain features of languages (e.g. cross-serial dependency) are not context-free, it is an open question how much of CSG's expressive power is needed to capture the context sensitivity found in natural languages. Subsequent research in this area has focused on the more computationally tractable mildly context-sensitive languages.\n\nFormal definition\n\nA formal grammar G = (N, Σ, P, S), where N is a set of nonterminal symbols, Σ is a set of terminal symbols, P is a set of production rules, and S is the start symbol, is context-sensitive if all rules in P are of the form\nαAβ → αγβ\nwhere A ∈ N,i.e., A is a single nonterminal α,β ∈ (N∪Σ)* i.e., α and β are strings of nonterminals and terminals and γ ∈ (N∪Σ)+.i.e., γ is a nonempty string of nonterminals and terminals\n\nA string u ∈ (N∪Σ)* directly yields, or directly derives to, a string v ∈ (N∪Σ)*, denoted as u ⇒ v, if u can be written as lαAβr, and v can be written as lαγβr, for some production rule (αAβ→αγβ) ∈ P, and some context strings l, r ∈ (N∪Σ)*.\nMore generally, u is said to yield, or derive to, v, denoted as u ⇒* v, if u u1 ⇒ ... ⇒ un \n v for some n≥0 and some strings u2, ..., un-1 (N∪Σ)*. That is, the relation (⇒*) is the reflexive transitive closure of the relation (⇒).\n\nThe language of the grammar G is the set of all terminal symbol strings derivable from its start symbol, formally: L(G) = { w ∈ Σ*: S ⇒* w }.\nDerivations that do not end in a string composed of terminal symbols only are possible, but don't contribute to L(G).\n\nThe only difference between this definition of Chomsky and that of unrestricted grammars is that γ can be empty in the unrestricted case.\n\nSome definitions of a context-sensitive grammar only require that for any production rule of the form u → v, the length of u shall be less than or equal to the length of v.  This seemingly weaker requirement is in fact weakly equivalent,; p. 223–224; Exercise 9, p. 230. In the 2003 edition, the chapter on CSG has been omitted. see Noncontracting grammar#Transforming into context-sensitive grammar.\n\nIn addition, a rule of the form\nS → λ\nwhere λ represents the empty string and S does not appear on the right-hand side of any rule is permitted.  The addition of the empty string allows the statement that the context sensitive languages are a proper superset of the context-free languages, rather than having to make the weaker statement that all context-free grammars with no →λ productions are also context sensitive grammars.\n\nThe name context-sensitive is explained by the α and β that form the context of A and determine whether A can be replaced with γ or not. This is different from a context-free grammar where the context of a nonterminal is not taken into consideration. Indeed, every production of a context-free grammar is of the form V → w where V is a single nonterminal symbol, and w is a string of terminals and/or nonterminals; w can be empty.\n\nIf the possibility of adding the empty string to a language is added to the strings recognized by the noncontracting grammars (which can never include the empty string) then the languages in these two definitions are identical.\n\nThe left-context- and right-context-sensitive grammars are defined by restricting the rules to just the form αA → αγ and to just Aβ → γβ, respectively. The languages generated by these grammars are also the full class of context-sensitive languages. also at http://www.encyclopediaofmath.org/index.php/Grammar,_context-sensitive The equivalence was established by Penttonen normal form. citing \n\nExamples \n\nThe following grammar, with start symbol S, generates the canonical non-context-free language { anbncn : n ≥ 1 } :\n\nRules 1 and 2 allow for blowing-up S to anBC(BC)n-1; rules 3 to 6 allow for successively exchanging each CB to BC (four rules are needed for that since a rule CB → BC wouldn't fit into the scheme αAβ → αγβ); rules 7–10 allow replacing a non-terminals B and C with its corresponding terminals b and c respectively, provided it is in the right place.\nA generation chain for aaabbbccc is:\nS\n→2 aSBC\n→2 aaSBCBC\n→1 aaaBCBCBC\n→3 aaaBCZCBC\n→4 aaaBWZCBC\n→5 aaaBWCCBC\n→6 aaaBBCCBC\n→3 aaaBBCCZC\n→4 aaaBBCWZC\n→5 aaaBBCWCC\n→6 aaaBBCBCC\n→3 aaaBBCZCC\n→4 aaaBBWZCC\n→5 aaaBBWCCC\n→6 aaaBBBCCC\n→7 aaabBBCCC\n→8 aaabbBCCC\n→8 aaabbbCCC\n→9 aaabbbcCC\n→10 aaabbbccC\n→10 aaabbbccc\nMore complicated grammars can be used to parse { anbncndn: n ≥ 1 }, and other languages with even more letters.\n\nA context-sensitive grammar for the language { a2i : i ≥ 1 } is constructed in Example 9.5 (p. 224) of (Hopcroft, Ullman, 1979).\n\nKuroda normal form \n\nEvery context-sensitive grammar which does not generate the empty string can be transformed into a weakly equivalent one in Kuroda normal form. \"Weakly equivalent\" here means that the two grammars generate the same language. The normal form will not in general be context-sensitive, but will be a noncontracting grammar., Here: Theorem 2.2, p. 190\n\nThe Kuroda normal form is an actual normal form for non-contracting grammars.\n\nProperties and uses \n\nEquivalence to linear bounded automaton \n\nA formal language can be described by a context-sensitive grammar if and only if it is accepted by some linear bounded automaton (LBA).(Hopcroft, Ullman, 1979); Theorem 9.5, 9.6, p. 225–226 In some textbooks this result is attributed solely to Landweber and Kuroda. Others call it the Myhill-Landweber-Kuroda Theorem.http://www.cs.cmu.edu/~flac/pdf/ContSens.pdf (Myhill introduced the concept of deterministic LBA in 1960. Peter S. Landweber published in 1963 that the language accepted by a deterministic LBA is context sensitive. Kuroda introduced the notion of non-deterministic LBA and the equivalence between LBA and CSGs in 1964.)\n\n it is still an open question whether every context-sensitive language can be accepted by a deterministic LBA.\n\nClosure properties \n\nContext-sensitive languages are closed under complement. This 1988 result is known as the Immerman–Szelepcsényi theorem.\nMoreover, they are closed under union, intersection, concatenation, substitution,more formally: if L ⊆ Σ* is a context-sensitive language and f maps each a∈Σ to a context-sensitive language f(a), the f(L) is again a context-sensitive language inverse homomorphism, and Kleene plus.(Hopcroft, Ullman, 1979); Exercise S9.10, p. 230–231\n\nEvery recursively enumerable language L can be written as h(L) for some context-sensitive language L and some string homomorphism h.(Hopcroft, Ullman, 1979); Exercise S9.14, p. 230–232. h maps each symbol to itself or to the empty string.\n\nComputational problems \n\nThe decision problem that asks whether a certain string s belongs to the language of a given context-sensitive grammar G, is PSPACE-complete. Moreover, there are context-sensitive grammars whose languages are PSPACE-complete. In other words, there is a context-sensitive grammar G such that deciding whether a certain string s belongs to the language of G is PSPACE-complete (so G is fixed and only s is part of the input of the problem).An example of such a grammar, designed to solve the QSAT problem, is given in \n\nThe emptiness problem for context-sensitive grammars (given a context-sensitive grammar G, is L(G)∅ ?) is undecidable.(Hopcroft, Ullman, 1979); Exercise S9.13, p. 230–231This also follows from (1) context-free languages being also context-sensitive, (2) context-sensitive language being closed under intersection, but (3) disjointness of context-free languages being undecidable.\n\nThe LuZc parser is a working example of a program which can parse Context-sensitive grammars.\n\nAs model of natural languages \n\nSavitch has proven the following theoretical result, on which he bases his criticism of CSGs as basis for natural language: for any recursively enumerable set R, there exists a context-sensitive language/grammar G which can be used as a sort of proxy to test membership in R in the following way: given a string s, s is in R if and only if there exists a positive integer n for which scn is in G, where c is an arbitrary symbol not part of R.\n\nIt has been shown that nearly all natural languages may in general be characterized by context-sensitive grammars, but the whole class of CSG's seems to be much bigger than natural languages.  Worse yet, since the aforementioned decision problem for CSG's is PSPACE-complete, that makes them totally unworkable for practical use, as a polynomial-time algorithm for a PSPACE-complete problem would imply P\nNP.\n\nIt was proven that some natural languages are not context-free, based on identifying so-called cross-serial dependencies and unbounded scrambling phenomena. However this does not necessarily imply that all the class CSG is necessary to capture \"context sensitivity\" in the colloquial sense of these terms in natural languages. For example, the strictly weaker (than CSG) linear context-free rewriting systems (LCFRS) can account for the phenomenon of cross-serial dependencies; one can write a LCFRS grammar for {anbncndn | n ≥ 1} for example.\n\nOngoing research on computational linguistics has focused on formulating other classes of languages that are \"mildly context-sensitive\" whose decision problems are feasible, such as tree-adjoining grammars, combinatory categorial grammars, coupled context-free languages, and linear context-free rewriting systems.  The languages generated by these formalisms properly lie between the context-free and context-sensitive languages.\n\nMore recently, the class PTIME has been identified with range concatenation grammars, which are now considered to be the most expressive of the mild-context sensitive languages. Context-sensitive grammar. http://en.wikipedia.org/?curid=6211."
  }
}
