{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=10474",
  "eid" : "f5c9c410-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778492113,
  "textBody" : "The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n2 and n\n3.E. J. Hoffman et al., \"Construction for the Solutions of the m Queens Problem\". Mathematics Magazine, Vol. XX (1969), pp. 66–72. [http://penguin.ewu.edu/~trolfe/QueenLasVegas/Hoffman.pdf]\n\nHistory\n\nChess composer Max Bezzel published the eight queens puzzle in 1848. Franz Nauck published the first solutions in 1850.W. W. Rouse Ball (1960) \"The Eight Queens Problem\", in Mathematical Recreations and Essays, Macmillan, New York, pp. 165–171. Nauck also extended the puzzle to the n queens problem, with n queens on a chessboard of n × n squares.\n\nSince then, many mathematicians, including Carl Friedrich Gauss, have worked on both the eight queens puzzle and its generalized n-queens version. In 1874, S. Gunther proposed a method using determinants to find solutions. J.W.L. Glaisher refined Gunther's approach.\n\nIn 1972, Edsger Dijkstra used this problem to illustrate the power of what he called structured programming. He published a highly detailed description of a depth-first backtracking algorithm.2\n\nSolution construction\n\nThe problem can be quite computationally expensive, as there are 4,426,165,368 (i.e., 64C8) possible arrangements of eight queens on an 8×8 board, but only 92 solutions. It is possible to use shortcuts that reduce computational requirements or rules of thumb that avoids brute-force computational techniques. For example, by applying a simple rule that constrains each queen to a single column (or row), though still considered brute force, it is possible to reduce the number of possibilities to 16,777,216 (that is, 88) possible combinations. Generating permutations further reduces the possibilities to just 40,320 (that is, 8!), which are then checked for diagonal attacks.\n\nMartin Richards published a program to count solutions to the n-queens problem using bitwise operations.Martin Richards. Backtracking Algorithms in MCPL using Bit Patterns and Recursion. University of Cambridge Computer Laboratory. http://www.cl.cam.ac.uk/~mr10/backtrk.pdf. However, this solution has already been published by Zongyan Qiu.\n\nSolutions \n\nThe eight queens puzzle has 92 distinct solutions. If solutions that differ only by the symmetry operations of rotation and reflection of the board are counted as one, the puzzle has 12 solutions.  These are called fundamental solutions; representatives of each are shown below.\n\nA fundamental solution usually has eight variants (including its original form) obtained by rotating 90, 180, or 270° and then reflecting each of the four rotational variants in a mirror in a fixed position. However, should a solution be equivalent to its own 90° rotation (as happens to one solution with five queens on a 5×5 board), that fundamental solution will have only two variants (itself and its reflection). Should a solution be equivalent to its own 180° rotation (but not to its 90° rotation), it will have four variants (itself and its reflection, its 90° rotation and the reflection of that). If n > 1, it is not possible for a solution to be equivalent to its own reflection because that would require two queens to be facing each other.  Of the 12 fundamental solutions to the problem with eight queens on an 8×8 board, exactly one (solution 12 below) is equal to its own 180° rotation, and none is equal to its 90° rotation; thus, the number of distinct solutions is 11×8 + 1×4 = 92 (where the 8 is derived from four 90° rotational positions and their reflections, and the 4 is derived from two 180° rotational positions and their reflections).\n\nThe different fundamental solutions are presented below:\n\nSolution 10 has the additional property that no three queens are in a straight line.\n\nExplicit solutions\n\nThese brute-force algorithms to count the number of solutions are computationally manageable for n  8, but would be intractable for problems of n ≥ 20, as 20! \n 2.433 × 1018.  If the goal is to find a single solution then explicit solutions exist for all n ≥ 4, requiring no combinatorial search whatsoever.[http://delivery.acm.org/10.1145/130000/122322/p7-bernhardsson.pdf?ip128.125.133.201&CFID\n44352328&CFTOKEN62267842&__acm__\n1316815405_9a82b00e821cdd41080729f6f3f40975 Explicit Solutions to the N-Queens Problem for all N], Bo Bernhardsson (1991), Department of Automatic Control, Lund Institute of Technology, Sweden.\nThe explicit solutions exhibit stair-stepped patterns, as in the following examples for n = 8, 9 and 10:\n\nThe examples above can be obtained with the following formulas. Let (i, j) be the square in column i and row j on the n × n chessboard, k an integer.\n\n# If n is even and n ≠ 6k + 2, then place queens at (i, 2i) and (n/2 + i, 2i - 1) for i = 1, 2, ..., n / 2.\n# If n is even and n ≠ 6k, then place queens at (i, 1 + ((2i + n/2 - 3 )(mod n))) and (n + 1 - i, n - ((2i + n/2 - 3 )(mod n))) for i = 1, 2, ..., n / 2.\n# If n is odd, then use one of the patterns above for (n − 1) and add a queen at (n, n).\n\nAnother approach is\n\n# If the remainder from dividing n by 6 is not 2 or 3 then the list is simply all even numbers followed by all odd numbers not greater than N.\n# Otherwise, write separate lists of even and odd numbers (i. e. 2, 4, 6, 8 — 1, 3, 5, 7).\n# If the remainder is 2, swap 1 and 3 in odd list and move 5 to the end (i. e. 3, 1, 7, 5).\n# If the remainder is 3, move 2 to the end of even list and 1,3 to the end of odd list (i. e. 4, 6, 8, 2 — 5, 7, 1, 3).\n# Append odd list to the even list and place queens in the rows given by these numbers, from left to right (i. e. a2, b4, c6, d8, e3, f1, g7, h5).\n\nFor n = 8 this results in fundamental solution 1 above. A few more examples follow.\n\n* 14 queens (remainder 2): 2, 4, 6, 8, 10, 12, 14, 3, 1, 7, 9, 11, 13, 5.\n* 15 queens (remainder 3): 4, 6, 8, 10, 12, 14, 2, 5, 7, 9, 11, 13, 15, 1, 3.\n* 20 queens (remainder 2): 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 3, 1, 7, 9, 11, 13, 15, 17, 19, 5.\n\nCounting solutions\n\nThe following table gives the number of solutions for placing n queens on an n × n board, both fundamental  and all , for n=1–10, 24–27.\n\nNote that the six queens puzzle has fewer solutions than the five queens puzzle.\n\nThere is currently no known formula for the exact number of solutions, or even for its asymptotic behaviour. Currently\nthe 27x27 board is the highest-order board that has been completely enumerated.[http://github.com/preusser/q27 The Q27 Project] Finding a single solution for a bigger board is not difficult.\n\nRelated problems\n\n*Higher dimensions\nFind the number of non-attacking queens that can be placed in a d-dimensional chess space of size n.  More than n queens can be placed in some higher dimensions (the smallest example is four non-attacking queens in a 3 × 3 × 3 chess space), and it is in fact known that for any k, there are higher dimensions where nk queens do not suffice to attack all spaces.J. Barr and S. Rao (2006), The n-Queens Problem in Higher Dimensions, Elemente der Mathematik, vol 61 (4), pp. 133–137.\n*Using pieces other than queens\nOn an 8×8 board one can place 32 knights, or 14 bishops, 16 kings or eight rooks, so that no two pieces attack each other. Fairy chess pieces have also been substituted for queens.  In the case of knights, an easy solution is to place one on each square of a given color, since they move only to the opposite color. The solution is also easy for rooks and kings. Eight rooks can be placed along a long diagonal (amongst thousands of other solutions), and 16 kings are placed on the board by dividing it into 2 by 2 squares and placing the kings at equivalent points on each square.\n*Permutation matrix\nIn mathematics, a permutation matrix can be regarded geometrically as a set of n points lying on the squares of a nxn chessboard, such that each row or column contains only one point. Thus, an order-n permutation matrix is a solution to an n-rooks puzzle.\n*Nonstandard boards\nPólya studied the n queens problem on a toroidal (\"donut-shaped\") board and showed that there is a solution on an n×n board if and only if n is not divisible by 2 or 3.G. Pólya, Uber die \"doppelt-periodischen\" Losungen des n-Damen-Problems, George Pólya:\n   Collected papers Vol. IV, G-C. Rota, ed., MIT Press, Cambridge, London, 1984, pp. 237–247\n In 2009 Pearson and Pearson algorithmically populated [http://queens.lyndenlea.info/beyond2d.php three-dimensional boards] (n×n×n) with n2 queens, and proposed that multiples of these can yield solutions for a four-dimensional version of the puzzle.\n*Domination\nGiven an n×n board, the domination number is the minimum number of queens (or other pieces) needed to attack or occupy every square. For n=8 the queen's domination number is 5.\n*[http://www.chessvariants.org/problems.dir/9queens.html Nine queens problem]\nPlace nine queens and one pawn on an 8×8 board in such a way that queens don't attack each other. Further generalization of the problem (complete solution is currently unknown): given an n×n chess board and m > n queens, find the minimum number of pawns, so that the m queens and the pawns can be set up on the board in such a way that no two queens attack each other.\n*[http://www.vector.org.uk/archive/v213/hui213.htm Queens and knights problem]\nPlace m queens and m knights on an n×n board so that no piece attacks another.\n*Magic squares\nIn 1992, Demirörs, Rafraf, and Tanik published a method for converting some magic squares into n-queens solutions, and vice versa.O. Demirörs, N. Rafraf, and M.M. Tanik. Obtaining n-queens solutions from magic squares and constructing magic squares from n-queens solutions. Journal of Recreational Mathematics, 24:272–280, 1992\n*Latin squares\nIn an n×n matrix, place each digit 1 through n in n locations in the matrix so that no two instances of the same digit are in the same row or column.\n*Exact cover\nConsider a matrix with one primary column for each of the n ranks of the board, one primary column for each of the n files, and one secondary column for each of the 4n − 6 nontrivial diagonals of the board.  The matrix has n2 rows: one for each possible queen placement, and each row has a 1 in the columns corresponding to that square's rank, file, and diagonals and a 0 in all the other columns.  Then the n queens problem is equivalent to choosing a subset of the rows of this matrix such that every primary column has a 1 in precisely one of the chosen rows and every secondary column has a 1 in at most one of the chosen rows; this is an example of a generalized exact cover problem, of which sudoku is another example.\n* n-Queens Completion\nA 2017 paper investigated the problem “Given an n × n chessboard on which some queens are already placed, can you place a queen in every remaining row so that no two queens attack each other?” and several related ones.  The authors asserted these problems are NP-complete, so related to a million dollar Millennium Prize, and #P-complete.\n\nExercise in algorithm design\n\nFinding all solutions to the eight queens puzzle is a good example of a simple but nontrivial problem. For this reason, it is often used as an example problem for various programming techniques, including nontraditional approaches such as constraint programming, logic programming or genetic algorithms. Most often, it is used as an example of a problem that can be solved with a recursive algorithm, by phrasing the n queens problem inductively in terms of adding a single queen to any solution to the problem of placing n−1 queens on an n-by-n chessboard. The induction bottoms out with the solution to the 'problem' of placing 0 queens on the chessboard, which is the empty chessboard.\n\nThis technique is much more efficient than the naïve brute-force search algorithm, which considers all 648  248 \n 281,474,976,710,656 possible blind placements of eight queens, and then filters these to remove all placements that place two queens either on the same square (leaving only 64!/56! 178,462,987,637,760 possible placements) or in mutually attacking positions. This very poor algorithm will, among other things, produce the same results over and over again in all the different permutations of the assignments of the eight queens, as well as repeating the same computations over and over again for the different sub-sets of each solution. A better brute-force algorithm places a single queen on each row, leading to only 88 \n 224 = 16,777,216 blind placements.\n\nIt is possible to do much better than this.\nOne algorithm solves the eight rooks puzzle by generating the permutations of the numbers 1 through 8 (of which there are 8! = 40,320), and uses the elements of each permutation as indices to place a queen on each row.\nThen it rejects those boards with diagonal attacking positions.\nThe backtracking depth-first search program, a slight improvement on the permutation method, constructs the search tree by considering one row of the board at a time, eliminating most nonsolution board positions at a very early stage in their construction.\nBecause it rejects rook and diagonal attacks even on incomplete boards, it examines only 15,720 possible queen placements.\nA further improvement, which examines only 5,508 possible queen\nplacements, is to combine the permutation based method with the early\npruning method: the permutations are generated depth-first, and\nthe search space is pruned if the partial permutation produces a\ndiagonal attack.\nConstraint programming can also be very effective on this problem.\n\nAn alternative to exhaustive search is an 'iterative repair' algorithm, which typically starts with all queens on the board, for example with one queen per column.[http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid4DC9292839FE7B1AFABA1EDB8183242C?doi\n10.1.1.57.4685&reprep1&type\npdf A Polynomial Time Algorithm for the N-Queen Problem] by Rok Sosic and Jun Gu, 1990.  Describes run time for up to 500,000 Queens which was the max they could run due to memory constraints. It then counts the number of conflicts (attacks), and uses a heuristic to determine how to improve the placement of the queens. The 'minimum-conflicts' heuristic — moving the piece with the largest number of conflicts to the square in the same column where the number of conflicts is smallest — is particularly effective: it finds a solution to the 1,000,000 queen problem in less than 50 steps on average. This assumes that the initial configuration is 'reasonably good' — if a million queens all start in the same row, it will obviously take at least 999,999 steps to fix it. A 'reasonably good' starting point can for instance be found by putting each queen in its own row and column so that it conflicts with the smallest number of queens already on the board.\n\nNote that 'iterative repair', unlike the 'backtracking' search outlined above, does not guarantee a solution: like all hillclimbing (i.e., greedy) procedures, it may get stuck on a local optimum (in which case the algorithm may be restarted with a different initial configuration). On the other hand, it can solve problem sizes that are several orders of magnitude beyond the scope of a depth-first search.\n\nThis animation illustrates backtracking to solve the problem. A queen is placed in a column that is known not to cause conflict. If a column is not found the program returns to the last good state and then tries a different column.\n\nSample program\n\nThe following is a Pascal  program by Niklaus Wirth in 1976.Wirth, 1976, p. 145 It finds one solution to the eight queens problem.\n\nprogram eightqueen1(output);\n \nvar i : integer; q : boolean;\n    a : array[ 1 .. 8] of boolean;\n    b : array[ 2 .. 16] of boolean;\n    c : array[ -7 .. 7] of boolean;\n    x : array[ 1 .. 8] of integer;\n \nprocedure try( i : integer; var q : boolean);\n    var j : integer;\n    begin \n    j := 0;\n    repeat \n        j := j + 1; \n        q := false;\n        if a[ j] and b[ i + j] and c[ i - j] then\n            begin \n            x[ i    ] := j;\n            a[ j    ] := false; \n            b[ i + j] := false; \n            c[ i - j] := false;\n            if i",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Eight queens puzzle" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=10474" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n2 and n\n3.E. J. Hoffman et al., \"Construction for the Solutions of the m Queens Problem\". Mathematics Magazine, Vol. XX (1969), pp. 66–72. [http://penguin.ewu.edu/~trolfe/QueenLasVegas/Hoffman.pdf]\n\nHistory\n\nChess composer Max Bezzel published the eight queens puzzle in 1848. Franz Nauck published the first solutions in 1850.W. W. Rouse Ball (1960) \"The Eight Queens Problem\", in Mathematical Recreations and Essays, Macmillan, New York, pp. 165–171. Nauck also extended the puzzle to the n queens problem, with n queens on a chessboard of n × n squares.\n\nSince then, many mathematicians, including Carl Friedrich Gauss, have worked on both the eight queens puzzle and its generalized n-queens version. In 1874, S. Gunther proposed a method using determinants to find solutions. J.W.L. Glaisher refined Gunther's approach.\n\nIn 1972, Edsger Dijkstra used this problem to illustrate the power of what he called structured programming. He published a highly detailed description of a depth-first backtracking algorithm.2\n\nSolution construction\n\nThe problem can be quite computationally expensive, as there are 4,426,165,368 (i.e., 64C8) possible arrangements of eight queens on an 8×8 board, but only 92 solutions. It is possible to use shortcuts that reduce computational requirements or rules of thumb that avoids brute-force computational techniques. For example, by applying a simple rule that constrains each queen to a single column (or row), though still considered brute force, it is possible to reduce the number of possibilities to 16,777,216 (that is, 88) possible combinations. Generating permutations further reduces the possibilities to just 40,320 (that is, 8!), which are then checked for diagonal attacks.\n\nMartin Richards published a program to count solutions to the n-queens problem using bitwise operations.Martin Richards. Backtracking Algorithms in MCPL using Bit Patterns and Recursion. University of Cambridge Computer Laboratory. http://www.cl.cam.ac.uk/~mr10/backtrk.pdf. However, this solution has already been published by Zongyan Qiu.\n\nSolutions \n\nThe eight queens puzzle has 92 distinct solutions. If solutions that differ only by the symmetry operations of rotation and reflection of the board are counted as one, the puzzle has 12 solutions.  These are called fundamental solutions; representatives of each are shown below.\n\nA fundamental solution usually has eight variants (including its original form) obtained by rotating 90, 180, or 270° and then reflecting each of the four rotational variants in a mirror in a fixed position. However, should a solution be equivalent to its own 90° rotation (as happens to one solution with five queens on a 5×5 board), that fundamental solution will have only two variants (itself and its reflection). Should a solution be equivalent to its own 180° rotation (but not to its 90° rotation), it will have four variants (itself and its reflection, its 90° rotation and the reflection of that). If n > 1, it is not possible for a solution to be equivalent to its own reflection because that would require two queens to be facing each other.  Of the 12 fundamental solutions to the problem with eight queens on an 8×8 board, exactly one (solution 12 below) is equal to its own 180° rotation, and none is equal to its 90° rotation; thus, the number of distinct solutions is 11×8 + 1×4 = 92 (where the 8 is derived from four 90° rotational positions and their reflections, and the 4 is derived from two 180° rotational positions and their reflections).\n\nThe different fundamental solutions are presented below:\n\nSolution 10 has the additional property that no three queens are in a straight line.\n\nExplicit solutions\n\nThese brute-force algorithms to count the number of solutions are computationally manageable for n  8, but would be intractable for problems of n ≥ 20, as 20! \n 2.433 × 1018.  If the goal is to find a single solution then explicit solutions exist for all n ≥ 4, requiring no combinatorial search whatsoever.[http://delivery.acm.org/10.1145/130000/122322/p7-bernhardsson.pdf?ip128.125.133.201&CFID\n44352328&CFTOKEN62267842&__acm__\n1316815405_9a82b00e821cdd41080729f6f3f40975 Explicit Solutions to the N-Queens Problem for all N], Bo Bernhardsson (1991), Department of Automatic Control, Lund Institute of Technology, Sweden.\nThe explicit solutions exhibit stair-stepped patterns, as in the following examples for n = 8, 9 and 10:\n\nThe examples above can be obtained with the following formulas. Let (i, j) be the square in column i and row j on the n × n chessboard, k an integer.\n\n# If n is even and n ≠ 6k + 2, then place queens at (i, 2i) and (n/2 + i, 2i - 1) for i = 1, 2, ..., n / 2.\n# If n is even and n ≠ 6k, then place queens at (i, 1 + ((2i + n/2 - 3 )(mod n))) and (n + 1 - i, n - ((2i + n/2 - 3 )(mod n))) for i = 1, 2, ..., n / 2.\n# If n is odd, then use one of the patterns above for (n − 1) and add a queen at (n, n).\n\nAnother approach is\n\n# If the remainder from dividing n by 6 is not 2 or 3 then the list is simply all even numbers followed by all odd numbers not greater than N.\n# Otherwise, write separate lists of even and odd numbers (i. e. 2, 4, 6, 8 — 1, 3, 5, 7).\n# If the remainder is 2, swap 1 and 3 in odd list and move 5 to the end (i. e. 3, 1, 7, 5).\n# If the remainder is 3, move 2 to the end of even list and 1,3 to the end of odd list (i. e. 4, 6, 8, 2 — 5, 7, 1, 3).\n# Append odd list to the even list and place queens in the rows given by these numbers, from left to right (i. e. a2, b4, c6, d8, e3, f1, g7, h5).\n\nFor n = 8 this results in fundamental solution 1 above. A few more examples follow.\n\n* 14 queens (remainder 2): 2, 4, 6, 8, 10, 12, 14, 3, 1, 7, 9, 11, 13, 5.\n* 15 queens (remainder 3): 4, 6, 8, 10, 12, 14, 2, 5, 7, 9, 11, 13, 15, 1, 3.\n* 20 queens (remainder 2): 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 3, 1, 7, 9, 11, 13, 15, 17, 19, 5.\n\nCounting solutions\n\nThe following table gives the number of solutions for placing n queens on an n × n board, both fundamental  and all , for n=1–10, 24–27.\n\nNote that the six queens puzzle has fewer solutions than the five queens puzzle.\n\nThere is currently no known formula for the exact number of solutions, or even for its asymptotic behaviour. Currently\nthe 27x27 board is the highest-order board that has been completely enumerated.[http://github.com/preusser/q27 The Q27 Project] Finding a single solution for a bigger board is not difficult.\n\nRelated problems\n\n*Higher dimensions\nFind the number of non-attacking queens that can be placed in a d-dimensional chess space of size n.  More than n queens can be placed in some higher dimensions (the smallest example is four non-attacking queens in a 3 × 3 × 3 chess space), and it is in fact known that for any k, there are higher dimensions where nk queens do not suffice to attack all spaces.J. Barr and S. Rao (2006), The n-Queens Problem in Higher Dimensions, Elemente der Mathematik, vol 61 (4), pp. 133–137.\n*Using pieces other than queens\nOn an 8×8 board one can place 32 knights, or 14 bishops, 16 kings or eight rooks, so that no two pieces attack each other. Fairy chess pieces have also been substituted for queens.  In the case of knights, an easy solution is to place one on each square of a given color, since they move only to the opposite color. The solution is also easy for rooks and kings. Eight rooks can be placed along a long diagonal (amongst thousands of other solutions), and 16 kings are placed on the board by dividing it into 2 by 2 squares and placing the kings at equivalent points on each square.\n*Permutation matrix\nIn mathematics, a permutation matrix can be regarded geometrically as a set of n points lying on the squares of a nxn chessboard, such that each row or column contains only one point. Thus, an order-n permutation matrix is a solution to an n-rooks puzzle.\n*Nonstandard boards\nPólya studied the n queens problem on a toroidal (\"donut-shaped\") board and showed that there is a solution on an n×n board if and only if n is not divisible by 2 or 3.G. Pólya, Uber die \"doppelt-periodischen\" Losungen des n-Damen-Problems, George Pólya:\n   Collected papers Vol. IV, G-C. Rota, ed., MIT Press, Cambridge, London, 1984, pp. 237–247\n In 2009 Pearson and Pearson algorithmically populated [http://queens.lyndenlea.info/beyond2d.php three-dimensional boards] (n×n×n) with n2 queens, and proposed that multiples of these can yield solutions for a four-dimensional version of the puzzle.\n*Domination\nGiven an n×n board, the domination number is the minimum number of queens (or other pieces) needed to attack or occupy every square. For n=8 the queen's domination number is 5.\n*[http://www.chessvariants.org/problems.dir/9queens.html Nine queens problem]\nPlace nine queens and one pawn on an 8×8 board in such a way that queens don't attack each other. Further generalization of the problem (complete solution is currently unknown): given an n×n chess board and m > n queens, find the minimum number of pawns, so that the m queens and the pawns can be set up on the board in such a way that no two queens attack each other.\n*[http://www.vector.org.uk/archive/v213/hui213.htm Queens and knights problem]\nPlace m queens and m knights on an n×n board so that no piece attacks another.\n*Magic squares\nIn 1992, Demirörs, Rafraf, and Tanik published a method for converting some magic squares into n-queens solutions, and vice versa.O. Demirörs, N. Rafraf, and M.M. Tanik. Obtaining n-queens solutions from magic squares and constructing magic squares from n-queens solutions. Journal of Recreational Mathematics, 24:272–280, 1992\n*Latin squares\nIn an n×n matrix, place each digit 1 through n in n locations in the matrix so that no two instances of the same digit are in the same row or column.\n*Exact cover\nConsider a matrix with one primary column for each of the n ranks of the board, one primary column for each of the n files, and one secondary column for each of the 4n − 6 nontrivial diagonals of the board.  The matrix has n2 rows: one for each possible queen placement, and each row has a 1 in the columns corresponding to that square's rank, file, and diagonals and a 0 in all the other columns.  Then the n queens problem is equivalent to choosing a subset of the rows of this matrix such that every primary column has a 1 in precisely one of the chosen rows and every secondary column has a 1 in at most one of the chosen rows; this is an example of a generalized exact cover problem, of which sudoku is another example.\n* n-Queens Completion\nA 2017 paper investigated the problem “Given an n × n chessboard on which some queens are already placed, can you place a queen in every remaining row so that no two queens attack each other?” and several related ones.  The authors asserted these problems are NP-complete, so related to a million dollar Millennium Prize, and #P-complete.\n\nExercise in algorithm design\n\nFinding all solutions to the eight queens puzzle is a good example of a simple but nontrivial problem. For this reason, it is often used as an example problem for various programming techniques, including nontraditional approaches such as constraint programming, logic programming or genetic algorithms. Most often, it is used as an example of a problem that can be solved with a recursive algorithm, by phrasing the n queens problem inductively in terms of adding a single queen to any solution to the problem of placing n−1 queens on an n-by-n chessboard. The induction bottoms out with the solution to the 'problem' of placing 0 queens on the chessboard, which is the empty chessboard.\n\nThis technique is much more efficient than the naïve brute-force search algorithm, which considers all 648  248 \n 281,474,976,710,656 possible blind placements of eight queens, and then filters these to remove all placements that place two queens either on the same square (leaving only 64!/56! 178,462,987,637,760 possible placements) or in mutually attacking positions. This very poor algorithm will, among other things, produce the same results over and over again in all the different permutations of the assignments of the eight queens, as well as repeating the same computations over and over again for the different sub-sets of each solution. A better brute-force algorithm places a single queen on each row, leading to only 88 \n 224 = 16,777,216 blind placements.\n\nIt is possible to do much better than this.\nOne algorithm solves the eight rooks puzzle by generating the permutations of the numbers 1 through 8 (of which there are 8! = 40,320), and uses the elements of each permutation as indices to place a queen on each row.\nThen it rejects those boards with diagonal attacking positions.\nThe backtracking depth-first search program, a slight improvement on the permutation method, constructs the search tree by considering one row of the board at a time, eliminating most nonsolution board positions at a very early stage in their construction.\nBecause it rejects rook and diagonal attacks even on incomplete boards, it examines only 15,720 possible queen placements.\nA further improvement, which examines only 5,508 possible queen\nplacements, is to combine the permutation based method with the early\npruning method: the permutations are generated depth-first, and\nthe search space is pruned if the partial permutation produces a\ndiagonal attack.\nConstraint programming can also be very effective on this problem.\n\nAn alternative to exhaustive search is an 'iterative repair' algorithm, which typically starts with all queens on the board, for example with one queen per column.[http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid4DC9292839FE7B1AFABA1EDB8183242C?doi\n10.1.1.57.4685&reprep1&type\npdf A Polynomial Time Algorithm for the N-Queen Problem] by Rok Sosic and Jun Gu, 1990.  Describes run time for up to 500,000 Queens which was the max they could run due to memory constraints. It then counts the number of conflicts (attacks), and uses a heuristic to determine how to improve the placement of the queens. The 'minimum-conflicts' heuristic — moving the piece with the largest number of conflicts to the square in the same column where the number of conflicts is smallest — is particularly effective: it finds a solution to the 1,000,000 queen problem in less than 50 steps on average. This assumes that the initial configuration is 'reasonably good' — if a million queens all start in the same row, it will obviously take at least 999,999 steps to fix it. A 'reasonably good' starting point can for instance be found by putting each queen in its own row and column so that it conflicts with the smallest number of queens already on the board.\n\nNote that 'iterative repair', unlike the 'backtracking' search outlined above, does not guarantee a solution: like all hillclimbing (i.e., greedy) procedures, it may get stuck on a local optimum (in which case the algorithm may be restarted with a different initial configuration). On the other hand, it can solve problem sizes that are several orders of magnitude beyond the scope of a depth-first search.\n\nThis animation illustrates backtracking to solve the problem. A queen is placed in a column that is known not to cause conflict. If a column is not found the program returns to the last good state and then tries a different column.\n\nSample program\n\nThe following is a Pascal  program by Niklaus Wirth in 1976.Wirth, 1976, p. 145 It finds one solution to the eight queens problem.\n\nprogram eightqueen1(output);\n \nvar i : integer; q : boolean;\n    a : array[ 1 .. 8] of boolean;\n    b : array[ 2 .. 16] of boolean;\n    c : array[ -7 .. 7] of boolean;\n    x : array[ 1 .. 8] of integer;\n \nprocedure try( i : integer; var q : boolean);\n    var j : integer;\n    begin \n    j := 0;\n    repeat \n        j := j + 1; \n        q := false;\n        if a[ j] and b[ i + j] and c[ i - j] then\n            begin \n            x[ i    ] := j;\n            a[ j    ] := false; \n            b[ i + j] := false; \n            c[ i - j] := false;\n            if i. Eight queens puzzle. http://en.wikipedia.org/?curid=10474."
  }
}
