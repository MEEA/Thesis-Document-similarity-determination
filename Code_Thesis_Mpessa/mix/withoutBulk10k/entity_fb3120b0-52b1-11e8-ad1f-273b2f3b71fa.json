{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=11367",
  "eid" : "fb3120b0-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778501179,
  "textBody" : "A fourth-generation programming language (4GL) is any computer programming language that belongs to a class of languages envisioned as an advancement upon third-generation programming languages (3GL). Each of the programming language generations aims to provide a higher level of abstraction of the internal computer hardware details, making the language more programmer-friendly, powerful and versatile.  While the definition of 4GL has changed over time, it can be typified by operating more with large collections of information at once rather than focusing on just bits and bytes.  Languages claimed to be 4GL may include support for database management, report generation, mathematical optimization, GUI development, or web development. Some researchers state that 4GLs are a subset of domain-specific languages.35th Hawaii International Conference on System Sciences - 1002 [http://csdl.computer.org/comp/proceedings/hicss/2002/1435/09/14350279.pdf&ei=pgcWQ6CwKsKYYMfF9OAI Domain-Specific Languages for Software Engineering]   \n \n\nThe concept of 4GL was developed from the 1970s through the 1990s, overlapping most of the development of 3GL.  While 3GLs like C, C++, C#, Java, and JavaScript remain popular for a wide variety of uses, 4GLs as originally defined found narrower uses.  Some advanced 3GLs like Python, Ruby, and Perl combine some 4GL abilities within a general-purpose 3GL environment. Also, libraries with 4GL-like features have been developed as add-ons for most popular 3GLs.  This has blurred the distinction of 4GL and 3GL.\n\nIn the 1980s and 1990s, there were efforts to develop fifth-generation programming languages (5GL).\n\nHistory\n\nThough used earlier in papers and discussions, the term 4GL was first used formally by James Martin in his 1981 book Applications Development Without ProgrammersMartin, James. Application Development Without Programmers. Prentice-Hall, 1981. .  to refer to non-procedural, high-level specification languages. In some primitive way, early 4GLs were included in the Informatics MARK-IV (1967) product and Sperry's MAPPER (1969 internal use, 1979 release).\n\nThe motivations for the '4GL' inception and continued interest are several. The term can apply to a large set of software products. It can also apply to an approach that looks for greater semantic properties and implementation power. Just as the 3GL offered greater power to the programmer, so too did the 4GL open up the development environment to a wider population.\n\nThe early input scheme for the 4GL supported entry of data within the 72-character limit of the punched card (8 bytes used for sequencing) where a card's tag would identify the type or function. With judicious use of a few cards, the 4GL deck could offer a wide variety of processing and reporting capability whereas the equivalent functionality coded in a 3GL could subsume, perhaps, a whole box or more of cards.[http://www.columbia.edu/acis/history/cards.html Columbia University Computing History: IBM Cards]\n\nThe 72-character metaphor continued for a while as hardware progressed to larger memory and terminal interfaces. Even with its limitations, this approach supported highly sophisticated applications.\n\nAs interfaces improved and allowed longer statement lengths and grammar-driven input handling, greater power ensued. An example of this is described on the Nomad page.\n\n:Another example of Nomad's power is illustrated by Nicholas Rawlings in his comments for the Computer History Museum about NCSS (see citation below). He reports that James Martin asked Rawlings for a Nomad solution to a standard problem Martin called the Engineer's Problem: \"give 6% raises to engineers whose job ratings had an average of 7 or better.\" Martin provided a \"dozen pages of COBOL, and then just a page or two of Mark IV, from Informatics.\" Rawlings offered the following single statement, performing a set-at-a-time operation...\n\nThe development of the 4GL was influenced by several factors, with the hardware and operating system constraints having a large weight. When the 4GL was first introduced, a disparate mix of hardware and operating systems mandated custom application development support that was specific to the system in order to ensure sales. One example is the MAPPER system developed by Sperry. Though it has roots back to the beginning, the system has proven successful in many applications and has been ported to modern platforms. The latest variant is embedded in the BISUnisys. [http://www.unisys.com.hk/products/software/application__development/business__information__server/features.htm Business Information Server]  (BIS).  offering of Unisys. MARK-IV is now known as VISION:BUILDER and is offered by Computer Associates.\n\nSanta Fe railroad used MAPPER to develop a system, in a project that was an early example of 4GL, rapid prototyping, and programming by users.Louis Schlueter, User-Designed Computing: The Next Generation, 1988. [book on report generator and MAPPER systems] The idea was that it was easier to teach railroad experts to use MAPPER than to teach programmers the \"intricacies of railroad operations\".McNurlin & Sprague. [http://telaga.cs.ui.ac.id/WebKuliah/IKI42400/2004/McNurlin-5ed-ch09.pdf Technologies for Developing Systems] Information Systems Management in Practice. Prentice Hall, 2003. \n\nOne of the early (and portable) languages that had 4GL properties was Ramis developed by Gerald C. Cohen at Mathematica, a mathematical software company.  Cohen left Mathematica and founded Information Builders to create a similar reporting-oriented 4GL, called FOCUS.\n\nLater 4GL types are tied to a database system and are far different from the earlier types in their use of techniques and resources that have resulted from the general improvement of computing with time.\n\nAn interesting twist to the 4GL scene is realization that graphical interfaces and the related reasoning done by the user form a 'language' that is poorly understood.\n\nTypes\n\nA number of different types of 4GLs exist:\n* Table-driven (codeless) programming, usually running with a runtime framework and libraries. Instead of using code, the developer defines their logic by selecting an operation in a pre-defined list of memory or data table manipulation commands. In other words, instead of coding, the developer uses table-driven algorithm programming (see also control tables that can be used for this purpose). A good example of this type of 4GL language is PowerBuilder. These types of tools can be used for business application development usually consisting in a package allowing for both business data manipulation and reporting, therefore they come with GUI screens and report editors. They usually offer integration with lower level DLLs generated from a typical 3GL for when the need arise for more hardware/OS specific operations.\n* Report-generator programming languages take a description of the data format and the report to generate and from that they either generate the required report directly or they generate a program to generate the report. See also RPG\n*Similarly, forms generators manage online interactions with the application system users or generate programs to do so.\n* More ambitious 4GLs (sometimes termed fourth generation environments) attempt to automatically generate whole systems from the outputs of CASE tools, specifications of screens and reports, and possibly also the specification of some additional processing logic.\n* Data management 4GLs such as SAS, SPSS and Stata provide sophisticated coding commands for data manipulation, file reshaping, case selection and data documentation in the preparation of data for statistical analysis and reporting.\n\nSome 4GLs have integrated tools which allow for the easy specification of all the required information:\n\n* James Martin's version of Information Engineering systems development methodology was automated to allow the input of the results of system analysis and design in the form of data flow diagrams, entity relationship diagrams, entity life history diagrams etc. from which hundreds of thousands of lines of COBOL would be generated overnight.\n* More recently Oracle Corporation's Oracle Designer and Oracle Developer Suite 4GL products could be integrated to produce database definitions and the forms and reports programs.\n\nLow code environments\n\nIn the twenty first century, 4GL systems have emerged as \"low code\" environments or platforms for the problem of rapid application development in short periods of time. Vendors often provide sample systems such as CRM, contract management, bug tracking from which development can occur with little programming.http://www.zdnet.com/article/how-salesforce-is-using-low-code-orchestration-to-save-floundering-iot-projects/\n\nExamples\n\nGeneral use / versatile\n\n*Accelerator (Productivity)\n*Accell/SQL (4GL) from Unify Corporation.\n*Clarion\n*Clipper\n*CA-Telon 4GL Cobol/PLI generator \n*Cognos PowerHouse 4GL\n*DataFlex\n*Fort√© TOOL (transactional object-oriented language)\n*FOCUS\n*Visual FoxPro\n*GeneXus\n*IBM Rational EGL (Enterprise Generation Language)\n*LabVIEW\n*LANSA\n*LINC\n*Omnis Studio SDK\n*OutSystems (Productivity/PaaS)\n*PowerBuilder\n*Oracle Application Development Framework\n*DEC RALLY\n*SheerPower4GL (Microsoft Windows only)\n*SQLWindows/Team Developer\n*Uniface\n*Visual DataFlex (Microsoft Windows only)\n*Unix Shell\n*XBase++\n\nDatabase query languages\n\n*FOCUS\n*4D QL\n*Informix-4GL\n*OpenEdge ABL\n*OpenROAD (Ingres 4GL)\n*Ramis\n*SQL\n\nReport generators\n\n*LIRC\n*Oracle Reports\n*Progress 4GL Query/Results\n*RPG-II\n\nData manipulation, analysis, and reporting languages\n\n*Ab Initio\n*ABAP\n*Audit Command Language\n*Clarion Programming Language\n*CorVision\n*Culprit\n*ADS/Online (plus transaction processing)\n*Easytrieve\n*FOCUS\n*GraphTalk\n*IDL\n*IGOR Pro\n*Informix-4GL\n*JSL\n*LANSA\n*LabVIEW\n*MANTIS\n*MAPPER (Unisys/Sperry) now part of BIS\n*MARK-IV (Sterling/Informatics) now VISION:BUILDER of CA\n*Simulink a component of MATLAB\n*Nomad\n*PL/SQL\n*Progress 4GL\n*PROIV\n*R\n*Ramis\n*S\n*Scilab\n*SAS\n*SPSS\n*SQL PL\n*SQR\n*Stata\n*Synon\n*Wolfram Language\n*XBase++\n*Xquery\n\nGUI creators\n\n*4th Dimension (Software)\n*MATLAB's GUIDE\n*Omnis Studio\n*OpenROAD\n*Progress 4GL AppBuilder\n*SuperTalk\n*LiveCode\n*XUL Can be used with Xquery\n*Visual DataFlex\n\nMathematical optimization\n\n*AIMMS\n*AMPL\n*GAMS\n*MathProg\n\nDatabase-driven GUI application development\n\n*C/AL\n*Genexus\n*SB+/SystemBuilder\n*Unify VISION\n\nLow code development platformshttps://www.pcmag.com/roundup/353252/the-best-low-code-development-platforms?source\nautosuggesthttps://www.computerworld.com/article/3235985/apple-ios/10-wireless-chargers-for-apples-new-iphone-x.html#slide11https://www.infoworld.com/article/3214637/mobile-development/25-simple-tools-for-building-mobile-apps-fast.html#slide1\n\n*Appcelerator\n*Appian\n*Bizagi\n*K2https://www.k2.com/\n*Konyhttps://www.kony.com/\n*Mendix\n*OutSystems\n*PNMsoft\n*Progress\n*ServiceNow\n*ViziApps\n\nScreen painters and generators\n\n*SB+/SystemBuilder\n*Oracle Forms\n*Progress 4GL ProVision\n\nWeb development languages\n\n*ActiveVFP\n*CFML\n*LANSA\n*Wavemaker\n*OutSystems\n\nWhat's previous\n\n* First-generation programming language\n* Second-generation programming language\n* Third-generation programming language\nWhat's next\n\n* Fifth-generation programming language",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Fourth-generation programming language" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=11367" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "A fourth-generation programming language (4GL) is any computer programming language that belongs to a class of languages envisioned as an advancement upon third-generation programming languages (3GL). Each of the programming language generations aims to provide a higher level of abstraction of the internal computer hardware details, making the language more programmer-friendly, powerful and versatile.  While the definition of 4GL has changed over time, it can be typified by operating more with large collections of information at once rather than focusing on just bits and bytes.  Languages claimed to be 4GL may include support for database management, report generation, mathematical optimization, GUI development, or web development. Some researchers state that 4GLs are a subset of domain-specific languages.35th Hawaii International Conference on System Sciences - 1002 [http://csdl.computer.org/comp/proceedings/hicss/2002/1435/09/14350279.pdf&ei=pgcWQ6CwKsKYYMfF9OAI Domain-Specific Languages for Software Engineering]   \n \n\nThe concept of 4GL was developed from the 1970s through the 1990s, overlapping most of the development of 3GL.  While 3GLs like C, C++, C#, Java, and JavaScript remain popular for a wide variety of uses, 4GLs as originally defined found narrower uses.  Some advanced 3GLs like Python, Ruby, and Perl combine some 4GL abilities within a general-purpose 3GL environment. Also, libraries with 4GL-like features have been developed as add-ons for most popular 3GLs.  This has blurred the distinction of 4GL and 3GL.\n\nIn the 1980s and 1990s, there were efforts to develop fifth-generation programming languages (5GL).\n\nHistory\n\nThough used earlier in papers and discussions, the term 4GL was first used formally by James Martin in his 1981 book Applications Development Without ProgrammersMartin, James. Application Development Without Programmers. Prentice-Hall, 1981. .  to refer to non-procedural, high-level specification languages. In some primitive way, early 4GLs were included in the Informatics MARK-IV (1967) product and Sperry's MAPPER (1969 internal use, 1979 release).\n\nThe motivations for the '4GL' inception and continued interest are several. The term can apply to a large set of software products. It can also apply to an approach that looks for greater semantic properties and implementation power. Just as the 3GL offered greater power to the programmer, so too did the 4GL open up the development environment to a wider population.\n\nThe early input scheme for the 4GL supported entry of data within the 72-character limit of the punched card (8 bytes used for sequencing) where a card's tag would identify the type or function. With judicious use of a few cards, the 4GL deck could offer a wide variety of processing and reporting capability whereas the equivalent functionality coded in a 3GL could subsume, perhaps, a whole box or more of cards.[http://www.columbia.edu/acis/history/cards.html Columbia University Computing History: IBM Cards]\n\nThe 72-character metaphor continued for a while as hardware progressed to larger memory and terminal interfaces. Even with its limitations, this approach supported highly sophisticated applications.\n\nAs interfaces improved and allowed longer statement lengths and grammar-driven input handling, greater power ensued. An example of this is described on the Nomad page.\n\n:Another example of Nomad's power is illustrated by Nicholas Rawlings in his comments for the Computer History Museum about NCSS (see citation below). He reports that James Martin asked Rawlings for a Nomad solution to a standard problem Martin called the Engineer's Problem: \"give 6% raises to engineers whose job ratings had an average of 7 or better.\" Martin provided a \"dozen pages of COBOL, and then just a page or two of Mark IV, from Informatics.\" Rawlings offered the following single statement, performing a set-at-a-time operation...\n\nThe development of the 4GL was influenced by several factors, with the hardware and operating system constraints having a large weight. When the 4GL was first introduced, a disparate mix of hardware and operating systems mandated custom application development support that was specific to the system in order to ensure sales. One example is the MAPPER system developed by Sperry. Though it has roots back to the beginning, the system has proven successful in many applications and has been ported to modern platforms. The latest variant is embedded in the BISUnisys. [http://www.unisys.com.hk/products/software/application__development/business__information__server/features.htm Business Information Server]  (BIS).  offering of Unisys. MARK-IV is now known as VISION:BUILDER and is offered by Computer Associates.\n\nSanta Fe railroad used MAPPER to develop a system, in a project that was an early example of 4GL, rapid prototyping, and programming by users.Louis Schlueter, User-Designed Computing: The Next Generation, 1988. [book on report generator and MAPPER systems] The idea was that it was easier to teach railroad experts to use MAPPER than to teach programmers the \"intricacies of railroad operations\".McNurlin & Sprague. [http://telaga.cs.ui.ac.id/WebKuliah/IKI42400/2004/McNurlin-5ed-ch09.pdf Technologies for Developing Systems] Information Systems Management in Practice. Prentice Hall, 2003. \n\nOne of the early (and portable) languages that had 4GL properties was Ramis developed by Gerald C. Cohen at Mathematica, a mathematical software company.  Cohen left Mathematica and founded Information Builders to create a similar reporting-oriented 4GL, called FOCUS.\n\nLater 4GL types are tied to a database system and are far different from the earlier types in their use of techniques and resources that have resulted from the general improvement of computing with time.\n\nAn interesting twist to the 4GL scene is realization that graphical interfaces and the related reasoning done by the user form a 'language' that is poorly understood.\n\nTypes\n\nA number of different types of 4GLs exist:\n* Table-driven (codeless) programming, usually running with a runtime framework and libraries. Instead of using code, the developer defines their logic by selecting an operation in a pre-defined list of memory or data table manipulation commands. In other words, instead of coding, the developer uses table-driven algorithm programming (see also control tables that can be used for this purpose). A good example of this type of 4GL language is PowerBuilder. These types of tools can be used for business application development usually consisting in a package allowing for both business data manipulation and reporting, therefore they come with GUI screens and report editors. They usually offer integration with lower level DLLs generated from a typical 3GL for when the need arise for more hardware/OS specific operations.\n* Report-generator programming languages take a description of the data format and the report to generate and from that they either generate the required report directly or they generate a program to generate the report. See also RPG\n*Similarly, forms generators manage online interactions with the application system users or generate programs to do so.\n* More ambitious 4GLs (sometimes termed fourth generation environments) attempt to automatically generate whole systems from the outputs of CASE tools, specifications of screens and reports, and possibly also the specification of some additional processing logic.\n* Data management 4GLs such as SAS, SPSS and Stata provide sophisticated coding commands for data manipulation, file reshaping, case selection and data documentation in the preparation of data for statistical analysis and reporting.\n\nSome 4GLs have integrated tools which allow for the easy specification of all the required information:\n\n* James Martin's version of Information Engineering systems development methodology was automated to allow the input of the results of system analysis and design in the form of data flow diagrams, entity relationship diagrams, entity life history diagrams etc. from which hundreds of thousands of lines of COBOL would be generated overnight.\n* More recently Oracle Corporation's Oracle Designer and Oracle Developer Suite 4GL products could be integrated to produce database definitions and the forms and reports programs.\n\nLow code environments\n\nIn the twenty first century, 4GL systems have emerged as \"low code\" environments or platforms for the problem of rapid application development in short periods of time. Vendors often provide sample systems such as CRM, contract management, bug tracking from which development can occur with little programming.http://www.zdnet.com/article/how-salesforce-is-using-low-code-orchestration-to-save-floundering-iot-projects/\n\nExamples\n\nGeneral use / versatile\n\n*Accelerator (Productivity)\n*Accell/SQL (4GL) from Unify Corporation.\n*Clarion\n*Clipper\n*CA-Telon 4GL Cobol/PLI generator \n*Cognos PowerHouse 4GL\n*DataFlex\n*Fort√© TOOL (transactional object-oriented language)\n*FOCUS\n*Visual FoxPro\n*GeneXus\n*IBM Rational EGL (Enterprise Generation Language)\n*LabVIEW\n*LANSA\n*LINC\n*Omnis Studio SDK\n*OutSystems (Productivity/PaaS)\n*PowerBuilder\n*Oracle Application Development Framework\n*DEC RALLY\n*SheerPower4GL (Microsoft Windows only)\n*SQLWindows/Team Developer\n*Uniface\n*Visual DataFlex (Microsoft Windows only)\n*Unix Shell\n*XBase++\n\nDatabase query languages\n\n*FOCUS\n*4D QL\n*Informix-4GL\n*OpenEdge ABL\n*OpenROAD (Ingres 4GL)\n*Ramis\n*SQL\n\nReport generators\n\n*LIRC\n*Oracle Reports\n*Progress 4GL Query/Results\n*RPG-II\n\nData manipulation, analysis, and reporting languages\n\n*Ab Initio\n*ABAP\n*Audit Command Language\n*Clarion Programming Language\n*CorVision\n*Culprit\n*ADS/Online (plus transaction processing)\n*Easytrieve\n*FOCUS\n*GraphTalk\n*IDL\n*IGOR Pro\n*Informix-4GL\n*JSL\n*LANSA\n*LabVIEW\n*MANTIS\n*MAPPER (Unisys/Sperry) now part of BIS\n*MARK-IV (Sterling/Informatics) now VISION:BUILDER of CA\n*Simulink a component of MATLAB\n*Nomad\n*PL/SQL\n*Progress 4GL\n*PROIV\n*R\n*Ramis\n*S\n*Scilab\n*SAS\n*SPSS\n*SQL PL\n*SQR\n*Stata\n*Synon\n*Wolfram Language\n*XBase++\n*Xquery\n\nGUI creators\n\n*4th Dimension (Software)\n*MATLAB's GUIDE\n*Omnis Studio\n*OpenROAD\n*Progress 4GL AppBuilder\n*SuperTalk\n*LiveCode\n*XUL Can be used with Xquery\n*Visual DataFlex\n\nMathematical optimization\n\n*AIMMS\n*AMPL\n*GAMS\n*MathProg\n\nDatabase-driven GUI application development\n\n*C/AL\n*Genexus\n*SB+/SystemBuilder\n*Unify VISION\n\nLow code development platformshttps://www.pcmag.com/roundup/353252/the-best-low-code-development-platforms?source\nautosuggesthttps://www.computerworld.com/article/3235985/apple-ios/10-wireless-chargers-for-apples-new-iphone-x.html#slide11https://www.infoworld.com/article/3214637/mobile-development/25-simple-tools-for-building-mobile-apps-fast.html#slide1\n\n*Appcelerator\n*Appian\n*Bizagi\n*K2https://www.k2.com/\n*Konyhttps://www.kony.com/\n*Mendix\n*OutSystems\n*PNMsoft\n*Progress\n*ServiceNow\n*ViziApps\n\nScreen painters and generators\n\n*SB+/SystemBuilder\n*Oracle Forms\n*Progress 4GL ProVision\n\nWeb development languages\n\n*ActiveVFP\n*CFML\n*LANSA\n*Wavemaker\n*OutSystems\n\nWhat's previous\n\n* First-generation programming language\n* Second-generation programming language\n* Third-generation programming language\nWhat's next\n\n* Fifth-generation programming language. Fourth-generation programming language. http://en.wikipedia.org/?curid=11367."
  }
}
