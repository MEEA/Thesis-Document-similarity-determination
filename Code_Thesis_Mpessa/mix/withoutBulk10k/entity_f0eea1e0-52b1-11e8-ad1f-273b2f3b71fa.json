{
  "datasourceIdentifier" : "awesome wiki export",
  "backlink" : "http://en.wikipedia.org/?curid=9672",
  "eid" : "f0eea1e0-52b1-11e8-ad1f-273b2f3b71fa",
  "loadTime" : 1525778483966,
  "textBody" : "In mathematics and computer science, the ' (, German for \"decision problem\") is a challenge posed by David Hilbert in 1928.Hilbert and Ackermann The problem asks for an algorithm that takes as input a statement of a first-order logic (possibly with a finite number of axioms beyond the usual axioms of first-order logic) and answers \"Yes\" or \"No\" according to whether the statement is universally valid, i.e., valid in every structure satisfying the axioms. By the completeness theorem of first-order logic, a statement is universally valid if and only if it can be deduced from the axioms, so the ' can also be viewed as asking for an algorithm to decide whether a given statement is provable from the axioms using the rules of logic.\n\nIn 1936, Alonzo Church and Alan Turing published independent papersChurch's paper was presented to the American Mathematical Society on 19 April 1935 and published on 15 April 1936. Turing, who had made substantial progress in writing up his own results, was disappointed to learn of Church's proof upon its publication (see correspondence between Max Newman and Church in [http://diglib.princeton.edu/ead/getEad?eadidC0948&kw\n Alonzo Church papers] ). Turing quickly completed his paper and rushed it to publication; it was received by the Proceedings of the London Mathematical Society on 28 May 1936, read on 12 November 1936, and published in series 2, volume 42 (1936–7); it appeared in two sections: in Part 3 (pages 230–240), issued on Nov 30, 1936 and in Part 4 (pages 241–265), issued on Dec 23, 1936; Turing added corrections in volume 43 (1937), pp. 544–546. See the footnote at the end of Soare: 1996. showing that a general solution to the ' is impossible, assuming that the intuitive notion of \"effectively calculable\" is captured by the functions computable by a Turing machine (or equivalently, by those expressible in the lambda calculus). This assumption is now known as the Church–Turing thesis.\n\nHistory of the problem \n\nThe origin of the ' goes back to Gottfried Leibniz, who in the seventeenth century, after having constructed a successful mechanical calculating machine, dreamt of building a machine that could manipulate symbols in order to determine the truth values of mathematical statements.Davis 2000: pp. 3–20  He realized that the first step would have to be a clean formal language, and much of his subsequent work was directed towards that goal.  In 1928, David Hilbert and Wilhelm Ackermann posed the question in the form outlined above.\n\nIn continuation of his \"program\", Hilbert posed three questions at an international conference in 1928,  the third of which became known as \"Hilbert's '.\"Hodges p. 91 In 1929, Moses Schönfinkel published one paper on special cases of the decision problem, that was prepared by Paul Bernays.\n\nAs late as 1930, Hilbert believed that there would be no such thing as an unsolvable problem.Hodges p. 92, quoting from Hilbert\n\nNegative answer \n\nBefore the question could be answered, the notion of \"algorithm\" had to be formally defined.  This was done by Alonzo Church in 1936 with the concept of \"effective calculability\" based on his λ calculus and by Alan Turing in the same year with his concept of Turing machines.  Turing  immediately recognized that these are equivalent models of computation.\n\nThe negative answer to the ' was then given by Alonzo Church in 1935–36 and independently shortly thereafter by Alan Turing in 1936.  Church proved that there is no computable function which decides for two given λ-calculus expressions whether they are equivalent or not. He relied heavily on earlier work by Stephen Kleene. Turing reduced the question of the existence of an 'algorithm' or 'general method' able to solve the ' to the question of the existence of a 'general method' which decides whether any given Turing Machine halts or not (the halting problem). If 'Algorithm' is understood as being equivalent to a Turing Machine, and with the answer to the latter question negative (in general), the question about the existence of an Algorithm for the ' also must be negative (in general). In his 1936 paper, Turing says: \"Corresponding to each computing machine 'it' we construct a  formula 'Un(it)' and we show that, if there is a general method for determining whether 'Un(it)' is provable, then there is a general method for determining whether 'it' ever prints 0\".\n\nThe work of both Church and Turing was heavily influenced by Kurt Gödel's earlier work on his incompleteness theorem, especially by the method of assigning numbers (a Gödel numbering) to logical formulas in order to reduce logic to arithmetic.\n\nThe ' is related to Hilbert's tenth problem, which asks for an algorithm to decide whether Diophantine equations have a solution.  The non-existence of such an algorithm, established by Yuri Matiyasevich in 1970, also implies a negative answer to the Entscheidungsproblem.\n\nSome first-order theories are algorithmically decidable; examples of this include Presburger arithmetic, real closed fields and static type systems of many programming languages. The general first-order theory of the natural numbers expressed in Peano's axioms cannot be decided with an algorithm, however.\n\nPractical decision procedures\n\nHaving practical decision procedures for classes of logical formulas is of considerable interest for program verification and circuit verification. Pure Boolean logical formulas are usually decided using SAT-solving techniques based on the DPLL algorithm. Conjunctive formulas over linear real or rational arithmetic can be decided using the simplex algorithm, formulas in linear integer arithmetic (Presburger arithmetic) can be decided using Cooper's algorithm or William Pugh's Omega test. Formulas with negations, conjunctions and disjunctions combine the difficulties of satisfiability testing with that of decision of conjunctions; they are generally decided nowadays using SMT-solving techniques, which combine SAT-solving with decision procedures for conjunctions and propagation techniques. Real polynomial arithmetic, also known as the theory of real closed fields, is decidable; this is Tarski–Seidenberg theorem, which has been implemented in computers by using the cylindrical algebraic decomposition.",
  "entityProperties" : [ {
    "name" : "title",
    "type" : "String",
    "values" : [ "Entscheidungsproblem" ],
    "synthetic" : false
  }, {
    "name" : "url",
    "type" : "String",
    "values" : [ "http://en.wikipedia.org/?curid=9672" ],
    "synthetic" : false
  } ],
  "classifications" : [ "xml-export" ],
  "technicalAttributes" : {
    "technicalAttributes" : null,
    "aggregatedText" : "In mathematics and computer science, the ' (, German for \"decision problem\") is a challenge posed by David Hilbert in 1928.Hilbert and Ackermann The problem asks for an algorithm that takes as input a statement of a first-order logic (possibly with a finite number of axioms beyond the usual axioms of first-order logic) and answers \"Yes\" or \"No\" according to whether the statement is universally valid, i.e., valid in every structure satisfying the axioms. By the completeness theorem of first-order logic, a statement is universally valid if and only if it can be deduced from the axioms, so the ' can also be viewed as asking for an algorithm to decide whether a given statement is provable from the axioms using the rules of logic.\n\nIn 1936, Alonzo Church and Alan Turing published independent papersChurch's paper was presented to the American Mathematical Society on 19 April 1935 and published on 15 April 1936. Turing, who had made substantial progress in writing up his own results, was disappointed to learn of Church's proof upon its publication (see correspondence between Max Newman and Church in [http://diglib.princeton.edu/ead/getEad?eadidC0948&kw\n Alonzo Church papers] ). Turing quickly completed his paper and rushed it to publication; it was received by the Proceedings of the London Mathematical Society on 28 May 1936, read on 12 November 1936, and published in series 2, volume 42 (1936–7); it appeared in two sections: in Part 3 (pages 230–240), issued on Nov 30, 1936 and in Part 4 (pages 241–265), issued on Dec 23, 1936; Turing added corrections in volume 43 (1937), pp. 544–546. See the footnote at the end of Soare: 1996. showing that a general solution to the ' is impossible, assuming that the intuitive notion of \"effectively calculable\" is captured by the functions computable by a Turing machine (or equivalently, by those expressible in the lambda calculus). This assumption is now known as the Church–Turing thesis.\n\nHistory of the problem \n\nThe origin of the ' goes back to Gottfried Leibniz, who in the seventeenth century, after having constructed a successful mechanical calculating machine, dreamt of building a machine that could manipulate symbols in order to determine the truth values of mathematical statements.Davis 2000: pp. 3–20  He realized that the first step would have to be a clean formal language, and much of his subsequent work was directed towards that goal.  In 1928, David Hilbert and Wilhelm Ackermann posed the question in the form outlined above.\n\nIn continuation of his \"program\", Hilbert posed three questions at an international conference in 1928,  the third of which became known as \"Hilbert's '.\"Hodges p. 91 In 1929, Moses Schönfinkel published one paper on special cases of the decision problem, that was prepared by Paul Bernays.\n\nAs late as 1930, Hilbert believed that there would be no such thing as an unsolvable problem.Hodges p. 92, quoting from Hilbert\n\nNegative answer \n\nBefore the question could be answered, the notion of \"algorithm\" had to be formally defined.  This was done by Alonzo Church in 1936 with the concept of \"effective calculability\" based on his λ calculus and by Alan Turing in the same year with his concept of Turing machines.  Turing  immediately recognized that these are equivalent models of computation.\n\nThe negative answer to the ' was then given by Alonzo Church in 1935–36 and independently shortly thereafter by Alan Turing in 1936.  Church proved that there is no computable function which decides for two given λ-calculus expressions whether they are equivalent or not. He relied heavily on earlier work by Stephen Kleene. Turing reduced the question of the existence of an 'algorithm' or 'general method' able to solve the ' to the question of the existence of a 'general method' which decides whether any given Turing Machine halts or not (the halting problem). If 'Algorithm' is understood as being equivalent to a Turing Machine, and with the answer to the latter question negative (in general), the question about the existence of an Algorithm for the ' also must be negative (in general). In his 1936 paper, Turing says: \"Corresponding to each computing machine 'it' we construct a  formula 'Un(it)' and we show that, if there is a general method for determining whether 'Un(it)' is provable, then there is a general method for determining whether 'it' ever prints 0\".\n\nThe work of both Church and Turing was heavily influenced by Kurt Gödel's earlier work on his incompleteness theorem, especially by the method of assigning numbers (a Gödel numbering) to logical formulas in order to reduce logic to arithmetic.\n\nThe ' is related to Hilbert's tenth problem, which asks for an algorithm to decide whether Diophantine equations have a solution.  The non-existence of such an algorithm, established by Yuri Matiyasevich in 1970, also implies a negative answer to the Entscheidungsproblem.\n\nSome first-order theories are algorithmically decidable; examples of this include Presburger arithmetic, real closed fields and static type systems of many programming languages. The general first-order theory of the natural numbers expressed in Peano's axioms cannot be decided with an algorithm, however.\n\nPractical decision procedures\n\nHaving practical decision procedures for classes of logical formulas is of considerable interest for program verification and circuit verification. Pure Boolean logical formulas are usually decided using SAT-solving techniques based on the DPLL algorithm. Conjunctive formulas over linear real or rational arithmetic can be decided using the simplex algorithm, formulas in linear integer arithmetic (Presburger arithmetic) can be decided using Cooper's algorithm or William Pugh's Omega test. Formulas with negations, conjunctions and disjunctions combine the difficulties of satisfiability testing with that of decision of conjunctions; they are generally decided nowadays using SMT-solving techniques, which combine SAT-solving with decision procedures for conjunctions and propagation techniques. Real polynomial arithmetic, also known as the theory of real closed fields, is decidable; this is Tarski–Seidenberg theorem, which has been implemented in computers by using the cylindrical algebraic decomposition. Entscheidungsproblem. http://en.wikipedia.org/?curid=9672."
  }
}
